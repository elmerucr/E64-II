F00:0001       ; elmerucr - 01/08/2020
F00:0002       ; compiles with vasmm68k_mot
F00:0003       
F00:0004       	INCLUDE "kernel_definitions.s"
F01:0001       ; E64-II definitions - 2020-08-01 elmerucr
F01:0002       
F01:0003       ; general
F01:0004       KERNEL_VARS	equ	$000400
F01:0005       KERNEL_LOC	equ	$FC0000
F01:0006       SUPERV_STACK	equ	$E00000
F01:0007       
F01:0008       
F01:0009       ; ascii definitions
F01:0010       ASCII_NULL		equ	$00
F01:0011       ASCII_BACKSPACE		equ	$08
F01:0012       ASCII_LF		equ	$0A
F01:0013       ASCII_CR		equ	$0D
F01:0014       ASCII_CURSOR_DOWN	equ	$11
F01:0015       ASCII_REVERSE_ON	equ	$12
F01:0016       ASCII_CURSOR_RIGHT	equ	$1D
F01:0017       ASCII_SPACE		equ	$20
F01:0018       ASCII_CURSOR_UP		equ	$91
F01:0019       ASCII_REVERSE_OFF	equ	$92
F01:0020       ASCII_CURSOR_LEFT	equ	$9D
F01:0021       
F01:0022       
F01:0023       ; scrn_codes
F01:0024       SCRN_SPACE		equ	$20
F01:0025       
F01:0026       
F01:0027       ; char rom
F01:0028       CHAR_ROM		equ	$FB8000
F01:0029       CHAR_RAM		equ	$F10000
F01:0030       
F01:0031       
F01:0032       ; cia
F01:0033       CIA_BASE		equ	$FB0300
F01:0034       CIA_STATUS		equ	CIA_BASE
F01:0035       CIA_CONTROL		equ	CIA_BASE+$01
F01:0036       CIA_DELAY		equ	CIA_BASE+$02
F01:0037       CIA_REPEAT		equ	CIA_BASE+$03
F01:0038       CIA_ASCII		equ	CIA_BASE+$04
F01:0039       CIA_KEYBOARD		equ	CIA_BASE+$80
F01:0040       
F01:0041       
F01:0042       ; vicv
F01:0043       VICV_BASE		equ	$FB0400 	; vicv base register
F01:0044       VICV_BORDER_COLOR	equ	VICV_BASE	; 16 bit value
F01:0045       VICV_TXT		equ	VICV_BASE+$04
F01:0046       VICV_COL		equ	VICV_BASE+$08
F01:0047       VICV_BORDER_SIZE	equ	VICV_BASE+$0C
F01:0048       VICV_ISR		equ	VICV_BASE+$0E
F01:0049       VICV_BUFFERSWAP		equ	VICV_BASE+$10
F01:0050       
F01:0051       
F01:0052       ; SOUND
F01:0053       SOUND_BASE	equ	$FB0500			; base register
F01:0054       SID0_BASE	equ	SOUND_BASE
F01:0055       SID0_VOLUME	equ	SID0_BASE+$18
F01:0056       SID1_BASE	equ	SOUND_BASE+$20
F01:0057       SID1_VOLUME	equ	SID1_BASE+$18
F01:0058       ; SOUND MIXING
F01:0059       SID0_LEFT	equ	SOUND_BASE+$80
F01:0060       SID0_RGHT	equ	SOUND_BASE+$81
F01:0061       SID1_LEFT	equ	SOUND_BASE+$82
F01:0062       SID1_RGHT	equ	SOUND_BASE+$83
F01:0063       
F01:0064       
F01:0065       ; timer
F01:0066       TIMER_BASE		equ	$FB0600
F01:0067       
F01:0068       
F01:0069       ; blitter
F01:0070       BLITTER_BASE		equ	$FB0700
F01:0071       BLITTER_CONTROL		equ	BLITTER_BASE
F01:0072       BLITTER_DATA_32_BIT	equ	BLITTER_BASE+$02
F01:0073       BLITTER_CLEAR_COLOR	equ	BLITTER_BASE+$06	; 16 bit word
F01:0074       
F01:0075       
F01:0076       ; color palette
F01:0077       C64_BLACK	equ	$F000
F01:0078       C64_WHITE	equ	$FFFF
F01:0079       C64_RED		equ	$F733
F01:0080       C64_CYAN	equ	$F8CC
F01:0081       C64_PURPLE	equ	$F849
F01:0082       C64_GREEN	equ	$F6A5
F01:0083       C64_BLUE	equ	$F339
F01:0084       C64_YELLOW	equ	$FEE8
F01:0085       C64_ORANGE	equ	$F853
F01:0086       C64_BROWN	equ	$F531
F01:0087       C64_LIGHTRED	equ	$FB77
F01:0088       C64_DARKGREY	equ	$F444
F01:0089       C64_GREY	equ	$F777
F01:0090       C64_LIGHTGREEN	equ	$FBFA
F01:0091       C64_LIGHTBLUE	equ	$F67D
F01:0092       C64_LIGHTGREY	equ	$FAAA
F01:0093       
F01:0094       
F01:0095       ; music notes index
F01:0096       N_C0_	equ	00*2
F01:0097       N_C0S	equ	01*2
F01:0098       N_D0_	equ	02*2
F01:0099       N_D0S	equ	03*2
F01:0100       N_E0_	equ	04*2
F01:0101       N_F0_	equ	05*2
F01:0102       N_F0S	equ	06*2
F01:0103       N_G0_	equ	07*2
F01:0104       N_G0S	equ	08*2
F01:0105       N_A0_	equ	09*2
F01:0106       N_A0S	equ	10*2
F01:0107       N_B0_	equ	11*2
F01:0108       
F01:0109       N_C1_	equ	12*2
F01:0110       N_C1S	equ	13*2
F01:0111       N_D1_	equ	14*2
F01:0112       N_D1S	equ	15*2
F01:0113       N_E1_	equ	16*2
F01:0114       N_F1_	equ	17*2
F01:0115       N_F1S	equ	18*2
F01:0116       N_G1_	equ	19*2
F01:0117       N_G1S	equ	20*2
F01:0118       N_A1_	equ	21*2
F01:0119       N_A1S	equ	22*2
F01:0120       N_B1_	equ	23*2
F01:0121       
F01:0122       N_C2_	equ	24*2
F01:0123       N_C2S	equ	25*2
F01:0124       N_D2_	equ	26*2
F01:0125       N_D2S	equ	27*2
F01:0126       N_E2_	equ	28*2
F01:0127       N_F2_	equ	29*2
F01:0128       N_F2S	equ	30*2
F01:0129       N_G2_	equ	31*2
F01:0130       N_G2S	equ	32*2
F01:0131       N_A2_	equ	33*2
F01:0132       N_A2S	equ	34*2
F01:0133       N_B2_	equ	35*2
F01:0134       
F01:0135       N_C3_	equ	36*2
F01:0136       N_C3S	equ	37*2
F01:0137       N_D3_	equ	38*2
F01:0138       N_D3S	equ	39*2
F01:0139       N_E3_	equ	40*2
F01:0140       N_F3_	equ	41*2
F01:0141       N_F3S	equ	42*2
F01:0142       N_G3_	equ	43*2
F01:0143       N_G3S	equ	44*2
F01:0144       N_A3_	equ	45*2
F01:0145       N_A3S	equ	46*2
F01:0146       N_B3_	equ	47*2
F01:0147       
F01:0148       N_C4_	equ	48*2
F01:0149       N_C4S	equ	49*2
F01:0150       N_D4_	equ	50*2
F01:0151       N_D4S	equ	51*2
F01:0152       N_E4_	equ	52*2
F01:0153       N_F4_	equ	53*2
F01:0154       N_F4S	equ	54*2
F01:0155       N_G4_	equ	55*2
F01:0156       N_G4S	equ	56*2
F01:0157       N_A4_	equ	57*2
F01:0158       N_A4S	equ	58*2
F01:0159       N_B4_	equ	59*2
F01:0160       
F01:0161       N_C5_	equ	60*2
F01:0162       N_C5S	equ	61*2
F01:0163       N_D5_	equ	62*2
F01:0164       N_D5S	equ	63*2
F01:0165       N_E5_	equ	64*2
F01:0166       N_F5_	equ	65*2
F01:0167       N_F5S	equ	66*2
F01:0168       N_G5_	equ	67*2
F01:0169       N_G5S	equ	68*2
F01:0170       N_A5_	equ	69*2
F01:0171       N_A5S	equ	70*2
F01:0172       N_B5_	equ	71*2
F01:0173       
F01:0174       N_C6_	equ	72*2
F01:0175       N_C6S	equ	73*2
F01:0176       N_D6_	equ	74*2
F01:0177       N_D6S	equ	75*2
F01:0178       N_E6_	equ	76*2
F01:0179       N_F6_	equ	77*2
F01:0180       N_F6S	equ	78*2
F01:0181       N_G6_	equ	79*2
F01:0182       N_G6S	equ	80*2
F01:0183       N_A6_	equ	81*2
F01:0184       N_A6S	equ	82*2
F01:0185       N_B6_	equ	83*2
F01:0186       
F01:0187       N_C7_	equ	84*2
F01:0188       N_C7S	equ	85*2
F01:0189       N_D7_	equ	86*2
F01:0190       N_D7S	equ	87*2
F01:0191       N_E7_	equ	88*2
F01:0192       N_F7_	equ	89*2
F01:0193       N_F7S	equ	90*2
F01:0194       N_G7_	equ	91*2
F01:0195       N_G7S	equ	92*2
F01:0196       N_A7_	equ	93*2
F01:0197       N_A7S	equ	94*2
F01:0198       
F00:0005       
F00:0006       	ORG	$0
F00:0007       
F00:0008       vec_00				DS.L	1	; vector 0 - supervisor stackpointer
F00:0009       vec_01				DS.L	1	; vector 1 - reset vector
F00:0010       vec_02				DS.L	1	; vector 2
F00:0011       vec_03				DS.L	1	; vector 3
F00:0012       vec_04_illegal_instruction	DS.L	1	; vector 4 - illegal instruction
F00:0013       vec_05				DS.L	1
F00:0014       vec_06				DS.L	1
F00:0015       vec_07				DS.L	1
F00:0016       vec_08				DS.L	1
F00:0017       vec_09				DS.L	1
F00:0018       vec_10_unimpl_instruction	DS.L	1	; vector 10
F00:0019       vec_11_unimpl_instruction	DS.L	1	; vector 11
F00:0020       vec_12				DS.L	1
F00:0021       vec_13				DS.L	1
F00:0022       vec_14				DS.L	1
F00:0023       vec_15				DS.L	1
F00:0024       vec_16				DS.L	1
F00:0025       vec_17				DS.L	1
F00:0026       vec_18				DS.L	1
F00:0027       vec_19				DS.L	1
F00:0028       vec_20				DS.L	1
F00:0029       vec_21				DS.L	1
F00:0030       vec_22				DS.L	1
F00:0031       vec_23				DS.L	1
F00:0032       vec_24				DS.L	1
F00:0033       vec_25				DS.L	1
F00:0034       vec_26_level2_irq_autovect	DS.L	1	; vector 26
F00:0035       vec_27_level3_irq_autovect	DS.L	1	; vector 27
F00:0036       vec_28_level4_irq_autovect	DS.L	1	; vector 28
F00:0037       vec_29_level5_irq_autovect	DS.L	1	; vector 29
F00:0038       vec_30_level6_irq_autovect	DS.L	1	; vector 30
F00:0039       vec_31_level7_irq_autovect	DS.L	1	; vector 31
F00:0040       
F00:0041       
F00:0042       	ORG	KERNEL_VARS
F00:0043       
F00:0044       curr_text_color	DS.W	1
F00:0045       cursor_pos	DS.W	1
F00:0046       current_txt_scr	DS.L	1
F00:0047       
F00:0048       timer0_vector	DS.L	1
F00:0049       timer1_vector	DS.L	1
F00:0050       timer2_vector	DS.L	1
F00:0051       timer3_vector	DS.L	1
F00:0052       
F00:0053       	ALIGN	5
F00:0054       kernel_text_scr	DS.B	32
F00:0055       
F00:0056       se_crs_blink	DS.B	1	; byte (actually least significant bit), 0=off, 1=currently blinking
F00:0057       se_crs_cntdwn	DS.B	1	; byte, counter for blinking interval
F00:0058       se_crs_interval	DS.B	1	; byte, duration of blinking. e.g. @60Hz value 20 means 0.33s on, 0.33s off
F00:0059       se_orig_char	DS.B	1	; byte, original value of the char behind the cursor
F00:0060       se_orig_color	DS.W	1	; word, original value of the color value behind the cursor
F00:0061       se_command_buf	DS.B	64	; 64 bytes, hold a string of max. 63 chars followed by a NULL
F00:0062       
F00:0063       
F00:0064       	ORG	KERNEL_LOC
F00:0065       
F00:0066       	DC.L	SUPERV_STACK		; vector 0 - supervisor stackpointer
               S03:00FC0000:  00 E0 00 00
F00:0067       	DC.L	kernel_main		; vector 1 - reset vector
               S03:00FC0004:  00 FC 00 08
F00:0068       
F00:0069       
F00:0070       ; start of main kernel code
F00:0071       
F00:0072       kernel_main
F00:0073       
F00:0074       	BSR	setup_vector_table
               S03:00FC0008:  61 00 04 48
F00:0075       	BSR	reset_sids
               S03:00FC000C:  61 00 04 9E
F00:0076       	BSR	copy_charrom_to_charram
               S03:00FC0010:  61 00 04 04
F00:0077       
F00:0078       	; put something in the usp
F00:0079       	LEA	$C00000,A0
               S03:00FC0014:  41 F9 00 C0 00 00
F00:0080       	MOVE.L	A0,USP
               S03:00FC001A:  4E 60
F00:0081       
F00:0082       	; set up timer0 interrupts (cursor flashing)
F00:0083       
F00:0084       	MOVE.W	#$E10,TIMER_BASE+2	; load value 3600 ($E10 = 3600bpm = 60Hz)
               S03:00FC001C:  33 FC 0E 10 00 FB 06 02
F00:0085       	ORI.B	#%00000001,TIMER_BASE+1	; turn on interrupt generation by clock0
               S03:00FC0024:  00 39 00 01 00 FB 06 01
F00:0086       
F00:0087       
F00:0088       	; set up timer1 interrupts (ting sound)
F00:0089       
F00:0090       	;MOVE.W	#$3C,TIMER_BASE+2	; load value 60 ($3c = 60bpm = 1Hz)
F00:0091       	;ORI.B	#%00000010,TIMER_BASE+1	; turn on interrupt generation by clock0
F00:0092       
F00:0093       
F00:0094       	; set up timer3 interrupts at 50.125Hz for music / sid tunes
F00:0095       
F00:0096       	;MOVE.W	#$BC0,TIMER_BASE+2		; 3008bpm (=50.125Hz)
F00:0097       	;ORI.B	#%00001000,TIMER_BASE+1	; turn on interrupt generation by clock3
F00:0098       
F00:0099       
F00:0100       	; set ipl to level 1 (all interrupts levels of >= 2 will be acknowledged)
F00:0101       
F00:0102       	MOVE.W	SR,D0
               S03:00FC002C:  40 C0
F00:0103       	ANDI.W	#%1111100011111111,D0
               S03:00FC002E:  02 40 F8 FF
F00:0104       	ORI.W	#%0000000100000000,D0
               S03:00FC0032:  00 40 01 00
F00:0105       	MOVE.W	D0,SR
               S03:00FC0036:  46 C0
F00:0106       
F00:0107       	; CIA start generating keyboard events
F00:0108       	MOVE.B	#%00000001,CIA_CONTROL
               S03:00FC0038:  13 FC 00 01 00 FB 03 01
F00:0109       
F00:0110       
F00:0111       	; set color and size of border
F00:0112       	MOVE.W	#C64_BLACK,VICV_BORDER_COLOR
               S03:00FC0040:  33 FC F0 00 00 FB 04 00
F00:0113       	MOVE.B	#$10,VICV_BORDER_SIZE
               S03:00FC0048:  13 FC 00 10 00 FB 04 0C
F00:0114       
F00:0115       	; set clear color ('background')
F00:0116       	MOVE.W	#C64_BLUE,BLITTER_CLEAR_COLOR
               S03:00FC0050:  33 FC F3 39 00 FB 07 06
F00:0117       
F00:0118       	; copy the screen blit struct from rom to appropriate ram area
F00:0119       	LEA	screen_blit_structure,a0
               S03:00FC0058:  41 FA 05 06
F00:0120       	LEA	kernel_text_scr,a1
               S03:00FC005C:  43 F8 04 20
F00:0121       	MOVE.L	#$20,D0			; 32 bytes
               S03:00FC0060:  70 20
F00:0122       	JSR	memcopy
               S03:00FC0062:  61 00 03 9E
F00:0123       
F00:0124       	MOVE.L	#kernel_text_scr,current_txt_scr	; set current text screen
               S03:00FC0066:  21 FC 00 00 04 20 04 04
F00:0125       
F00:0126       
F00:0127       	; set txt & color pointer  -  deprecated!
F00:0128       	MOVE.L	#$00F00000,VICV_TXT
               S03:00FC006E:  23 FC 00 F0 00 00 00 FB 04 04
F00:0129       	MOVE.L	#$00F00800,VICV_COL
               S03:00FC0078:  23 FC 00 F0 08 00 00 FB 04 08
F00:0130       
F00:0131       	MOVE.W	#C64_LIGHTBLUE,curr_text_color
               S03:00FC0082:  31 FC F6 7D 04 00
F00:0132       
F00:0133       	; play a welcome sound on SID0
F00:0134       
F00:0135       	LEA	SID0_BASE,A0
               S03:00FC0088:  41 F9 00 FB 05 00
F00:0136       	LEA	notes,A1
               S03:00FC008E:  43 FA 05 2A
F00:0137       	MOVE.W	N_D3_(A1),(A0)		; set frequency of voice 1
               S03:00FC0092:  30 A9 00 4C
F00:0138       	MOVE.B	#%00001001,$5(A0)	; attack and decay of voice 1
               S03:00FC0096:  11 7C 00 09 00 05
F00:0139       	MOVE.W	#$F0F,$02(A0)		; pulse width of voice 1
               S03:00FC009C:  31 7C 0F 0F 00 02
F00:0140       	MOVE.B	#$FF,SID0_LEFT		; left channel mix
               S03:00FC00A2:  13 FC 00 FF 00 FB 05 80
F00:0141       	MOVE.B	#$10,SID0_RGHT		; right channel mix
               S03:00FC00AA:  13 FC 00 10 00 FB 05 81
F00:0142       	MOVE.B	#%01000001,$4(A0)	; pulse (bit 6) and open gate (bit 0)
               S03:00FC00B2:  11 7C 00 41 00 04
F00:0143       
F00:0144       
F00:0145       	; play a welcome sound on SID1
F00:0146       
F00:0147       	LEA	SID1_BASE,A0
               S03:00FC00B8:  41 F9 00 FB 05 20
F00:0148       	LEA	notes,A1
               S03:00FC00BE:  43 FA 04 FA
F00:0149       	MOVE.W	N_A3_(A1),(A0)		; set frequency of voice 1
               S03:00FC00C2:  30 A9 00 5A
F00:0150       	MOVE.B	#%00001001,$5(A0)	; attack and decay of voice 1
               S03:00FC00C6:  11 7C 00 09 00 05
F00:0151       	MOVE.W	#$F0F,$2(A0)		; pulse width of voice 1
               S03:00FC00CC:  31 7C 0F 0F 00 02
F00:0152       	MOVE.B	#$10,SID1_LEFT		; left channel mix
               S03:00FC00D2:  13 FC 00 10 00 FB 05 82
F00:0153       	MOVE.B	#$FF,SID1_RGHT		; right channel mix
               S03:00FC00DA:  13 FC 00 FF 00 FB 05 83
F00:0154       	MOVE.B	#%01000001,$4(A0)	; pulse (bit 6) and open gate (bit 0)
               S03:00FC00E2:  11 7C 00 41 00 04
F00:0155       
F00:0156       
F00:0157       mainloop
F00:0158       
F00:0159       	LEA	.main0,A0
               S03:00FC00E8:  41 FA 00 0A
F00:0160       	MOVE.L	A0,-(SP)		; put effective address of .main0 onto stack
               S03:00FC00EC:  2F 08
F00:0161       	MOVE.W	#$0100,-(SP)		; put new Status Reg onto stack
               S03:00FC00EE:  3F 3C 01 00
F00:0162       	RTE				; jump to user mode
               S03:00FC00F2:  4E 73
F00:0163       
F00:0164       
F00:0165       
F00:0166       .main0	BSR	se_clear_screen
               S03:00FC00F4:  61 78
F00:0167       	MOVE.W	#$0,cursor_pos		; reset cursor position
               S03:00FC00F6:  31 FC 00 00 04 02
F00:0168       	MOVE.B	#$14,se_crs_interval	; blinking interval at 20 (0.33s)
               S03:00FC00FC:  11 FC 00 14 04 42
F00:0169       	LEA	welcome,A0
               S03:00FC0102:  41 FA 04 7C
F00:0170       	BSR	put_string
               S03:00FC0106:  61 00 01 DE
F00:0171       	LEA	.prompt,A0
               S03:00FC010A:  41 FA 00 40
F00:0172       	BSR	put_string
               S03:00FC010E:  61 00 01 D6
F00:0173       	MOVE.B	#ASCII_LF,D0
               S03:00FC0112:  10 3C 00 0A
F00:0174       	BSR	put_char
               S03:00FC0116:  61 00 00 C8
F00:0175       
F00:0176       	BSR	se_activate_cursor
               S03:00FC011A:  61 00 03 E0
F00:0177       
F00:0178       
F00:0179       .main1	CLR.L	D0
               S03:00FC011E:  70 00
F00:0180       	MOVE.B	CIA_ASCII,D0		; scan for a keyboard event/ascii value
               S03:00FC0120:  10 39 00 FB 03 04
F00:0181       	BEQ.S	.main1			; if 0 (nothing), jump to .main1
               S03:00FC0126:  67 F6
F00:0182       
F00:0183       	BSR	se_deactivate_cursor
               S03:00FC0128:  61 00 04 04
F00:0184       
F00:0185       	CMP.B	#ASCII_LF,D0		; did we have a return as keypress?
               S03:00FC012C:  B0 3C 00 0A
F00:0186       	BNE	.main2			; no
               S03:00FC0130:  66 10
F00:0187       
F00:0188       	LEA	.mes2,A0		; yes, process command
               S03:00FC0132:  41 FA 00 1F
F00:0189       	; extract string here...
F00:0190       	BSR	put_string
               S03:00FC0136:  61 00 01 AE
F00:0191       	LEA	.prompt,A0
               S03:00FC013A:  41 FA 00 10
F00:0192       	BSR	put_string
               S03:00FC013E:  61 00 01 A6
F00:0193       
F00:0194       .main2	BSR	put_char		; process input
               S03:00FC0142:  61 00 00 9C
F00:0195       	BSR	se_activate_cursor
               S03:00FC0146:  61 00 03 B4
F00:0196       
F00:0197       	BRA.S	.main1
               S03:00FC014A:  60 D2
F00:0198       
F00:0199       .prompt	DC.B	"ready.",ASCII_NULL
               S03:00FC014C:  72 65 61 64 79 2E
               S03:00FC0152:  00
F00:0200       .mes2	DC.B	ASCII_LF,ASCII_LF,"error: illegal command",ASCII_LF,ASCII_NULL
               S03:00FC0153:  0A
               S03:00FC0154:  0A
               S03:00FC0155:  65 72 72 6F 72 3A 20 69 6C 6C 65 67 61 6C 20 63
               S03:00FC0165:  6F 6D 6D 61 6E 64
               S03:00FC016B:  0A
               S03:00FC016C:  00
F00:0201       
F00:0202       
F00:0203       	ALIGN	1
F00:0204       se_clear_screen
F00:0205       
F00:0206       	MOVEM.L	D0-D1/A0,-(SP)
               S03:00FC016E:  48 E7 C0 80
F00:0207       
F00:0208       	MOVEA.L	(VICV_TXT),A0
               S03:00FC0172:  20 79 00 FB 04 04
F00:0209       	MOVE.L	#$800,D0
               S03:00FC0178:  20 3C 00 00 08 00
F00:0210       	MOVE.B	#SCRN_SPACE,D1			; space screencode
               S03:00FC017E:  12 3C 00 20
F00:0211       	JSR	blockfill_bytes
               S03:00FC0182:  61 00 02 54
F00:0212       
F00:0213       	MOVEA.L	(VICV_COL),A0
               S03:00FC0186:  20 79 00 FB 04 08
F00:0214       	MOVE.L	#$800,D0
               S03:00FC018C:  20 3C 00 00 08 00
F00:0215       	MOVE.W	#C64_LIGHTBLUE,D1
               S03:00FC0192:  32 3C F6 7D
F00:0216       	JSR	blockfill_words
               S03:00FC0196:  61 00 02 52
F00:0217       
F00:0218       	MOVEM.L	(SP)+,D0-D1/A0
               S03:00FC019A:  4C DF 01 03
F00:0219       	RTS
               S03:00FC019E:  4E 75
F00:0220       
F00:0221       
F00:0222       se_scroll_up
F00:0223       
F00:0224       	MOVEM.L	D0/A0-A1,-(SP)
               S03:00FC01A0:  48 E7 80 C0
F00:0225       
F00:0226       	MOVE.L	#$7C0,D0
               S03:00FC01A4:  20 3C 00 00 07 C0
F00:0227       
F00:0228       	MOVEA.L	(VICV_TXT),A0
               S03:00FC01AA:  20 79 00 FB 04 04
F00:0229       	MOVEA.L	(VICV_COL),A1
               S03:00FC01B0:  22 79 00 FB 04 08
F00:0230       
F00:0231       .1	MOVE.B	$40(A0),(A0)
               S03:00FC01B6:  10 A8 00 40
F00:0232       	MOVE.W	$80(A1),(A1)
               S03:00FC01BA:  32 A9 00 80
F00:0233       	ADDA	#$1,A0
               S03:00FC01BE:  52 48
F00:0234       	ADDA	#$2,A1
               S03:00FC01C0:  54 49
F00:0235       	SUBQ	#$1,D0
               S03:00FC01C2:  53 40
F00:0236       	BNE	.1
               S03:00FC01C4:  66 F0
F00:0237       
F00:0238       .2	MOVE.B	#ASCII_SPACE,(A0)
               S03:00FC01C6:  10 BC 00 20
F00:0239       	MOVE.W	curr_text_color,(A1)
               S03:00FC01CA:  32 B8 04 00
F00:0240       	ADDA	#$1,A0
               S03:00FC01CE:  52 48
F00:0241       	ADDA	#$2,A1
               S03:00FC01D0:  54 49
F00:0242       	ADDQ	#$1,D0
               S03:00FC01D2:  52 40
F00:0243       	CMPI.W	#$40,D0
               S03:00FC01D4:  0C 40 00 40
F00:0244       	BNE	.2
               S03:00FC01D8:  66 EC
F00:0245       
F00:0246       	MOVEM.L	(SP)+,D0/A0-A1
               S03:00FC01DA:  4C DF 03 01
F00:0247       	RTS
               S03:00FC01DE:  4E 75
F00:0248       
F00:0249       ; put_char expects an ascii value in register D0
F00:0250       
F00:0251       put_char
F00:0252       
F00:0253       	MOVEM.L	D1-D3/A0-A1,-(SP)	; save registers
               S03:00FC01E0:  48 E7 70 C0
F00:0254       	ANDI.W	#$00FF,D0		; clear bits 8-15 from D0
               S03:00FC01E4:  02 40 00 FF
F00:0255       	MOVE.W	cursor_pos,D1		; load current cursor position into D1
               S03:00FC01E8:  32 38 04 02
F00:0256       	MOVE.W	curr_text_color,D2	; load current text colour into D2
               S03:00FC01EC:  34 38 04 00
F00:0257       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:00FC01F0:  20 79 00 FB 04 04
F00:0258       	MOVEA.L	VICV_COL,A1		; load pointer to current color screen into A1
               S03:00FC01F6:  22 79 00 FB 04 08
F00:0259       	CMP.B	#ASCII_LF,D0		; do we have a line feed as the next ascii?
               S03:00FC01FC:  B0 3C 00 0A
F00:0260       	BEQ	.lf
               S03:00FC0200:  67 4A
F00:0261       	CMP.B	#ASCII_CURSOR_DOWN,D0
               S03:00FC0202:  B0 3C 00 11
F00:0262       	BEQ	.down
               S03:00FC0206:  67 62
F00:0263       	CMP.B	#ASCII_CURSOR_RIGHT,D0
               S03:00FC0208:  B0 3C 00 1D
F00:0264       	BEQ	.right
               S03:00FC020C:  67 74
F00:0265       	CMP.B	#ASCII_CURSOR_UP,D0
               S03:00FC020E:  B0 3C 00 91
F00:0266       	BEQ	.up
               S03:00FC0212:  67 00 00 86
F00:0267       	CMP.B	#ASCII_CURSOR_LEFT,D0
               S03:00FC0216:  B0 3C 00 9D
F00:0268       	BEQ	.left
               S03:00FC021A:  67 00 00 8E
F00:0269       	CMP.B	#ASCII_BACKSPACE,D0
               S03:00FC021E:  B0 3C 00 08
F00:0270       	BEQ	.bs
               S03:00FC0222:  67 00 00 94
F00:0271       
F00:0272       	; it's not a control character so print it
F00:0273       .char	MOVE.B	D0,(A0,D1)		; copy the char into screen
               S03:00FC0226:  11 80 10 00
F00:0274       	MOVE.W	D1,D3			; copy cursor position into D3
               S03:00FC022A:  36 01
F00:0275       	LSL.W	#$1,D3			; multiply index by two (color values are words contrary to tiles)
               S03:00FC022C:  E3 4B
F00:0276       	MOVE.W	D2,(A1,D3)		; copy the color value
               S03:00FC022E:  33 82 30 00
F00:0277       	ADDQ	#$1,D1			; increase the cursor position by one
               S03:00FC0232:  52 41
F00:0278       
F00:0279       	MOVE.W	D1,D3
               S03:00FC0234:  36 01
F00:0280       	ANDI.W	#$F800,D3		; are we outside screen memory?
               S03:00FC0236:  02 43 F8 00
F00:0281       	BEQ	.char2			; no, go to .char2
               S03:00FC023A:  67 08
F00:0282       	JSR	se_scroll_up		; yes, scroll 1 row upwards
               S03:00FC023C:  61 00 FF 62
F00:0283       	SUBI.W	#$40,D1			; subtract 64 positions from the cursor position
               S03:00FC0240:  04 41 00 40
F00:0284       .char2	MOVE.W	D1,cursor_pos
               S03:00FC0244:  31 C1 04 02
F00:0285       	BRA	.end
               S03:00FC0248:  60 00 00 96
F00:0286       
F00:0287       .lf	ADDI.W	#$40,D1			; line feed, add 64 positions to current cursor pos
               S03:00FC024C:  06 41 00 40
F00:0288       	ANDI.W	#%1111111111000000,D1	; move cursor pos to beginning of line
               S03:00FC0250:  02 41 FF C0
F00:0289       	MOVE.W	D1,D3
               S03:00FC0254:  36 01
F00:0290       	ANDI.W	#$F800,D3		; are we outside screen memory?
               S03:00FC0256:  02 43 F8 00
F00:0291       	BEQ	.lf2			; no, go to .lf2
               S03:00FC025A:  67 08
F00:0292       	JSR	se_scroll_up		; yes, scroll 1 row upwards
               S03:00FC025C:  61 00 FF 42
F00:0293       	SUBI.W	#$40,D1			; subtract 64 positions from the cursor position
               S03:00FC0260:  04 41 00 40
F00:0294       .lf2	MOVE.W	D1,cursor_pos		; store new value
               S03:00FC0264:  31 C1 04 02
F00:0295       	BRA	.end
               S03:00FC0268:  60 76
F00:0296       
F00:0297       .down	ADDI.W	#$40,D1			; cursor down, add 64 positions to current cursor pos
               S03:00FC026A:  06 41 00 40
F00:0298       	MOVE.W	D1,D2
               S03:00FC026E:  34 01
F00:0299       	ANDI.W	#$F800,D2
               S03:00FC0270:  02 42 F8 00
F00:0300       	BEQ	.down2
               S03:00FC0274:  67 06
F00:0301       	BSR	se_scroll_up
               S03:00FC0276:  61 00 FF 28
F00:0302       	BRA	.end
               S03:00FC027A:  60 64
F00:0303       .down2	MOVE.W	D1,cursor_pos		; store new value
               S03:00FC027C:  31 C1 04 02
F00:0304       	BRA	.end
               S03:00FC0280:  60 5E
F00:0305       
F00:0306       .right	ADDI.W	#$1,D1			; cursor right
               S03:00FC0282:  52 41
F00:0307       	;ANDI.W	#$7FF,D1
F00:0308       	MOVE.W	D1,D2
               S03:00FC0284:  34 01
F00:0309       	ANDI.W	#$F800,D2
               S03:00FC0286:  02 42 F8 00
F00:0310       	BEQ	.right2
               S03:00FC028A:  67 08
F00:0311       	BSR	se_scroll_up
               S03:00FC028C:  61 00 FF 12
F00:0312       	SUBI.W	#$40,D1
               S03:00FC0290:  04 41 00 40
F00:0313       .right2	MOVE.W	D1,cursor_pos
               S03:00FC0294:  31 C1 04 02
F00:0314       	BRA	.end
               S03:00FC0298:  60 46
F00:0315       
F00:0316       .up	SUBI.W	#$40,D1			; cursor up
               S03:00FC029A:  04 41 00 40
F00:0317       	BMI	.end			; stop if cursor out of screen, don't store position
               S03:00FC029E:  6B 40
F00:0318       	ANDI.W	#$7FF,D1
               S03:00FC02A0:  02 41 07 FF
F00:0319       	MOVE.W	D1,cursor_pos
               S03:00FC02A4:  31 C1 04 02
F00:0320       	BRA	.end
               S03:00FC02A8:  60 36
F00:0321       
F00:0322       .left	SUBI.W	#$1,D1			; cursor left
               S03:00FC02AA:  53 41
F00:0323       	BMI	.end			; stop if cursor out of screen, don't store position
               S03:00FC02AC:  6B 32
F00:0324       	ANDI.W	#$7FF,D1
               S03:00FC02AE:  02 41 07 FF
F00:0325       	MOVE.W	D1,cursor_pos
               S03:00FC02B2:  31 C1 04 02
F00:0326       	BRA	.end
               S03:00FC02B6:  60 28
F00:0327       
F00:0328       .bs	SUBI.W	#$1,D1			; backspace
               S03:00FC02B8:  53 41
F00:0329       	BMI	.end			; stop if cursor out of screen, don't store position
               S03:00FC02BA:  6B 24
F00:0330       	ANDI.W	#$7FF,D1
               S03:00FC02BC:  02 41 07 FF
F00:0331       	MOVE.W	D1,cursor_pos		; store the new cursor position
               S03:00FC02C0:  31 C1 04 02
F00:0332       .bs1	MOVE.W	D1,D3
               S03:00FC02C4:  36 01
F00:0333       	ADDQ	#$1,D3
               S03:00FC02C6:  52 43
F00:0334       	ANDI.W	#%0000000000111111,D3	; are we at positon $3f?
               S03:00FC02C8:  02 43 00 3F
F00:0335       	BNE	.bs2			; not yet
               S03:00FC02CC:  66 08
F00:0336       	MOVE.B	#ASCII_SPACE,(A0,D1)	; yes, place a space character
               S03:00FC02CE:  11 BC 00 20 10 00
F00:0337       	BRA	.end
               S03:00FC02D4:  60 0A
F00:0338       .bs2	MOVE.B	$1(A0,D1),(A0,D1)
               S03:00FC02D6:  11 B0 10 01 10 00
F00:0339       	ADDQ	#$1,D1
               S03:00FC02DC:  52 41
F00:0340       	BRA	.bs1
               S03:00FC02DE:  60 E4
F00:0341       
F00:0342       .end	MOVEM.L	(SP)+,D1-D3/A0-A1	; restore registers
               S03:00FC02E0:  4C DF 03 0E
F00:0343       	RTS
               S03:00FC02E4:  4E 75
F00:0344       
F00:0345       
F00:0346       put_string
F00:0347       
F00:0348       	;
F00:0349       	; put_string expects a pointer to a string in A0
F00:0350       	;
F00:0351       
F00:0352       	MOVEM.L	A0/D0,-(SP)
               S03:00FC02E6:  48 E7 80 80
F00:0353       
F00:0354       .start	MOVE.B	(A0)+,D0	; move ascii value into D0, and move pointer to next char
               S03:00FC02EA:  10 18
F00:0355       	BEQ	.end
               S03:00FC02EC:  67 06
F00:0356       	BSR	put_char	; no, put char
               S03:00FC02EE:  61 00 FE F0
F00:0357       	BRA	.start
               S03:00FC02F2:  60 F6
F00:0358       
F00:0359       .end	MOVEM.L	(SP)+,A0/D0
               S03:00FC02F4:  4C DF 01 01
F00:0360       	RTS
               S03:00FC02F8:  4E 75
F00:0361       
F00:0362       
F00:0363       ; fake exception handler
F00:0364       
F00:0365       exception_handler
F00:0366       
F00:0367       	MOVE.L	D0,-(SP)
               S03:00FC02FA:  2F 00
F00:0368       	MOVE.L	#$DEADBEEF,D0
               S03:00FC02FC:  20 3C DE AD BE EF
F00:0369       	MOVE.L	(SP)+,D0
               S03:00FC0302:  20 1F
F00:0370       	RTE
               S03:00FC0304:  4E 73
F00:0371       
F00:0372       
F00:0373       ; level 2 interrupt autovector (vicv start of vblank)
F00:0374       
F00:0375       interrupt_2_autovector
F00:0376       
F00:0377       	MOVE.B	#%00000001,VICV_ISR				; acknowledge VBLANK interrupt
               S03:00FC0306:  13 FC 00 01 00 FB 04 0E
F00:0378       
F00:0379       	MOVE.B	#%00000001,VICV_BUFFERSWAP			; switch front- and backbuffer
               S03:00FC030E:  13 FC 00 01 00 FB 04 10
F00:0380       
F00:0381       	MOVE.B	#%00000001,BLITTER_CONTROL			; clear the backbuffer
               S03:00FC0316:  13 FC 00 01 00 FB 07 00
F00:0382       
F00:0383       	; add the blits (to be replaced by a kernel linked list)
F00:0384       	MOVE.L	#kernel_text_scr,BLITTER_DATA_32_BIT
               S03:00FC031E:  23 FC 00 00 04 20 00 FB 07 02
F00:0385       	MOVE.B	#%00000010,BLITTER_CONTROL
               S03:00FC0328:  13 FC 00 02 00 FB 07 00
F00:0386       
F00:0387       	RTE
               S03:00FC0330:  4E 73
F00:0388       
F00:0389       
F00:0390       ; level 4 interrupt autovector (timer)
F00:0391       
F00:0392       interrupt_4_autovector
F00:0393       
F00:0394       	MOVE.L	A0,-(SP)		; save a0
               S03:00FC0332:  2F 08
F00:0395       timer0_check
F00:0396       	BTST	#0,TIMER_BASE		; did timer 0 cause the interrupt?
               S03:00FC0334:  08 39 00 00 00 FB 06 00
F00:0397       	BEQ	timer1_check		; no, go to next timer
               S03:00FC033C:  67 0E
F00:0398       	MOVE.B	#%00000001,TIMER_BASE	; yes, acknowledge interrupt
               S03:00FC033E:  13 FC 00 01 00 FB 06 00
F00:0399       	MOVEA.L	timer0_vector,A0
               S03:00FC0346:  20 78 04 08
F00:0400       	JMP	(A0)
               S03:00FC034A:  4E D0
F00:0401       timer1_check
F00:0402       	BTST	#1,TIMER_BASE
               S03:00FC034C:  08 39 00 01 00 FB 06 00
F00:0403       	BEQ	timer2_check
               S03:00FC0354:  67 0E
F00:0404       	MOVE.B	#%00000010,TIMER_BASE
               S03:00FC0356:  13 FC 00 02 00 FB 06 00
F00:0405       	MOVEA.L	timer1_vector,A0
               S03:00FC035E:  20 78 04 0C
F00:0406       	JMP	(A0)
               S03:00FC0362:  4E D0
F00:0407       timer2_check
F00:0408       	BTST	#2,TIMER_BASE		; did timer 2 cause the interrupt?
               S03:00FC0364:  08 39 00 02 00 FB 06 00
F00:0409       	BEQ	timer3_check		; no, go to next timer
               S03:00FC036C:  67 0E
F00:0410       	MOVE.B	#%00000100,TIMER_BASE	; yes, acknowledge interrupt
               S03:00FC036E:  13 FC 00 04 00 FB 06 00
F00:0411       	MOVEA.L	timer2_vector,A0
               S03:00FC0376:  20 78 04 10
F00:0412       	JMP	(A0)
               S03:00FC037A:  4E D0
F00:0413       timer3_check
F00:0414       	BTST	#3,TIMER_BASE
               S03:00FC037C:  08 39 00 03 00 FB 06 00
F00:0415       	BEQ	timer_finish		; no, go to timer finish
               S03:00FC0384:  67 0E
F00:0416       	MOVE.B	#%00001000,TIMER_BASE	; yes, acknowledge
               S03:00FC0386:  13 FC 00 08 00 FB 06 00
F00:0417       	MOVEA.L	timer3_vector,A0
               S03:00FC038E:  20 78 04 14
F00:0418       	JMP	(A0)
               S03:00FC0392:  4E D0
F00:0419       timer_finish
F00:0420       	MOVE.L	(SP)+,A0		; restore a0
               S03:00FC0394:  20 5F
F00:0421       	RTE
               S03:00FC0396:  4E 73
F00:0422       
F00:0423       
F00:0424       ; level 5 interrupt autovector
F00:0425       
F00:0426       interrupt_5_autovector
F00:0427       
F00:0428       	MOVE.L	A0,-(SP)
               S03:00FC0398:  2F 08
F00:0429       	MOVE.L	(SP)+,A0
               S03:00FC039A:  20 5F
F00:0430       	RTE
               S03:00FC039C:  4E 73
F00:0431       
F00:0432       
F00:0433       ; level 6 interrupt autovector
F00:0434       
F00:0435       interrupt_6_autovector
F00:0436       
F00:0437       	RTE
               S03:00FC039E:  4E 73
F00:0438       
F00:0439       
F00:0440       ; level 7 interrupt autovector
F00:0441       
F00:0442       interrupt_7_autovector
F00:0443       
F00:0444       	RTE
               S03:00FC03A0:  4E 73
F00:0445       
F00:0446       
F00:0447       timer0_handler
F00:0448       
F00:0449       	; cursor flash
F00:0450       	MOVEM.L	D0/A0,-(SP)
               S03:00FC03A2:  48 E7 80 80
F00:0451       
F00:0452       	BTST.B	#$0,se_crs_blink
               S03:00FC03A6:  08 38 00 00 04 40
F00:0453       	BEQ	.end
               S03:00FC03AC:  67 1C
F00:0454       
F00:0455       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:00FC03AE:  20 79 00 FB 04 04
F00:0456       	MOVE.W	cursor_pos,D0
               S03:00FC03B4:  30 38 04 02
F00:0457       	SUBQ.B	#$1,se_crs_cntdwn
               S03:00FC03B8:  53 38 04 41
F00:0458       	BNE	.end
               S03:00FC03BC:  66 0C
F00:0459       	EORI.B	#%10000000,(A0,D0)
               S03:00FC03BE:  0A 30 00 80 00 00
F00:0460       	MOVE.B	se_crs_interval,se_crs_cntdwn
               S03:00FC03C4:  11 F8 04 42 04 41
F00:0461       
F00:0462       .end	MOVEM.L	(SP)+,D0/A0
               S03:00FC03CA:  4C DF 01 01
F00:0463       	BRA	timer1_check
               S03:00FC03CE:  60 00 FF 7C
F00:0464       
F00:0465       
F00:0466       timer1_handler
F00:0467       
F00:0468       	;
F00:0469       	BRA	timer2_check
               S03:00FC03D2:  60 90
F00:0470       
F00:0471       
F00:0472       timer2_handler
F00:0473       
F00:0474       	;
F00:0475       	BRA	timer3_check
               S03:00FC03D4:  60 A6
F00:0476       
F00:0477       
F00:0478       timer3_handler
F00:0479       
F00:0480       	;
F00:0481       	BRA	timer_finish
               S03:00FC03D6:  60 BC
F00:0482       
F00:0483       
F00:0484       blockfill_bytes
F00:0485       
F00:0486       	;
F00:0487       	;	Arguments
F00:0488       	;
F00:0489       	;	A0	start address
F00:0490       	;	D0	number of bytes
F00:0491       	;	D1	byte value
F00:0492       	;
F00:0493       
F00:0494       	MOVE.L	D2,-(SP)	; save D2
               S03:00FC03D8:  2F 02
F00:0495       
F00:0496       	MOVEQ	#$0,D2
               S03:00FC03DA:  74 00
F00:0497       
F00:0498       .1	MOVE.B	D1,(A0,D2.L)
               S03:00FC03DC:  11 81 28 00
F00:0499       	ADDQ	#$1,D2
               S03:00FC03E0:  52 42
F00:0500       	CMP.L	D2,D0
               S03:00FC03E2:  B0 82
F00:0501       	BNE	.1
               S03:00FC03E4:  66 F6
F00:0502       
F00:0503       	MOVE.L	(SP)+,D2
               S03:00FC03E6:  24 1F
F00:0504       	RTS
               S03:00FC03E8:  4E 75
F00:0505       
F00:0506       blockfill_words
F00:0507       
F00:0508       	;
F00:0509       	;	Arguments
F00:0510       	;
F00:0511       	;	A0	start address
F00:0512       	;	D0	number of words
F00:0513       	;	D1	word value
F00:0514       	;
F00:0515       
F00:0516       	MOVEM.L	D0/D2,-(SP)
               S03:00FC03EA:  48 E7 A0 00
F00:0517       
F00:0518       	MOVEQ	#$0,D2
               S03:00FC03EE:  74 00
F00:0519       	LSL.L	#$1,D0
               S03:00FC03F0:  E3 88
F00:0520       
F00:0521       .1	MOVE.W	D1,(A0,D2.L)
               S03:00FC03F2:  31 81 28 00
F00:0522       	ADDQ.L	#$2,D2
               S03:00FC03F6:  54 82
F00:0523       	CMP.L	D2,D0
               S03:00FC03F8:  B0 82
F00:0524       	BNE	.1
               S03:00FC03FA:  66 F6
F00:0525       
F00:0526       	MOVEM.L	(SP)+,D0/D2
               S03:00FC03FC:  4C DF 00 05
F00:0527       	RTS
               S03:00FC0400:  4E 75
F00:0528       
F00:0529       memcopy
F00:0530       
F00:0531       	;
F00:0532       	;	bytewise memory copy - probably slow?
F00:0533       	;
F00:0534       	;	Arguments
F00:0535       	;
F00:0536       	;	A0	source_start_address
F00:0537       	;	D0	no_of_bytes
F00:0538       	;	A1	destination_start_address
F00:0539       	;
F00:0540       
F00:0541       	MOVE.L	D1,-(SP)
               S03:00FC0402:  2F 01
F00:0542       	MOVEQ	#$0,D1
               S03:00FC0404:  72 00
F00:0543       .1	MOVE.B	(A0,D1.L),(A1,D1.L)
               S03:00FC0406:  13 B0 18 00 18 00
F00:0544       	ADDQ.L	#$1,D1
               S03:00FC040C:  52 81
F00:0545       	CMP.L	D1,D0
               S03:00FC040E:  B0 81
F00:0546       	BNE	.1
               S03:00FC0410:  66 F4
F00:0547       
F00:0548       	MOVE.L	(SP)+,D1
               S03:00FC0412:  22 1F
F00:0549       	RTS
               S03:00FC0414:  4E 75
F00:0550       
F00:0551       
F00:0552       copy_charrom_to_charram
F00:0553       
F00:0554       	; Copy char rom to ram (go from 2k to 32k)
F00:0555       	; Note: this is a very special copy routine
F00:0556       	; that expands a charset from 1 bit into 16 bit
F00:0557       	; format.
F00:0558       	;
F00:0559       	;	Register Usage
F00:0560       	;
F00:0561       	;	D0	current_byte, holds a byte from the original rom charset
F00:0562       	;	D1	i, counter from 7 to 0 (8 bits per byte have to be processed)
F00:0563       	;	A0	*char_ram, pointer
F00:0564       	;	A1	*char_rom, pointer
F00:0565       	;
F00:0566       	MOVEM.L	D0-D1/A0-A1,-(SP)
               S03:00FC0416:  48 E7 C0 C0
F00:0567       
F00:0568       	MOVEQ	#0,D0			;    current_byte = 0;
               S03:00FC041A:  70 00
F00:0569       	LEA	CHAR_RAM,A0		;    char_ram = CHAR_RAM;
               S03:00FC041C:  41 F9 00 F1 00 00
F00:0570       	LEA	CHAR_ROM,A1		;    char_rom = CHAR_ROM;
               S03:00FC0422:  43 F9 00 FB 80 00
F00:0571       
F00:0572       .1	CMPA.L	#CHAR_ROM+$800,A1	;    while(char_ram != CHAR_ROM+$800)
               S03:00FC0428:  B3 FC 00 FB 88 00
F00:0573       	BEQ	.5			;    {   //	branch to end of compound statement
               S03:00FC042E:  67 1C
F00:0574       					;        // load a byte from charset and incr pntr
F00:0575       	MOVE.B	(A1)+,D0		;        current_byte = char_rom++;
               S03:00FC0430:  10 19
F00:0576       	MOVEQ	#8,D1			;        i = 8;
               S03:00FC0432:  72 08
F00:0577       .2	BTST	#$7,D0
               S03:00FC0434:  08 00 00 07
F00:0578       	BEQ	.3			;    bit 7 not set
               S03:00FC0438:  67 06
F00:0579       	MOVE.W	#C64_GREY,(A0)+		;    bit 7 is set, so set color
               S03:00FC043A:  30 FC F7 77
F00:0580       	BRA	.4
               S03:00FC043E:  60 04
F00:0581       .3	MOVE.W	#$0000,(A0)+		;    bit 7 not set, make empty
               S03:00FC0440:  30 FC 00 00
F00:0582       .4	LSL.B	#$01,D0			;    move all the bits one place to the left
               S03:00FC0444:  E3 08
F00:0583       	SUBQ	#$01,D1			;    i = i - 1;
               S03:00FC0446:  53 41
F00:0584       	BEQ	.1			;    did i reach zero? goto .1
               S03:00FC0448:  67 DE
F00:0585       	BRA	.2
               S03:00FC044A:  60 E8
F00:0586       					;    }
F00:0587       .5	MOVEM.L	(SP)+,D0-D1/A0-A1
               S03:00FC044C:  4C DF 03 03
F00:0588       	RTS
               S03:00FC0450:  4E 75
F00:0589       
F00:0590       
F00:0591       setup_vector_table
F00:0592       
F00:0593       	LEA	exception_handler,A0
               S03:00FC0452:  41 FA FE A6
F00:0594       	MOVE.L	A0,vec_04_illegal_instruction
               S03:00FC0456:  21 C8 00 10
F00:0595       	MOVE.L	A0,vec_10_unimpl_instruction
               S03:00FC045A:  21 C8 00 28
F00:0596       	MOVE.L	A0,vec_11_unimpl_instruction
               S03:00FC045E:  21 C8 00 2C
F00:0597       
F00:0598       	LEA	interrupt_2_autovector,A0
               S03:00FC0462:  41 FA FE A2
F00:0599       	MOVE.L	A0,vec_26_level2_irq_autovect
               S03:00FC0466:  21 C8 00 68
F00:0600       
F00:0601       	LEA	interrupt_4_autovector,A0
               S03:00FC046A:  41 FA FE C6
F00:0602       	MOVE.L	A0,vec_28_level4_irq_autovect
               S03:00FC046E:  21 C8 00 70
F00:0603       
F00:0604       	LEA	interrupt_5_autovector,A0
               S03:00FC0472:  41 FA FF 24
F00:0605       	MOVE.L	A0,vec_29_level5_irq_autovect
               S03:00FC0476:  21 C8 00 74
F00:0606       
F00:0607       	LEA	interrupt_6_autovector,A0
               S03:00FC047A:  41 FA FF 22
F00:0608       	MOVE.L	A0,vec_30_level6_irq_autovect
               S03:00FC047E:  21 C8 00 78
F00:0609       
F00:0610       	LEA	interrupt_7_autovector,A0
               S03:00FC0482:  41 FA FF 1C
F00:0611       	MOVE.L	A0,vec_31_level7_irq_autovect
               S03:00FC0486:  21 C8 00 7C
F00:0612       
F00:0613       	LEA	timer0_handler,A0
               S03:00FC048A:  41 FA FF 16
F00:0614       	MOVE.L	A0,timer0_vector
               S03:00FC048E:  21 C8 04 08
F00:0615       
F00:0616       	LEA	timer1_handler,A0
               S03:00FC0492:  41 FA FF 3E
F00:0617       	MOVE.L	A0,timer1_vector
               S03:00FC0496:  21 C8 04 0C
F00:0618       
F00:0619       	LEA	timer2_handler,A0
               S03:00FC049A:  41 FA FF 38
F00:0620       	MOVE.L	A0,timer2_vector
               S03:00FC049E:  21 C8 04 10
F00:0621       
F00:0622       	LEA	timer3_handler,A0
               S03:00FC04A2:  41 FA FF 32
F00:0623       	MOVE.L	A0,timer3_vector
               S03:00FC04A6:  21 C8 04 14
F00:0624       
F00:0625       	RTS
               S03:00FC04AA:  4E 75
F00:0626       
F00:0627       
F00:0628       reset_sids
F00:0629       
F00:0630       	MOVEM.L	D0-D1/A0,-(SP)
               S03:00FC04AC:  48 E7 C0 80
F00:0631       
F00:0632       	LEA	SOUND_BASE,A0
               S03:00FC04B0:  41 F9 00 FB 05 00
F00:0633       	MOVE.L	#$100,D0
               S03:00FC04B6:  20 3C 00 00 01 00
F00:0634       	MOVE.B	#$00,D1
               S03:00FC04BC:  12 3C 00 00
F00:0635       	JSR	blockfill_bytes
               S03:00FC04C0:  61 00 FF 16
F00:0636       
F00:0637       	; max volume for both sids
F00:0638       	MOVE.B	#$0F,SID0_VOLUME
               S03:00FC04C4:  13 FC 00 0F 00 FB 05 18
F00:0639       	MOVE.B	#$0F,SID1_VOLUME
               S03:00FC04CC:  13 FC 00 0F 00 FB 05 38
F00:0640       
F00:0641       	LEA	SOUND_BASE,A0
               S03:00FC04D4:  41 F9 00 FB 05 00
F00:0642       	MOVE.B	#$FF,D0
               S03:00FC04DA:  10 3C 00 FF
F00:0643       	MOVE.B	D0,SID0_LEFT		; left channel mix
               S03:00FC04DE:  13 C0 00 FB 05 80
F00:0644       	MOVE.B	D0,SID0_RGHT		; right channel mix
               S03:00FC04E4:  13 C0 00 FB 05 81
F00:0645       	MOVE.B	D0,SID1_LEFT		; left channel mix
               S03:00FC04EA:  13 C0 00 FB 05 82
F00:0646       	MOVE.B	D0,SID1_RGHT		; right channel mix
               S03:00FC04F0:  13 C0 00 FB 05 83
F00:0647       
F00:0648       	MOVEM.L	(SP)+,D0-D1/A0
               S03:00FC04F6:  4C DF 01 03
F00:0649       
F00:0650       	RTS
               S03:00FC04FA:  4E 75
F00:0651       
F00:0652       
F00:0653       se_activate_cursor
F00:0654       	MOVEM.L	D0/A0-A1,-(SP)
               S03:00FC04FC:  48 E7 80 C0
F00:0655       
F00:0656       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:00FC0500:  20 79 00 FB 04 04
F00:0657       	MOVEA.L	VICV_COL,A1
               S03:00FC0506:  22 79 00 FB 04 08
F00:0658       	MOVE.W	cursor_pos,D0
               S03:00FC050C:  30 38 04 02
F00:0659       	MOVE.B	(A0,D0),se_orig_char
               S03:00FC0510:  11 F0 00 00 04 43
F00:0660       	EORI.B	#%10000000,(A0,D0)
               S03:00FC0516:  0A 30 00 80 00 00
F00:0661       	MOVE.B	se_crs_interval,se_crs_cntdwn
               S03:00FC051C:  11 F8 04 42 04 41
F00:0662       	MOVE.B	#$1,se_crs_blink	; turn on cursor flash
               S03:00FC0522:  11 FC 00 01 04 40
F00:0663       
F00:0664       	MOVEM.L	(SP)+,D0/A0-A1
               S03:00FC0528:  4C DF 03 01
F00:0665       	RTS
               S03:00FC052C:  4E 75
F00:0666       
F00:0667       se_deactivate_cursor
F00:0668       	MOVEM.L	D0/A0-A1,-(SP)
               S03:00FC052E:  48 E7 80 C0
F00:0669       
F00:0670       	MOVE.B	#$0,se_crs_blink	; turn off cursor flash
               S03:00FC0532:  11 FC 00 00 04 40
F00:0671       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:00FC0538:  20 79 00 FB 04 04
F00:0672       	MOVEA.L	VICV_COL,A1
               S03:00FC053E:  22 79 00 FB 04 08
F00:0673       	MOVE.W	cursor_pos,D0
               S03:00FC0544:  30 38 04 02
F00:0674       	MOVE.B	se_orig_char,(A0,D0)
               S03:00FC0548:  11 B8 04 43 00 00
F00:0675       
F00:0676       	MOVEM.L	(SP)+,D0/A0-A1
               S03:00FC054E:  4C DF 03 01
F00:0677       	RTS
               S03:00FC0552:  4E 75
F00:0678       
F00:0679       ; kernel text screen blit desciption (rom description, copied to kernel ram area, also 32 byte aligned)
F00:0680       
F00:0681       	ALIGN	5
F00:0682       screen_blit_structure
F00:0683       	DC.B	%00001000	; flags 0 - tile mode, simple color, color per tile
               S03:00FC0560:  08
F00:0684       	DC.B	%00000000	; flags 1 - no stretching, mirroring etc
               S03:00FC0561:  00
F00:0685       	DC.B	%01010110	; height 2^%101 = 32 chars = 256 pixels, width 2^%110 = 64 chars  = 512 pixels
               S03:00FC0562:  56
F00:0686       	DC.B	%00000000	; currently unused.... :-)
               S03:00FC0563:  00
F00:0687       	DC.W	$0		; x (0)
               S03:00FC0564:  00 00
F00:0688       	DC.W	$10		; y (16)
               S03:00FC0566:  00 10
F00:0689       	DC.W	$F0A0		; foreground color
               S03:00FC0568:  F0 A0
F00:0690       	DC.W	$F222		; background color
               S03:00FC056A:  F2 22
F00:0691       	DC.L	CHAR_RAM	; pixel_data
               S03:00FC056C:  00 F1 00 00
F00:0692       	DC.L	$F00000		; character_data
               S03:00FC0570:  00 F0 00 00
F00:0693       	DC.L	$F00800		; character_color_data
               S03:00FC0574:  00 F0 08 00
F00:0694       	DC.L	$FF0000		; background_color_data
               S03:00FC0578:  00 FF 00 00
F00:0695       	DC.L	$0		; user_data
               S03:00FC057C:  00 00 00 00
F00:0696       
F00:0697       
F00:0698       ; string data
F00:0699       
F00:0700       welcome
F00:0701       	DC.B	"E64-II (C)2019-2020 kernel 0.2.20201009",ASCII_LF,ASCII_LF,ASCII_NULL
               S03:00FC0580:  45 36 34 2D 49 49 20 28 43 29 32 30 31 39 2D 32
               S03:00FC0590:  30 32 30 20 6B 65 72 6E 65 6C 20 30 2E 32 2E 32
               S03:00FC05A0:  0A
               S03:00FC05A1:  0A
               S03:00FC05A2:  00
F00:0702       
F00:0703       	ALIGN	1
F00:0704       
F00:0705       	INCLUDE	"kernel_tables.s"
F02:0001       ; rom tables
F02:0002       
F02:0003       hex_table
F02:0004       	dc.b	'0123456789abcdef'
               S03:00FC05AA:  30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66
F02:0005       
F02:0006       ;	The following table is based on a SID clock frequency of 985248Hz (PAL)
F02:0007       ;	Calculations were made according to Codebase64 article
F02:0008       ;	https://codebase64.org/doku.php?id=base:how_to_calculate_your_own_sid_frequency_table
F02:0009       ;
F02:0010       	ALIGN	1
F02:0011       notes
F02:0012       	DC.W	$0116,$0127,$0139,$014B,$015F,$0174,$018A,$01A1,$01BA,$01D4,$01F0,$020E	; N_C0_ to N_B0_
               S03:00FC05BA:  01 16
               S03:00FC05BC:  01 27
               S03:00FC05BE:  01 39
               S03:00FC05C0:  01 4B
               S03:00FC05C2:  01 5F
               S03:00FC05C4:  01 74
               S03:00FC05C6:  01 8A
               S03:00FC05C8:  01 A1
               S03:00FC05CA:  01 BA
               S03:00FC05CC:  01 D4
               S03:00FC05CE:  01 F0
               S03:00FC05D0:  02 0E
F02:0013       	DC.W	$022D,$024E,$0271,$0296,$02BE,$02E7,$0314,$0342,$0374,$03A9,$03E0,$041B	; N_C1_ to N_B1_
               S03:00FC05D2:  02 2D
               S03:00FC05D4:  02 4E
               S03:00FC05D6:  02 71
               S03:00FC05D8:  02 96
               S03:00FC05DA:  02 BE
               S03:00FC05DC:  02 E7
               S03:00FC05DE:  03 14
               S03:00FC05E0:  03 42
               S03:00FC05E2:  03 74
               S03:00FC05E4:  03 A9
               S03:00FC05E6:  03 E0
               S03:00FC05E8:  04 1B
F02:0014       	DC.W	$045A,$049C,$04E2,$052D,$057B,$05CF,$0627,$0685,$06E8,$0751,$07C1,$0837	; N_C2_ to N_B2_
               S03:00FC05EA:  04 5A
               S03:00FC05EC:  04 9C
               S03:00FC05EE:  04 E2
               S03:00FC05F0:  05 2D
               S03:00FC05F2:  05 7B
               S03:00FC05F4:  05 CF
               S03:00FC05F6:  06 27
               S03:00FC05F8:  06 85
               S03:00FC05FA:  06 E8
               S03:00FC05FC:  07 51
               S03:00FC05FE:  07 C1
               S03:00FC0600:  08 37
F02:0015       	DC.W	$08B4,$0938,$09C4,$0A59,$0AF7,$0B9D,$0C4E,$0D0A,$0DD0,$0EA2,$0F81,$106D	; N_C3_ to N_B3_
               S03:00FC0602:  08 B4
               S03:00FC0604:  09 38
               S03:00FC0606:  09 C4
               S03:00FC0608:  0A 59
               S03:00FC060A:  0A F7
               S03:00FC060C:  0B 9D
               S03:00FC060E:  0C 4E
               S03:00FC0610:  0D 0A
               S03:00FC0612:  0D D0
               S03:00FC0614:  0E A2
               S03:00FC0616:  0F 81
               S03:00FC0618:  10 6D
F02:0016       	DC.W	$1167,$1270,$1389,$14B2,$15ED,$173B,$189C,$1A13,$1BA0,$1D45,$1F02,$20DA	; N_C4_ to N_B4_
               S03:00FC061A:  11 67
               S03:00FC061C:  12 70
               S03:00FC061E:  13 89
               S03:00FC0620:  14 B2
               S03:00FC0622:  15 ED
               S03:00FC0624:  17 3B
               S03:00FC0626:  18 9C
               S03:00FC0628:  1A 13
               S03:00FC062A:  1B A0
               S03:00FC062C:  1D 45
               S03:00FC062E:  1F 02
               S03:00FC0630:  20 DA
F02:0017       	DC.W	$22CE,$24E0,$2711,$2964,$2BDA,$2E76,$3139,$3426,$3740,$3A89,$3E04,$41B4	; N_C5_ to N_B5_
               S03:00FC0632:  22 CE
               S03:00FC0634:  24 E0
               S03:00FC0636:  27 11
               S03:00FC0638:  29 64
               S03:00FC063A:  2B DA
               S03:00FC063C:  2E 76
               S03:00FC063E:  31 39
               S03:00FC0640:  34 26
               S03:00FC0642:  37 40
               S03:00FC0644:  3A 89
               S03:00FC0646:  3E 04
               S03:00FC0648:  41 B4
F02:0018       	DC.W	$459C,$49C0,$4E23,$52C8,$57B4,$5CEB,$6272,$684C,$6E80,$7512,$7C08,$8368	; N_C6_ to N_B6_
               S03:00FC064A:  45 9C
               S03:00FC064C:  49 C0
               S03:00FC064E:  4E 23
               S03:00FC0650:  52 C8
               S03:00FC0652:  57 B4
               S03:00FC0654:  5C EB
               S03:00FC0656:  62 72
               S03:00FC0658:  68 4C
               S03:00FC065A:  6E 80
               S03:00FC065C:  75 12
               S03:00FC065E:  7C 08
               S03:00FC0660:  83 68
F02:0019       	DC.W	$8B39,$9380,$9C45,$A590,$AF68,$B9D6,$C4E3,$D099,$DD00,$EA24,$F810	; N_C7_	to N_A7S
               S03:00FC0662:  8B 39
               S03:00FC0664:  93 80
               S03:00FC0666:  9C 45
               S03:00FC0668:  A5 90
               S03:00FC066A:  AF 68
               S03:00FC066C:  B9 D6
               S03:00FC066E:  C4 E3
               S03:00FC0670:  D0 99
               S03:00FC0672:  DD 00
               S03:00FC0674:  EA 24
               S03:00FC0676:  F8 10
F02:0020       
F02:0021       ;notes_old
F02:0022       ;	dc.w	$0112,$0123,$0134,$0146,$015a,$016e,$0184,$018b,$01b3,$01cd,$01e9,$0206	; N_C0_ to N_B0_
F02:0023       ;	dc.w	$0225,$0245,$0268,$028c,$02b3,$02dc,$0308,$0336,$0367,$039b,$03d2,$040c	; N_C1_ to N_B1_
F02:0024       ;	dc.w	$0449,$048b,$04d0,$0519,$0567,$05b9,$0610,$066c,$06ce,$0735,$07a3,$0817	; N_C2_ to N_B2_
F02:0025       ;	dc.w	$0893,$0915,$099f,$0a32,$0acd,$0b72,$0c20,$0cd8,$0d9c,$0e6b,$0f46,$102f	; N_C3_ to N_B3_
F02:0026       ;	dc.w	$1125,$122a,$133f,$1464,$159a,$16e3,$183f,$1981,$1b38,$1cd6,$1e80,$205e	; N_C4_ to N_B4_
F02:0027       ;	dc.w	$224b,$2455,$267e,$28c8,$2b34,$2dc6,$307f,$3361,$366f,$39ac,$3d1a,$40bc	; N_C5_ to N_B5_
F02:0028       ;	dc.w	$4495,$48a9,$4cfc,$518f,$5669,$5b8c,$60fe,$6602,$6cdf,$7358,$7a34,$8178	; N_C6_ to N_B6_
F02:0029       ;	dc.w	$892b,$9153,$99f7,$a31f,$acd2,$b719,$c1fc,$cd85,$d9bd,$e6b0,$f467	; N_C7_	to N_A7S
F02:0030       
F02:0031       
F02:0032       	ALIGN	1
F02:0033       color_table
F02:0034       	DC.W	C64_BLACK
               S03:00FC0678:  F0 00
F02:0035       	DC.W	C64_WHITE
               S03:00FC067A:  FF FF
F02:0036       	DC.W	C64_RED
               S03:00FC067C:  F7 33
F02:0037       	DC.W	C64_CYAN
               S03:00FC067E:  F8 CC
F02:0038       	DC.W	C64_PURPLE
               S03:00FC0680:  F8 49
F02:0039       	DC.W	C64_GREEN
               S03:00FC0682:  F6 A5
F02:0040       	DC.W	C64_BLUE
               S03:00FC0684:  F3 39
F02:0041       	DC.W	C64_YELLOW
               S03:00FC0686:  FE E8
F02:0042       	DC.W	C64_ORANGE
               S03:00FC0688:  F8 53
F02:0043       	DC.W	C64_BROWN
               S03:00FC068A:  F5 31
F02:0044       	DC.W	C64_LIGHTRED
               S03:00FC068C:  FB 77
F02:0045       	DC.W	C64_DARKGREY
               S03:00FC068E:  F4 44
F02:0046       	DC.W	C64_GREY
               S03:00FC0690:  F7 77
F02:0047       	DC.W	C64_LIGHTGREEN
               S03:00FC0692:  FB FA
F02:0048       	DC.W	C64_LIGHTBLUE
               S03:00FC0694:  F6 7D
F02:0049       	DC.W	C64_LIGHTGREY
               S03:00FC0696:  FA AA
F02:0050       
F02:0051       
F02:0052       	ALIGN	1
F02:0053       test_table
F02:0054       	DC.B	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
               S03:00FC0698:  00
               S03:00FC0699:  01
               S03:00FC069A:  02
               S03:00FC069B:  03
               S03:00FC069C:  04
               S03:00FC069D:  05
               S03:00FC069E:  06
               S03:00FC069F:  07
               S03:00FC06A0:  08
               S03:00FC06A1:  09
               S03:00FC06A2:  0A
               S03:00FC06A3:  0B
               S03:00FC06A4:  0C
               S03:00FC06A5:  0D
               S03:00FC06A6:  0E
               S03:00FC06A7:  0F
F02:0055       	DC.B	$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
               S03:00FC06A8:  10
               S03:00FC06A9:  11
               S03:00FC06AA:  12
               S03:00FC06AB:  13
               S03:00FC06AC:  14
               S03:00FC06AD:  15
               S03:00FC06AE:  16
               S03:00FC06AF:  17
               S03:00FC06B0:  18
               S03:00FC06B1:  19
               S03:00FC06B2:  1A
               S03:00FC06B3:  1B
               S03:00FC06B4:  1C
               S03:00FC06B5:  1D
               S03:00FC06B6:  1E
               S03:00FC06B7:  1F
F02:0056       	DC.B	$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
               S03:00FC06B8:  20
               S03:00FC06B9:  21
               S03:00FC06BA:  22
               S03:00FC06BB:  23
               S03:00FC06BC:  24
               S03:00FC06BD:  25
               S03:00FC06BE:  26
               S03:00FC06BF:  27
               S03:00FC06C0:  28
               S03:00FC06C1:  29
               S03:00FC06C2:  2A
               S03:00FC06C3:  2B
               S03:00FC06C4:  2C
               S03:00FC06C5:  2D
               S03:00FC06C6:  2E
               S03:00FC06C7:  2F
F02:0057       	DC.B	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
               S03:00FC06C8:  30
               S03:00FC06C9:  31
               S03:00FC06CA:  32
               S03:00FC06CB:  33
               S03:00FC06CC:  34
               S03:00FC06CD:  35
               S03:00FC06CE:  36
               S03:00FC06CF:  37
               S03:00FC06D0:  38
               S03:00FC06D1:  39
               S03:00FC06D2:  3A
               S03:00FC06D3:  3B
               S03:00FC06D4:  3C
               S03:00FC06D5:  3D
               S03:00FC06D6:  3E
               S03:00FC06D7:  3F
F02:0058       	DC.B	$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
               S03:00FC06D8:  40
               S03:00FC06D9:  41
               S03:00FC06DA:  42
               S03:00FC06DB:  43
               S03:00FC06DC:  44
               S03:00FC06DD:  45
               S03:00FC06DE:  46
               S03:00FC06DF:  47
               S03:00FC06E0:  48
               S03:00FC06E1:  49
               S03:00FC06E2:  4A
               S03:00FC06E3:  4B
               S03:00FC06E4:  4C
               S03:00FC06E5:  4D
               S03:00FC06E6:  4E
               S03:00FC06E7:  4F
F02:0059       	DC.B	$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
               S03:00FC06E8:  50
               S03:00FC06E9:  51
               S03:00FC06EA:  52
               S03:00FC06EB:  53
               S03:00FC06EC:  54
               S03:00FC06ED:  55
               S03:00FC06EE:  56
               S03:00FC06EF:  57
               S03:00FC06F0:  58
               S03:00FC06F1:  59
               S03:00FC06F2:  5A
               S03:00FC06F3:  5B
               S03:00FC06F4:  5C
               S03:00FC06F5:  5D
               S03:00FC06F6:  5E
               S03:00FC06F7:  5F
F02:0060       	DC.B	$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
               S03:00FC06F8:  60
               S03:00FC06F9:  61
               S03:00FC06FA:  62
               S03:00FC06FB:  63
               S03:00FC06FC:  64
               S03:00FC06FD:  65
               S03:00FC06FE:  66
               S03:00FC06FF:  67
               S03:00FC0700:  68
               S03:00FC0701:  69
               S03:00FC0702:  6A
               S03:00FC0703:  6B
               S03:00FC0704:  6C
               S03:00FC0705:  6D
               S03:00FC0706:  6E
               S03:00FC0707:  6F
F02:0061       	DC.B	$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
               S03:00FC0708:  70
               S03:00FC0709:  71
               S03:00FC070A:  72
               S03:00FC070B:  73
               S03:00FC070C:  74
               S03:00FC070D:  75
               S03:00FC070E:  76
               S03:00FC070F:  77
               S03:00FC0710:  78
               S03:00FC0711:  79
               S03:00FC0712:  7A
               S03:00FC0713:  7B
               S03:00FC0714:  7C
               S03:00FC0715:  7D
               S03:00FC0716:  7E
               S03:00FC0717:  7F
F02:0062       	DC.B	$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A,$8B,$8C,$8D,$8E,$8F
               S03:00FC0718:  80
               S03:00FC0719:  81
               S03:00FC071A:  82
               S03:00FC071B:  83
               S03:00FC071C:  84
               S03:00FC071D:  85
               S03:00FC071E:  86
               S03:00FC071F:  87
               S03:00FC0720:  88
               S03:00FC0721:  89
               S03:00FC0722:  8A
               S03:00FC0723:  8B
               S03:00FC0724:  8C
               S03:00FC0725:  8D
               S03:00FC0726:  8E
               S03:00FC0727:  8F
F02:0063       	DC.B	$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$9F
               S03:00FC0728:  90
               S03:00FC0729:  91
               S03:00FC072A:  92
               S03:00FC072B:  93
               S03:00FC072C:  94
               S03:00FC072D:  95
               S03:00FC072E:  96
               S03:00FC072F:  97
               S03:00FC0730:  98
               S03:00FC0731:  99
               S03:00FC0732:  9A
               S03:00FC0733:  9B
               S03:00FC0734:  9C
               S03:00FC0735:  9D
               S03:00FC0736:  9E
               S03:00FC0737:  9F
F02:0064       	DC.B	$A0,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF
               S03:00FC0738:  A0
               S03:00FC0739:  A1
               S03:00FC073A:  A2
               S03:00FC073B:  A3
               S03:00FC073C:  A4
               S03:00FC073D:  A5
               S03:00FC073E:  A6
               S03:00FC073F:  A7
               S03:00FC0740:  A8
               S03:00FC0741:  A9
               S03:00FC0742:  AA
               S03:00FC0743:  AB
               S03:00FC0744:  AC
               S03:00FC0745:  AD
               S03:00FC0746:  AE
               S03:00FC0747:  AF
F02:0065       	DC.B	$B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE,$BF
               S03:00FC0748:  B0
               S03:00FC0749:  B1
               S03:00FC074A:  B2
               S03:00FC074B:  B3
               S03:00FC074C:  B4
               S03:00FC074D:  B5
               S03:00FC074E:  B6
               S03:00FC074F:  B7
               S03:00FC0750:  B8
               S03:00FC0751:  B9
               S03:00FC0752:  BA
               S03:00FC0753:  BB
               S03:00FC0754:  BC
               S03:00FC0755:  BD
               S03:00FC0756:  BE
               S03:00FC0757:  BF
F02:0066       	DC.B	$C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
               S03:00FC0758:  C0
               S03:00FC0759:  C1
               S03:00FC075A:  C2
               S03:00FC075B:  C3
               S03:00FC075C:  C4
               S03:00FC075D:  C5
               S03:00FC075E:  C6
               S03:00FC075F:  C7
               S03:00FC0760:  C8
               S03:00FC0761:  C9
               S03:00FC0762:  CA
               S03:00FC0763:  CB
               S03:00FC0764:  CC
               S03:00FC0765:  CD
               S03:00FC0766:  CE
               S03:00FC0767:  CF
F02:0067       	DC.B	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DE,$DF
               S03:00FC0768:  D0
               S03:00FC0769:  D1
               S03:00FC076A:  D2
               S03:00FC076B:  D3
               S03:00FC076C:  D4
               S03:00FC076D:  D5
               S03:00FC076E:  D6
               S03:00FC076F:  D7
               S03:00FC0770:  D8
               S03:00FC0771:  D9
               S03:00FC0772:  DA
               S03:00FC0773:  DB
               S03:00FC0774:  DC
               S03:00FC0775:  DD
               S03:00FC0776:  DE
               S03:00FC0777:  DF
F02:0068       	DC.B	$E0,$E1,$E2,$E3,$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED,$EE,$EF
               S03:00FC0778:  E0
               S03:00FC0779:  E1
               S03:00FC077A:  E2
               S03:00FC077B:  E3
               S03:00FC077C:  E4
               S03:00FC077D:  E5
               S03:00FC077E:  E6
               S03:00FC077F:  E7
               S03:00FC0780:  E8
               S03:00FC0781:  E9
               S03:00FC0782:  EA
               S03:00FC0783:  EB
               S03:00FC0784:  EC
               S03:00FC0785:  ED
               S03:00FC0786:  EE
               S03:00FC0787:  EF
F02:0069       	DC.B	$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
               S03:00FC0788:  F0
               S03:00FC0789:  F1
               S03:00FC078A:  F2
               S03:00FC078B:  F3
               S03:00FC078C:  F4
               S03:00FC078D:  F5
               S03:00FC078E:  F6
               S03:00FC078F:  F7
               S03:00FC0790:  F8
               S03:00FC0791:  F9
               S03:00FC0792:  FA
               S03:00FC0793:  FB
               S03:00FC0794:  FC
               S03:00FC0795:  FD
               S03:00FC0796:  FE
               S03:00FC0797:  FF
F00:0706       
F00:0707       	ORG	KERNEL_LOC+$FFFC
F00:0708       	DC.L	$DEADBEEF
               S04:00FCFFFC:  DE AD BE EF


Sections:
S01  seg0
S02  seg400
S03  segfc0000
S04  segfcfffc


Sources:
F00  kernel.s
F01  kernel_definitions.s
F02  kernel_tables.s


Symbols:
test_table EXPR(16516760=0xfc0698) UNUSED ABS 
color_table EXPR(16516728=0xfc0678) UNUSED ABS 
hex_table EXPR(16516522=0xfc05aa) UNUSED ABS 
 copy_charrom_to_charram .4 EXPR(16516164=0xfc0444) ABS 
 copy_charrom_to_charram .3 EXPR(16516160=0xfc0440) ABS 
 copy_charrom_to_charram .2 EXPR(16516148=0xfc0434) ABS 
 copy_charrom_to_charram .5 EXPR(16516172=0xfc044c) ABS 
 copy_charrom_to_charram .1 EXPR(16516136=0xfc0428) ABS 
 memcopy .1 EXPR(16516102=0xfc0406) ABS 
 blockfill_words .1 EXPR(16516082=0xfc03f2) ABS 
 blockfill_bytes .1 EXPR(16516060=0xfc03dc) ABS 
timer3_handler EXPR(16516054=0xfc03d6) ABS 
timer2_handler EXPR(16516052=0xfc03d4) ABS 
timer1_handler EXPR(16516050=0xfc03d2) ABS 
 timer0_handler .end EXPR(16516042=0xfc03ca) ABS 
timer0_handler EXPR(16516002=0xfc03a2) ABS 
interrupt_7_autovector EXPR(16516000=0xfc03a0) ABS 
interrupt_6_autovector EXPR(16515998=0xfc039e) ABS 
interrupt_5_autovector EXPR(16515992=0xfc0398) ABS 
timer_finish EXPR(16515988=0xfc0394) ABS 
timer3_check EXPR(16515964=0xfc037c) ABS 
timer2_check EXPR(16515940=0xfc0364) ABS 
timer1_check EXPR(16515916=0xfc034c) ABS 
timer0_check EXPR(16515892=0xfc0334) UNUSED ABS 
interrupt_4_autovector EXPR(16515890=0xfc0332) ABS 
interrupt_2_autovector EXPR(16515846=0xfc0306) ABS 
exception_handler EXPR(16515834=0xfc02fa) ABS 
 put_string .end EXPR(16515828=0xfc02f4) ABS 
 put_string .start EXPR(16515818=0xfc02ea) ABS 
 put_char .bs2 EXPR(16515798=0xfc02d6) ABS 
 put_char .bs1 EXPR(16515780=0xfc02c4) ABS 
 put_char .right2 EXPR(16515732=0xfc0294) ABS 
 put_char .down2 EXPR(16515708=0xfc027c) ABS 
 put_char .lf2 EXPR(16515684=0xfc0264) ABS 
 put_char .end EXPR(16515808=0xfc02e0) ABS 
 put_char .char2 EXPR(16515652=0xfc0244) ABS 
 put_char .char EXPR(16515622=0xfc0226) UNUSED ABS 
 put_char .bs EXPR(16515768=0xfc02b8) ABS 
 put_char .left EXPR(16515754=0xfc02aa) ABS 
 put_char .up EXPR(16515738=0xfc029a) ABS 
 put_char .right EXPR(16515714=0xfc0282) ABS 
 put_char .down EXPR(16515690=0xfc026a) ABS 
 put_char .lf EXPR(16515660=0xfc024c) ABS 
 se_scroll_up .2 EXPR(16515526=0xfc01c6) ABS 
 se_scroll_up .1 EXPR(16515510=0xfc01b6) ABS 
se_scroll_up EXPR(16515488=0xfc01a0) ABS 
blockfill_words EXPR(16516074=0xfc03ea) ABS 
blockfill_bytes EXPR(16516056=0xfc03d8) ABS 
 mainloop .mes2 EXPR(16515411=0xfc0153) ABS 
 mainloop .main2 EXPR(16515394=0xfc0142) ABS 
se_deactivate_cursor EXPR(16516398=0xfc052e) ABS 
 mainloop .main1 EXPR(16515358=0xfc011e) ABS 
se_activate_cursor EXPR(16516348=0xfc04fc) ABS 
put_char EXPR(16515552=0xfc01e0) ABS 
 mainloop .prompt EXPR(16515404=0xfc014c) ABS 
put_string EXPR(16515814=0xfc02e6) ABS 
welcome EXPR(16516480=0xfc0580) ABS 
se_clear_screen EXPR(16515438=0xfc016e) ABS 
 mainloop .main0 EXPR(16515316=0xfc00f4) ABS 
mainloop EXPR(16515304=0xfc00e8) UNUSED ABS 
notes EXPR(16516538=0xfc05ba) ABS 
memcopy EXPR(16516098=0xfc0402) ABS 
screen_blit_structure EXPR(16516448=0xfc0560) ABS 
copy_charrom_to_charram EXPR(16516118=0xfc0416) ABS 
reset_sids EXPR(16516268=0xfc04ac) ABS 
setup_vector_table EXPR(16516178=0xfc0452) ABS 
kernel_main EXPR(16515080=0xfc0008) ABS 
se_command_buf EXPR(1094=0x446) UNUSED ABS 
se_orig_color EXPR(1092=0x444) UNUSED ABS 
se_orig_char EXPR(1091=0x443) ABS 
se_crs_interval EXPR(1090=0x442) ABS 
se_crs_cntdwn EXPR(1089=0x441) ABS 
se_crs_blink EXPR(1088=0x440) ABS 
kernel_text_scr EXPR(1056=0x420) ABS 
timer3_vector EXPR(1044=0x414) ABS 
timer2_vector EXPR(1040=0x410) ABS 
timer1_vector EXPR(1036=0x40c) ABS 
timer0_vector EXPR(1032=0x408) ABS 
current_txt_scr EXPR(1028=0x404) ABS 
cursor_pos EXPR(1026=0x402) ABS 
curr_text_color EXPR(1024=0x400) ABS 
vec_31_level7_irq_autovect EXPR(124=0x7c) ABS 
vec_30_level6_irq_autovect EXPR(120=0x78) ABS 
vec_29_level5_irq_autovect EXPR(116=0x74) ABS 
vec_28_level4_irq_autovect EXPR(112=0x70) ABS 
vec_27_level3_irq_autovect EXPR(108=0x6c) UNUSED ABS 
vec_26_level2_irq_autovect EXPR(104=0x68) ABS 
vec_25 EXPR(100=0x64) UNUSED ABS 
vec_24 EXPR(96=0x60) UNUSED ABS 
vec_23 EXPR(92=0x5c) UNUSED ABS 
vec_22 EXPR(88=0x58) UNUSED ABS 
vec_21 EXPR(84=0x54) UNUSED ABS 
vec_20 EXPR(80=0x50) UNUSED ABS 
vec_19 EXPR(76=0x4c) UNUSED ABS 
vec_18 EXPR(72=0x48) UNUSED ABS 
vec_17 EXPR(68=0x44) UNUSED ABS 
vec_16 EXPR(64=0x40) UNUSED ABS 
vec_15 EXPR(60=0x3c) UNUSED ABS 
vec_14 EXPR(56=0x38) UNUSED ABS 
vec_13 EXPR(52=0x34) UNUSED ABS 
vec_12 EXPR(48=0x30) UNUSED ABS 
vec_11_unimpl_instruction EXPR(44=0x2c) ABS 
vec_10_unimpl_instruction EXPR(40=0x28) ABS 
vec_09 EXPR(36=0x24) UNUSED ABS 
vec_08 EXPR(32=0x20) UNUSED ABS 
vec_07 EXPR(28=0x1c) UNUSED ABS 
vec_06 EXPR(24=0x18) UNUSED ABS 
vec_05 EXPR(20=0x14) UNUSED ABS 
vec_04_illegal_instruction EXPR(16=0x10) ABS 
vec_03 EXPR(12=0xc) UNUSED ABS 
vec_02 EXPR(8=0x8) UNUSED ABS 
vec_01 EXPR(4=0x4) UNUSED ABS 
vec_00 EXPR(0=0x0) UNUSED ABS 
N_A7S EXPR(188=0xbc) UNUSED EQU 
N_A7_ EXPR(186=0xba) UNUSED EQU 
N_G7S EXPR(184=0xb8) UNUSED EQU 
N_G7_ EXPR(182=0xb6) UNUSED EQU 
N_F7S EXPR(180=0xb4) UNUSED EQU 
N_F7_ EXPR(178=0xb2) UNUSED EQU 
N_E7_ EXPR(176=0xb0) UNUSED EQU 
N_D7S EXPR(174=0xae) UNUSED EQU 
N_D7_ EXPR(172=0xac) UNUSED EQU 
N_C7S EXPR(170=0xaa) UNUSED EQU 
N_C7_ EXPR(168=0xa8) UNUSED EQU 
N_B6_ EXPR(166=0xa6) UNUSED EQU 
N_A6S EXPR(164=0xa4) UNUSED EQU 
N_A6_ EXPR(162=0xa2) UNUSED EQU 
N_G6S EXPR(160=0xa0) UNUSED EQU 
N_G6_ EXPR(158=0x9e) UNUSED EQU 
N_F6S EXPR(156=0x9c) UNUSED EQU 
N_F6_ EXPR(154=0x9a) UNUSED EQU 
N_E6_ EXPR(152=0x98) UNUSED EQU 
N_D6S EXPR(150=0x96) UNUSED EQU 
N_D6_ EXPR(148=0x94) UNUSED EQU 
N_C6S EXPR(146=0x92) UNUSED EQU 
N_C6_ EXPR(144=0x90) UNUSED EQU 
N_B5_ EXPR(142=0x8e) UNUSED EQU 
N_A5S EXPR(140=0x8c) UNUSED EQU 
N_A5_ EXPR(138=0x8a) UNUSED EQU 
N_G5S EXPR(136=0x88) UNUSED EQU 
N_G5_ EXPR(134=0x86) UNUSED EQU 
N_F5S EXPR(132=0x84) UNUSED EQU 
N_F5_ EXPR(130=0x82) UNUSED EQU 
N_E5_ EXPR(128=0x80) UNUSED EQU 
N_D5S EXPR(126=0x7e) UNUSED EQU 
N_D5_ EXPR(124=0x7c) UNUSED EQU 
N_C5S EXPR(122=0x7a) UNUSED EQU 
N_C5_ EXPR(120=0x78) UNUSED EQU 
N_B4_ EXPR(118=0x76) UNUSED EQU 
N_A4S EXPR(116=0x74) UNUSED EQU 
N_A4_ EXPR(114=0x72) UNUSED EQU 
N_G4S EXPR(112=0x70) UNUSED EQU 
N_G4_ EXPR(110=0x6e) UNUSED EQU 
N_F4S EXPR(108=0x6c) UNUSED EQU 
N_F4_ EXPR(106=0x6a) UNUSED EQU 
N_E4_ EXPR(104=0x68) UNUSED EQU 
N_D4S EXPR(102=0x66) UNUSED EQU 
N_D4_ EXPR(100=0x64) UNUSED EQU 
N_C4S EXPR(98=0x62) UNUSED EQU 
N_C4_ EXPR(96=0x60) UNUSED EQU 
N_B3_ EXPR(94=0x5e) UNUSED EQU 
N_A3S EXPR(92=0x5c) UNUSED EQU 
N_A3_ EXPR(90=0x5a) EQU 
N_G3S EXPR(88=0x58) UNUSED EQU 
N_G3_ EXPR(86=0x56) UNUSED EQU 
N_F3S EXPR(84=0x54) UNUSED EQU 
N_F3_ EXPR(82=0x52) UNUSED EQU 
N_E3_ EXPR(80=0x50) UNUSED EQU 
N_D3S EXPR(78=0x4e) UNUSED EQU 
N_D3_ EXPR(76=0x4c) EQU 
N_C3S EXPR(74=0x4a) UNUSED EQU 
N_C3_ EXPR(72=0x48) UNUSED EQU 
N_B2_ EXPR(70=0x46) UNUSED EQU 
N_A2S EXPR(68=0x44) UNUSED EQU 
N_A2_ EXPR(66=0x42) UNUSED EQU 
N_G2S EXPR(64=0x40) UNUSED EQU 
N_G2_ EXPR(62=0x3e) UNUSED EQU 
N_F2S EXPR(60=0x3c) UNUSED EQU 
N_F2_ EXPR(58=0x3a) UNUSED EQU 
N_E2_ EXPR(56=0x38) UNUSED EQU 
N_D2S EXPR(54=0x36) UNUSED EQU 
N_D2_ EXPR(52=0x34) UNUSED EQU 
N_C2S EXPR(50=0x32) UNUSED EQU 
N_C2_ EXPR(48=0x30) UNUSED EQU 
N_B1_ EXPR(46=0x2e) UNUSED EQU 
N_A1S EXPR(44=0x2c) UNUSED EQU 
N_A1_ EXPR(42=0x2a) UNUSED EQU 
N_G1S EXPR(40=0x28) UNUSED EQU 
N_G1_ EXPR(38=0x26) UNUSED EQU 
N_F1S EXPR(36=0x24) UNUSED EQU 
N_F1_ EXPR(34=0x22) UNUSED EQU 
N_E1_ EXPR(32=0x20) UNUSED EQU 
N_D1S EXPR(30=0x1e) UNUSED EQU 
N_D1_ EXPR(28=0x1c) UNUSED EQU 
N_C1S EXPR(26=0x1a) UNUSED EQU 
N_C1_ EXPR(24=0x18) UNUSED EQU 
N_B0_ EXPR(22=0x16) UNUSED EQU 
N_A0S EXPR(20=0x14) UNUSED EQU 
N_A0_ EXPR(18=0x12) UNUSED EQU 
N_G0S EXPR(16=0x10) UNUSED EQU 
N_G0_ EXPR(14=0xe) UNUSED EQU 
N_F0S EXPR(12=0xc) UNUSED EQU 
N_F0_ EXPR(10=0xa) UNUSED EQU 
N_E0_ EXPR(8=0x8) UNUSED EQU 
N_D0S EXPR(6=0x6) UNUSED EQU 
N_D0_ EXPR(4=0x4) UNUSED EQU 
N_C0S EXPR(2=0x2) UNUSED EQU 
N_C0_ EXPR(0=0x0) UNUSED EQU 
C64_LIGHTGREY EXPR(64170=0xfaaa) EQU 
C64_LIGHTBLUE EXPR(63101=0xf67d) EQU 
C64_LIGHTGREEN EXPR(64506=0xfbfa) EQU 
C64_GREY EXPR(63351=0xf777) EQU 
C64_DARKGREY EXPR(62532=0xf444) EQU 
C64_LIGHTRED EXPR(64375=0xfb77) EQU 
C64_BROWN EXPR(62769=0xf531) EQU 
C64_ORANGE EXPR(63571=0xf853) EQU 
C64_YELLOW EXPR(65256=0xfee8) EQU 
C64_BLUE EXPR(62265=0xf339) EQU 
C64_GREEN EXPR(63141=0xf6a5) EQU 
C64_PURPLE EXPR(63561=0xf849) EQU 
C64_CYAN EXPR(63692=0xf8cc) EQU 
C64_RED EXPR(63283=0xf733) EQU 
C64_WHITE EXPR(65535=0xffff) EQU 
C64_BLACK EXPR(61440=0xf000) EQU 
BLITTER_CLEAR_COLOR EXPR(16451334=0xfb0706) EQU 
BLITTER_DATA_32_BIT EXPR(16451330=0xfb0702) EQU 
BLITTER_CONTROL EXPR(16451328=0xfb0700) EQU 
BLITTER_BASE EXPR(16451328=0xfb0700) EQU 
TIMER_BASE EXPR(16451072=0xfb0600) EQU 
SID1_RGHT EXPR(16450947=0xfb0583) EQU 
SID1_LEFT EXPR(16450946=0xfb0582) EQU 
SID0_RGHT EXPR(16450945=0xfb0581) EQU 
SID0_LEFT EXPR(16450944=0xfb0580) EQU 
SID1_VOLUME EXPR(16450872=0xfb0538) EQU 
SID1_BASE EXPR(16450848=0xfb0520) EQU 
SID0_VOLUME EXPR(16450840=0xfb0518) EQU 
SID0_BASE EXPR(16450816=0xfb0500) EQU 
SOUND_BASE EXPR(16450816=0xfb0500) EQU 
VICV_BUFFERSWAP EXPR(16450576=0xfb0410) EQU 
VICV_ISR EXPR(16450574=0xfb040e) EQU 
VICV_BORDER_SIZE EXPR(16450572=0xfb040c) EQU 
VICV_COL EXPR(16450568=0xfb0408) EQU 
VICV_TXT EXPR(16450564=0xfb0404) EQU 
VICV_BORDER_COLOR EXPR(16450560=0xfb0400) EQU 
VICV_BASE EXPR(16450560=0xfb0400) EQU 
CIA_KEYBOARD EXPR(16450432=0xfb0380) UNUSED EQU 
CIA_ASCII EXPR(16450308=0xfb0304) EQU 
CIA_REPEAT EXPR(16450307=0xfb0303) UNUSED EQU 
CIA_DELAY EXPR(16450306=0xfb0302) UNUSED EQU 
CIA_CONTROL EXPR(16450305=0xfb0301) EQU 
CIA_STATUS EXPR(16450304=0xfb0300) UNUSED EQU 
CIA_BASE EXPR(16450304=0xfb0300) EQU 
CHAR_RAM EXPR(15794176=0xf10000) EQU 
CHAR_ROM EXPR(16482304=0xfb8000) EQU 
SCRN_SPACE EXPR(32=0x20) EQU 
ASCII_CURSOR_LEFT EXPR(157=0x9d) EQU 
ASCII_REVERSE_OFF EXPR(146=0x92) UNUSED EQU 
ASCII_CURSOR_UP EXPR(145=0x91) EQU 
ASCII_SPACE EXPR(32=0x20) EQU 
ASCII_CURSOR_RIGHT EXPR(29=0x1d) EQU 
ASCII_REVERSE_ON EXPR(18=0x12) UNUSED EQU 
ASCII_CURSOR_DOWN EXPR(17=0x11) EQU 
ASCII_CR EXPR(13=0xd) UNUSED EQU 
ASCII_LF EXPR(10=0xa) EQU 
ASCII_BACKSPACE EXPR(8=0x8) EQU 
ASCII_NULL EXPR(0=0x0) EQU 
SUPERV_STACK EXPR(14680064=0xe00000) EQU 
KERNEL_LOC EXPR(16515072=0xfc0000) EQU 
KERNEL_VARS EXPR(1024=0x400) EQU 
_MOVEMBYTES EXPR(12=0xc) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(769=0x301) INTERNAL 
__LINE__ EXPR(708=0x2c4) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 
__UNIXFS EXPR(0=0x0) INTERNAL 

There have been no errors.
