F00:0001       ; elmerucr - 01/08/2020
F00:0002       ; compiles with vasmm68k_mot
F00:0003       
F00:0004       	INCLUDE "kernel_definitions.s"
F01:0001       ; E64-II definitions - 2020-08-01 elmerucr
F01:0002       
F01:0003       ; general
F01:0004       KERNEL_VARS	equ	$000400
F01:0005       KERNEL_LOC	equ	$010000
F01:0006       SUPERV_STACK	equ	$E00000
F01:0007       
F01:0008       
F01:0009       ; ascii definitions
F01:0010       ASCII_NULL		equ	$00
F01:0011       ASCII_BACKSPACE		equ	$08
F01:0012       ASCII_LF		equ	$0A
F01:0013       ASCII_CURSOR_DOWN	equ	$11
F01:0014       ASCII_CURSOR_RIGHT	equ	$1D
F01:0015       ASCII_SPACE		equ	$20
F01:0016       ASCII_CURSOR_UP		equ	$91
F01:0017       ASCII_CURSOR_LEFT	equ	$9D
F01:0018       
F01:0019       
F01:0020       ; scrn_codes
F01:0021       SCRN_SPACE		equ	$20
F01:0022       
F01:0023       
F01:0024       ; char rom
F01:0025       CHAR_ROM		equ	$FE0000
F01:0026       CHAR_RAM		equ	$F10000
F01:0027       
F01:0028       
F01:0029       ; cia
F01:0030       CIA_BASE		equ	$FF0300
F01:0031       CIA_STATUS		equ	CIA_BASE
F01:0032       CIA_CONTROL		equ	CIA_BASE+$01
F01:0033       CIA_DELAY		equ	CIA_BASE+$02
F01:0034       CIA_REPEAT		equ	CIA_BASE+$03
F01:0035       CIA_ASCII		equ	CIA_BASE+$04
F01:0036       CIA_KEYBOARD		equ	CIA_BASE+$80
F01:0037       
F01:0038       
F01:0039       ; vicv
F01:0040       VICV_BASE		equ	$FF0400 	; vicv base register
F01:0041       VICV_BORDER_COLOR	equ	VICV_BASE	; 16 bit value
F01:0042       VICV_TXT		equ	VICV_BASE+$04
F01:0043       VICV_COL		equ	VICV_BASE+$08
F01:0044       VICV_BORDER_SIZE	equ	VICV_BASE+$0C
F01:0045       VICV_ISR		equ	VICV_BASE+$0E
F01:0046       VICV_BUFFERSWAP		equ	VICV_BASE+$10
F01:0047       
F01:0048       
F01:0049       ; SOUND
F01:0050       SOUND_BASE	equ	$FF0500			; base register
F01:0051       SID0_BASE	equ	SOUND_BASE
F01:0052       SID0_VOLUME	equ	SID0_BASE+$18
F01:0053       SID1_BASE	equ	SOUND_BASE+$20
F01:0054       SID1_VOLUME	equ	SID1_BASE+$18
F01:0055       ; SOUND MIXING
F01:0056       SID0_LEFT	equ	SOUND_BASE+$80
F01:0057       SID0_RGHT	equ	SOUND_BASE+$81
F01:0058       SID1_LEFT	equ	SOUND_BASE+$82
F01:0059       SID1_RGHT	equ	SOUND_BASE+$83
F01:0060       
F01:0061       
F01:0062       ; timer
F01:0063       TIMER_BASE		equ	$FF0600
F01:0064       
F01:0065       
F01:0066       ; blitter
F01:0067       BLITTER_BASE		equ	$FF0700
F01:0068       BLITTER_CONTROL		equ	BLITTER_BASE
F01:0069       BLITTER_DATA_32_BIT	equ	BLITTER_BASE+$02
F01:0070       BLITTER_CLEAR_COLOR	equ	BLITTER_BASE+$06	; 16 bit word
F01:0071       
F01:0072       
F01:0073       ; color palette
F01:0074       C64_BLACK	equ	$F000
F01:0075       C64_WHITE	equ	$FFFF
F01:0076       C64_RED		equ	$F733
F01:0077       C64_CYAN	equ	$F8CC
F01:0078       C64_PURPLE	equ	$F849
F01:0079       C64_GREEN	equ	$F6A5
F01:0080       C64_BLUE	equ	$F339
F01:0081       C64_YELLOW	equ	$FEE8
F01:0082       C64_ORANGE	equ	$F853
F01:0083       C64_BROWN	equ	$F531
F01:0084       C64_LIGHTRED	equ	$FB77
F01:0085       C64_DARKGREY	equ	$F444
F01:0086       C64_GREY	equ	$F777
F01:0087       C64_LIGHTGREEN	equ	$FBFA
F01:0088       C64_LIGHTBLUE	equ	$F67D
F01:0089       C64_LIGHTGREY	equ	$FAAA
F01:0090       
F01:0091       
F01:0092       ; music notes index
F01:0093       N_C0_	equ	00*2
F01:0094       N_C0S	equ	01*2
F01:0095       N_D0_	equ	02*2
F01:0096       N_D0S	equ	03*2
F01:0097       N_E0_	equ	04*2
F01:0098       N_F0_	equ	05*2
F01:0099       N_F0S	equ	06*2
F01:0100       N_G0_	equ	07*2
F01:0101       N_G0S	equ	08*2
F01:0102       N_A0_	equ	09*2
F01:0103       N_A0S	equ	10*2
F01:0104       N_B0_	equ	11*2
F01:0105       
F01:0106       N_C1_	equ	12*2
F01:0107       N_C1S	equ	13*2
F01:0108       N_D1_	equ	14*2
F01:0109       N_D1S	equ	15*2
F01:0110       N_E1_	equ	16*2
F01:0111       N_F1_	equ	17*2
F01:0112       N_F1S	equ	18*2
F01:0113       N_G1_	equ	19*2
F01:0114       N_G1S	equ	20*2
F01:0115       N_A1_	equ	21*2
F01:0116       N_A1S	equ	22*2
F01:0117       N_B1_	equ	23*2
F01:0118       
F01:0119       N_C2_	equ	24*2
F01:0120       N_C2S	equ	25*2
F01:0121       N_D2_	equ	26*2
F01:0122       N_D2S	equ	27*2
F01:0123       N_E2_	equ	28*2
F01:0124       N_F2_	equ	29*2
F01:0125       N_F2S	equ	30*2
F01:0126       N_G2_	equ	31*2
F01:0127       N_G2S	equ	32*2
F01:0128       N_A2_	equ	33*2
F01:0129       N_A2S	equ	34*2
F01:0130       N_B2_	equ	35*2
F01:0131       
F01:0132       N_C3_	equ	36*2
F01:0133       N_C3S	equ	37*2
F01:0134       N_D3_	equ	38*2
F01:0135       N_D3S	equ	39*2
F01:0136       N_E3_	equ	40*2
F01:0137       N_F3_	equ	41*2
F01:0138       N_F3S	equ	42*2
F01:0139       N_G3_	equ	43*2
F01:0140       N_G3S	equ	44*2
F01:0141       N_A3_	equ	45*2
F01:0142       N_A3S	equ	46*2
F01:0143       N_B3_	equ	47*2
F01:0144       
F01:0145       N_C4_	equ	48*2
F01:0146       N_C4S	equ	49*2
F01:0147       N_D4_	equ	50*2
F01:0148       N_D4S	equ	51*2
F01:0149       N_E4_	equ	52*2
F01:0150       N_F4_	equ	53*2
F01:0151       N_F4S	equ	54*2
F01:0152       N_G4_	equ	55*2
F01:0153       N_G4S	equ	56*2
F01:0154       N_A4_	equ	57*2
F01:0155       N_A4S	equ	58*2
F01:0156       N_B4_	equ	59*2
F01:0157       
F01:0158       N_C5_	equ	60*2
F01:0159       N_C5S	equ	61*2
F01:0160       N_D5_	equ	62*2
F01:0161       N_D5S	equ	63*2
F01:0162       N_E5_	equ	64*2
F01:0163       N_F5_	equ	65*2
F01:0164       N_F5S	equ	66*2
F01:0165       N_G5_	equ	67*2
F01:0166       N_G5S	equ	68*2
F01:0167       N_A5_	equ	69*2
F01:0168       N_A5S	equ	70*2
F01:0169       N_B5_	equ	71*2
F01:0170       
F01:0171       N_C6_	equ	72*2
F01:0172       N_C6S	equ	73*2
F01:0173       N_D6_	equ	74*2
F01:0174       N_D6S	equ	75*2
F01:0175       N_E6_	equ	76*2
F01:0176       N_F6_	equ	77*2
F01:0177       N_F6S	equ	78*2
F01:0178       N_G6_	equ	79*2
F01:0179       N_G6S	equ	80*2
F01:0180       N_A6_	equ	81*2
F01:0181       N_A6S	equ	82*2
F01:0182       N_B6_	equ	83*2
F01:0183       
F01:0184       N_C7_	equ	84*2
F01:0185       N_C7S	equ	85*2
F01:0186       N_D7_	equ	86*2
F01:0187       N_D7S	equ	87*2
F01:0188       N_E7_	equ	88*2
F01:0189       N_F7_	equ	89*2
F01:0190       N_F7S	equ	90*2
F01:0191       N_G7_	equ	91*2
F01:0192       N_G7S	equ	92*2
F01:0193       N_A7_	equ	93*2
F01:0194       N_A7S	equ	94*2
F01:0195       
F00:0005       
F00:0006       	ORG	$0
F00:0007       
F00:0008       vec_00				DS.L	1	; vector 0 - supervisor stackpointer
F00:0009       vec_01				DS.L	1	; vector 1 - reset vector
F00:0010       vec_02				DS.L	1	; vector 2
F00:0011       vec_03				DS.L	1	; vector 3
F00:0012       vec_04_illegal_instruction	DS.L	1	; vector 4 - illegal instruction
F00:0013       vec_05				DS.L	1
F00:0014       vec_06				DS.L	1
F00:0015       vec_07				DS.L	1
F00:0016       vec_08				DS.L	1
F00:0017       vec_09				DS.L	1
F00:0018       vec_10_unimpl_instruction	DS.L	1	; vector 10
F00:0019       vec_11_unimpl_instruction	DS.L	1	; vector 11
F00:0020       vec_12				DS.L	1
F00:0021       vec_13				DS.L	1
F00:0022       vec_14				DS.L	1
F00:0023       vec_15				DS.L	1
F00:0024       vec_16				DS.L	1
F00:0025       vec_17				DS.L	1
F00:0026       vec_18				DS.L	1
F00:0027       vec_19				DS.L	1
F00:0028       vec_20				DS.L	1
F00:0029       vec_21				DS.L	1
F00:0030       vec_22				DS.L	1
F00:0031       vec_23				DS.L	1
F00:0032       vec_24				DS.L	1
F00:0033       vec_25				DS.L	1
F00:0034       vec_26_level2_irq_autovect	DS.L	1	; vector 26
F00:0035       vec_27_level3_irq_autovect	DS.L	1	; vector 27
F00:0036       vec_28_level4_irq_autovect	DS.L	1	; vector 28
F00:0037       vec_29_level5_irq_autovect	DS.L	1	; vector 29
F00:0038       vec_30_level6_irq_autovect	DS.L	1	; vector 30
F00:0039       vec_31_level7_irq_autovect	DS.L	1	; vector 31
F00:0040       
F00:0041       
F00:0042       	ORG	KERNEL_VARS
F00:0043       
F00:0044       curr_text_color	DS.W	1
F00:0045       cursor_pos	DS.W	1
F00:0046       current_txt_scr	DS.L	1
F00:0047       
F00:0048       timer0_vector	DS.L	1
F00:0049       timer1_vector	DS.L	1
F00:0050       timer2_vector	DS.L	1
F00:0051       timer3_vector	DS.L	1
F00:0052       
F00:0053       	ALIGN	5
F00:0054       kernel_text_scr	DS.B	32
F00:0055       
F00:0056       se_crs_blink	DS.B	1	; byte (actually least significant bit), 0=off, 1=currently blinking
F00:0057       se_crs_cntdwn	DS.B	1	; byte, counter for blinking interval
F00:0058       se_crs_interval	DS.B	1	; byte, duration of blinking. e.g. @60Hz value 20 means 0.33s on, 0.33s off
F00:0059       se_orig_char	DS.B	1	; byte, original value of the char behind the cursor
F00:0060       se_orig_color	DS.W	1	; word, original value of the color value behind the cursor
F00:0061       se_command_buf	DS.B	64	; 64 bytes, hold a string of max. 63 chars followed by a NULL
F00:0062       
F00:0063       
F00:0064       	ORG	KERNEL_LOC
F00:0065       
F00:0066       	DC.L	SUPERV_STACK		; vector 0 - supervisor stackpointer
               S03:00010000:  00 E0 00 00
F00:0067       	DC.L	kernel_main		; vector 1 - reset vector
               S03:00010004:  00 01 00 08
F00:0068       
F00:0069       
F00:0070       ; start of main kernel code
F00:0071       
F00:0072       kernel_main
F00:0073       
F00:0074       	BSR	setup_vector_table
               S03:00010008:  61 00 04 42
F00:0075       	BSR	reset_sids
               S03:0001000C:  61 00 04 98
F00:0076       	BSR	copy_charrom_to_charram
               S03:00010010:  61 00 03 FE
F00:0077       
F00:0078       	; put something in the usp
F00:0079       	LEA	$C00000,A0
               S03:00010014:  41 F9 00 C0 00 00
F00:0080       	MOVE.L	A0,USP
               S03:0001001A:  4E 60
F00:0081       
F00:0082       	; set up timer0 interrupts (cursor flashing)
F00:0083       
F00:0084       	MOVE.W	#$E10,TIMER_BASE+2	; load value 3600 ($E10 = 3600bpm = 60Hz)
               S03:0001001C:  33 FC 0E 10 00 FF 06 02
F00:0085       	ORI.B	#%00000001,TIMER_BASE+1	; turn on interrupt generation by clock0
               S03:00010024:  00 39 00 01 00 FF 06 01
F00:0086       
F00:0087       
F00:0088       	; set up timer1 interrupts (ting sound)
F00:0089       
F00:0090       	;MOVE.W	#$3C,TIMER_BASE+2	; load value 60 ($3c = 60bpm = 1Hz)
F00:0091       	;ORI.B	#%00000010,TIMER_BASE+1	; turn on interrupt generation by clock0
F00:0092       
F00:0093       
F00:0094       	; set up timer3 interrupts at 50.125Hz for music / sid tunes
F00:0095       
F00:0096       	;MOVE.W	#$BC0,TIMER_BASE+2		; 3008bpm (=50.125Hz)
F00:0097       	;ORI.B	#%00001000,TIMER_BASE+1	; turn on interrupt generation by clock3
F00:0098       
F00:0099       
F00:0100       	; set ipl to level 1 (all interrupts levels of >= 2 will be acknowledged)
F00:0101       
F00:0102       	MOVE.W	SR,D0
               S03:0001002C:  40 C0
F00:0103       	ANDI.W	#%1111100011111111,D0
               S03:0001002E:  02 40 F8 FF
F00:0104       	ORI.W	#%0000000100000000,D0
               S03:00010032:  00 40 01 00
F00:0105       	MOVE.W	D0,SR
               S03:00010036:  46 C0
F00:0106       
F00:0107       	; CIA start generating keyboard events
F00:0108       	MOVE.B	#%00000001,CIA_CONTROL
               S03:00010038:  13 FC 00 01 00 FF 03 01
F00:0109       
F00:0110       
F00:0111       	; set color and size of border
F00:0112       	MOVE.W	#C64_BLACK,VICV_BORDER_COLOR
               S03:00010040:  33 FC F0 00 00 FF 04 00
F00:0113       	MOVE.B	#$10,VICV_BORDER_SIZE
               S03:00010048:  13 FC 00 10 00 FF 04 0C
F00:0114       
F00:0115       	; set clear color ('background')
F00:0116       	MOVE.W	#C64_BLUE,BLITTER_CLEAR_COLOR
               S03:00010050:  33 FC F3 39 00 FF 07 06
F00:0117       
F00:0118       	; copy the screen blit struct from rom to appropriate ram area
F00:0119       	LEA	screen_blit_structure,a0
               S03:00010058:  41 FA 05 06
F00:0120       	LEA	kernel_text_scr,a1
               S03:0001005C:  43 F8 04 20
F00:0121       	MOVE.L	#$20,D0			; 32 bytes
               S03:00010060:  70 20
F00:0122       	JSR	memcopy
               S03:00010062:  61 00 03 98
F00:0123       
F00:0124       	MOVE.L	#kernel_text_scr,current_txt_scr	; set current text screen
               S03:00010066:  21 FC 00 00 04 20 04 04
F00:0125       
F00:0126       
F00:0127       	; set txt & color pointer  -  deprecated!
F00:0128       	MOVE.L	#$00F00000,VICV_TXT
               S03:0001006E:  23 FC 00 F0 00 00 00 FF 04 04
F00:0129       	MOVE.L	#$00F00800,VICV_COL
               S03:00010078:  23 FC 00 F0 08 00 00 FF 04 08
F00:0130       
F00:0131       	MOVE.W	#C64_LIGHTBLUE,curr_text_color
               S03:00010082:  31 FC F6 7D 04 00
F00:0132       
F00:0133       	; play a welcome sound on SID0
F00:0134       
F00:0135       	LEA	SID0_BASE,A0
               S03:00010088:  41 F9 00 FF 05 00
F00:0136       	LEA	notes,A1
               S03:0001008E:  43 FA 05 AA
F00:0137       	MOVE.W	N_D3_(A1),(A0)		; set frequency of voice 1
               S03:00010092:  30 A9 00 4C
F00:0138       	MOVE.B	#%00001001,$5(A0)	; attack and decay of voice 1
               S03:00010096:  11 7C 00 09 00 05
F00:0139       	MOVE.W	#$F0F,$02(A0)		; pulse width of voice 1
               S03:0001009C:  31 7C 0F 0F 00 02
F00:0140       	MOVE.B	#$FF,SID0_LEFT		; left channel mix
               S03:000100A2:  13 FC 00 FF 00 FF 05 80
F00:0141       	MOVE.B	#$10,SID0_RGHT		; right channel mix
               S03:000100AA:  13 FC 00 10 00 FF 05 81
F00:0142       	MOVE.B	#%01000001,$4(A0)	; pulse (bit 6) and open gate (bit 0)
               S03:000100B2:  11 7C 00 41 00 04
F00:0143       
F00:0144       
F00:0145       	; play a welcome sound on SID1
F00:0146       
F00:0147       	LEA	SID1_BASE,A0
               S03:000100B8:  41 F9 00 FF 05 20
F00:0148       	LEA	notes,A1
               S03:000100BE:  43 FA 05 7A
F00:0149       	MOVE.W	N_A3_(A1),(A0)		; set frequency of voice 1
               S03:000100C2:  30 A9 00 5A
F00:0150       	MOVE.B	#%00001001,$5(A0)	; attack and decay of voice 1
               S03:000100C6:  11 7C 00 09 00 05
F00:0151       	MOVE.W	#$F0F,$2(A0)		; pulse width of voice 1
               S03:000100CC:  31 7C 0F 0F 00 02
F00:0152       	MOVE.B	#$10,SID1_LEFT		; left channel mix
               S03:000100D2:  13 FC 00 10 00 FF 05 82
F00:0153       	MOVE.B	#$FF,SID1_RGHT		; right channel mix
               S03:000100DA:  13 FC 00 FF 00 FF 05 83
F00:0154       	MOVE.B	#%01000001,$4(A0)	; pulse (bit 6) and open gate (bit 0)
               S03:000100E2:  11 7C 00 41 00 04
F00:0155       
F00:0156       
F00:0157       mainloop
F00:0158       
F00:0159       	LEA	.main0,A0
               S03:000100E8:  41 FA 00 0A
F00:0160       	MOVE.L	A0,-(SP)		; put effective address of .main0 onto stack
               S03:000100EC:  2F 08
F00:0161       	MOVE.W	#$0100,-(SP)		; put new Status Reg onto stack
               S03:000100EE:  3F 3C 01 00
F00:0162       	RTE				; jump to user mode
               S03:000100F2:  4E 73
F00:0163       
F00:0164       
F00:0165       
F00:0166       .main0	BSR	se_clear_screen
               S03:000100F4:  61 6A
F00:0167       	MOVE.W	#$0,cursor_pos		; reset cursor position
               S03:000100F6:  31 FC 00 00 04 02
F00:0168       	MOVE.B	#$14,se_crs_interval	; blinking interval at 20 (0.33s)
               S03:000100FC:  11 FC 00 14 04 42
F00:0169       	LEA	welcome,A0
               S03:00010102:  41 FA 04 7C
F00:0170       	BSR	put_string
               S03:00010106:  61 00 01 D8
F00:0171       	LEA	.prompt,A0
               S03:0001010A:  41 FA 00 38
F00:0172       	BSR	put_string
               S03:0001010E:  61 00 01 D0
F00:0173       	BSR	se_activate_cursor
               S03:00010112:  61 00 03 E2
F00:0174       
F00:0175       .main1	CLR.L	D0
               S03:00010116:  70 00
F00:0176       	MOVE.B	CIA_ASCII,D0		; scan for a keyboard event/ascii value
               S03:00010118:  10 39 00 FF 03 04
F00:0177       	BEQ.S	.main1			; if 0 (nothing), jump to .main1
               S03:0001011E:  67 F6
F00:0178       
F00:0179       	BSR	se_deactivate_cursor
               S03:00010120:  61 00 04 06
F00:0180       	BSR	put_char		; process input
               S03:00010124:  61 00 00 AC
F00:0181       
F00:0182       	CMP.B	#ASCII_LF,D0		; did we have a return as keypress?
               S03:00010128:  B0 3C 00 0A
F00:0183       	BNE	.main2			; no
               S03:0001012C:  66 10
F00:0184       
F00:0185       	LEA	.mes2,A0		; yes, process command
               S03:0001012E:  41 FA 00 16
F00:0186       	; extract string here...
F00:0187       	BSR	put_string
               S03:00010132:  61 00 01 AC
F00:0188       	LEA	.prompt,A0
               S03:00010136:  41 FA 00 0C
F00:0189       	BSR	put_string
               S03:0001013A:  61 00 01 A4
F00:0190       
F00:0191       .main2	BSR	se_activate_cursor
               S03:0001013E:  61 00 03 B6
F00:0192       
F00:0193       	BRA.S	.main1
               S03:00010142:  60 D2
F00:0194       
F00:0195       .prompt	DC.B	".",ASCII_NULL
               S03:00010144:  2E
               S03:00010145:  00
F00:0196       .mes2	DC.B	ASCII_LF,"error: illegal command ",ASCII_LF,ASCII_NULL
               S03:00010146:  0A
               S03:00010147:  65 72 72 6F 72 3A 20 69 6C 6C 65 67 61 6C 20 63
               S03:00010157:  6F 6D 6D 61 6E 64 20
               S03:0001015E:  0A
               S03:0001015F:  00
F00:0197       
F00:0198       
F00:0199       	ALIGN	1
F00:0200       se_clear_screen
F00:0201       
F00:0202       	MOVEM.L	D0-D1/A0,-(SP)
               S03:00010160:  48 E7 C0 80
F00:0203       
F00:0204       	MOVEA.L	(VICV_TXT),A0
               S03:00010164:  20 79 00 FF 04 04
F00:0205       	MOVE.L	#$800,D0
               S03:0001016A:  20 3C 00 00 08 00
F00:0206       	MOVE.B	#SCRN_SPACE,D1			; space screencode
               S03:00010170:  12 3C 00 20
F00:0207       	JSR	blockfill_bytes
               S03:00010174:  61 00 02 5C
F00:0208       
F00:0209       	MOVEA.L	(VICV_COL),A0
               S03:00010178:  20 79 00 FF 04 08
F00:0210       	MOVE.L	#$800,D0
               S03:0001017E:  20 3C 00 00 08 00
F00:0211       	MOVE.W	#C64_LIGHTBLUE,D1
               S03:00010184:  32 3C F6 7D
F00:0212       	JSR	blockfill_words
               S03:00010188:  61 00 02 5A
F00:0213       
F00:0214       	MOVEM.L	(SP)+,D0-D1/A0
               S03:0001018C:  4C DF 01 03
F00:0215       	RTS
               S03:00010190:  4E 75
F00:0216       
F00:0217       
F00:0218       se_scroll_up
F00:0219       
F00:0220       	MOVEM.L	D0/A0-A1,-(SP)
               S03:00010192:  48 E7 80 C0
F00:0221       
F00:0222       	MOVE.L	#$7C0,D0
               S03:00010196:  20 3C 00 00 07 C0
F00:0223       
F00:0224       	MOVEA.L	(VICV_TXT),A0
               S03:0001019C:  20 79 00 FF 04 04
F00:0225       	MOVEA.L	(VICV_COL),A1
               S03:000101A2:  22 79 00 FF 04 08
F00:0226       
F00:0227       .1	MOVE.B	$40(A0),(A0)
               S03:000101A8:  10 A8 00 40
F00:0228       	MOVE.W	$80(A1),(A1)
               S03:000101AC:  32 A9 00 80
F00:0229       	ADDA	#$1,A0
               S03:000101B0:  52 48
F00:0230       	ADDA	#$2,A1
               S03:000101B2:  54 49
F00:0231       	SUBQ	#$1,D0
               S03:000101B4:  53 40
F00:0232       	BNE	.1
               S03:000101B6:  66 F0
F00:0233       
F00:0234       .2	MOVE.B	#ASCII_SPACE,(A0)
               S03:000101B8:  10 BC 00 20
F00:0235       	MOVE.W	curr_text_color,(A1)
               S03:000101BC:  32 B8 04 00
F00:0236       	ADDA	#$1,A0
               S03:000101C0:  52 48
F00:0237       	ADDA	#$2,A1
               S03:000101C2:  54 49
F00:0238       	ADDQ	#$1,D0
               S03:000101C4:  52 40
F00:0239       	CMPI.W	#$40,D0
               S03:000101C6:  0C 40 00 40
F00:0240       	BNE	.2
               S03:000101CA:  66 EC
F00:0241       
F00:0242       	MOVEM.L	(SP)+,D0/A0-A1
               S03:000101CC:  4C DF 03 01
F00:0243       	RTS
               S03:000101D0:  4E 75
F00:0244       
F00:0245       ; put_char expects an ascii value in register D0
F00:0246       
F00:0247       put_char
F00:0248       
F00:0249       	MOVEM.L	D0-D3/A0-A2,-(SP)	; save registers
               S03:000101D2:  48 E7 F0 E0
F00:0250       	ANDI.W	#$00FF,D0		; clear bits 8-15 from D0
               S03:000101D6:  02 40 00 FF
F00:0251       	MOVE.W	cursor_pos,D1		; load current cursor position into D1
               S03:000101DA:  32 38 04 02
F00:0252       	MOVE.W	curr_text_color,D2	; load current text colour into D2
               S03:000101DE:  34 38 04 00
F00:0253       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:000101E2:  20 79 00 FF 04 04
F00:0254       	MOVEA.L	VICV_COL,A1		; load pointer to current color screen into A1
               S03:000101E8:  22 79 00 FF 04 08
F00:0255       	LEA	ascii_to_screencode,A2	; A2 now points to ascii-screencode table
               S03:000101EE:  45 FA 03 BA
F00:0256       	CMP.B	#ASCII_LF,D0		; do we have a line feed as the next ascii?
               S03:000101F2:  B0 3C 00 0A
F00:0257       	BEQ	.lf
               S03:000101F6:  67 4E
F00:0258       	CMP.B	#ASCII_CURSOR_DOWN,D0
               S03:000101F8:  B0 3C 00 11
F00:0259       	BEQ	.down
               S03:000101FC:  67 66
F00:0260       	CMP.B	#ASCII_CURSOR_RIGHT,D0
               S03:000101FE:  B0 3C 00 1D
F00:0261       	BEQ	.right
               S03:00010202:  67 78
F00:0262       	CMP.B	#ASCII_CURSOR_UP,D0
               S03:00010204:  B0 3C 00 91
F00:0263       	BEQ	.up
               S03:00010208:  67 00 00 8A
F00:0264       	CMP.B	#ASCII_CURSOR_LEFT,D0
               S03:0001020C:  B0 3C 00 9D
F00:0265       	BEQ	.left
               S03:00010210:  67 00 00 92
F00:0266       	CMP.B	#ASCII_BACKSPACE,D0
               S03:00010214:  B0 3C 00 08
F00:0267       	BEQ	.bs
               S03:00010218:  67 00 00 98
F00:0268       
F00:0269       	; it's not a control character so print it
F00:0270       .char	MOVE.B	(A2,D0),D0		; change ascii value into screencode value
               S03:0001021C:  10 32 00 00
F00:0271       	MOVE.B	D0,(A0,D1)		; copy the char into screen
               S03:00010220:  11 80 10 00
F00:0272       	MOVE.W	D1,D3			; copy cursor position into D3
               S03:00010224:  36 01
F00:0273       	LSL.W	#$1,D3			; multiply index by two (color values are words contrary to tiles)
               S03:00010226:  E3 4B
F00:0274       	MOVE.W	D2,(A1,D3)		; copy the color value
               S03:00010228:  33 82 30 00
F00:0275       	ADDQ	#$1,D1			; increase the cursor position by one
               S03:0001022C:  52 41
F00:0276       
F00:0277       	MOVE.W	D1,D3
               S03:0001022E:  36 01
F00:0278       	ANDI.W	#$F800,D3		; are we outside screen memory?
               S03:00010230:  02 43 F8 00
F00:0279       	BEQ	.char2			; no, go to .char2
               S03:00010234:  67 08
F00:0280       	JSR	se_scroll_up		; yes, scroll 1 row upwards
               S03:00010236:  61 00 FF 5A
F00:0281       	SUBI.W	#$40,D1			; subtract 64 positions from the cursor position
               S03:0001023A:  04 41 00 40
F00:0282       .char2	MOVE.W	D1,cursor_pos
               S03:0001023E:  31 C1 04 02
F00:0283       	BRA	.end
               S03:00010242:  60 00 00 96
F00:0284       
F00:0285       .lf	ADDI.W	#$40,D1			; line feed, add 64 positions to current cursor pos
               S03:00010246:  06 41 00 40
F00:0286       	ANDI.W	#%1111111111000000,D1	; move cursor pos to beginning of line
               S03:0001024A:  02 41 FF C0
F00:0287       	MOVE.W	D1,D3
               S03:0001024E:  36 01
F00:0288       	ANDI.W	#$F800,D3		; are we outside screen memory?
               S03:00010250:  02 43 F8 00
F00:0289       	BEQ	.lf2			; no, go to .lf2
               S03:00010254:  67 08
F00:0290       	JSR	se_scroll_up		; yes, scroll 1 row upwards
               S03:00010256:  61 00 FF 3A
F00:0291       	SUBI.W	#$40,D1			; subtract 64 positions from the cursor position
               S03:0001025A:  04 41 00 40
F00:0292       .lf2	MOVE.W	D1,cursor_pos		; store new value
               S03:0001025E:  31 C1 04 02
F00:0293       	BRA	.end
               S03:00010262:  60 76
F00:0294       
F00:0295       .down	ADDI.W	#$40,D1			; cursor down, add 64 positions to current cursor pos
               S03:00010264:  06 41 00 40
F00:0296       	MOVE.W	D1,D2
               S03:00010268:  34 01
F00:0297       	ANDI.W	#$F800,D2
               S03:0001026A:  02 42 F8 00
F00:0298       	BEQ	.down2
               S03:0001026E:  67 06
F00:0299       	BSR	se_scroll_up
               S03:00010270:  61 00 FF 20
F00:0300       	BRA	.end
               S03:00010274:  60 64
F00:0301       .down2	MOVE.W	D1,cursor_pos		; store new value
               S03:00010276:  31 C1 04 02
F00:0302       	BRA	.end
               S03:0001027A:  60 5E
F00:0303       
F00:0304       .right	ADDI.W	#$1,D1			; cursor right
               S03:0001027C:  52 41
F00:0305       	;ANDI.W	#$7FF,D1
F00:0306       	MOVE.W	D1,D2
               S03:0001027E:  34 01
F00:0307       	ANDI.W	#$F800,D2
               S03:00010280:  02 42 F8 00
F00:0308       	BEQ	.right2
               S03:00010284:  67 08
F00:0309       	BSR	se_scroll_up
               S03:00010286:  61 00 FF 0A
F00:0310       	SUBI.W	#$40,D1
               S03:0001028A:  04 41 00 40
F00:0311       .right2	MOVE.W	D1,cursor_pos
               S03:0001028E:  31 C1 04 02
F00:0312       	BRA	.end
               S03:00010292:  60 46
F00:0313       
F00:0314       .up	SUBI.W	#$40,D1			; cursor up
               S03:00010294:  04 41 00 40
F00:0315       	BMI	.end			; stop if cursor out of screen, don't store position
               S03:00010298:  6B 40
F00:0316       	ANDI.W	#$7FF,D1
               S03:0001029A:  02 41 07 FF
F00:0317       	MOVE.W	D1,cursor_pos
               S03:0001029E:  31 C1 04 02
F00:0318       	BRA	.end
               S03:000102A2:  60 36
F00:0319       
F00:0320       .left	SUBI.W	#$1,D1			; cursor left
               S03:000102A4:  53 41
F00:0321       	BMI	.end			; stop if cursor out of screen, don't store position
               S03:000102A6:  6B 32
F00:0322       	ANDI.W	#$7FF,D1
               S03:000102A8:  02 41 07 FF
F00:0323       	MOVE.W	D1,cursor_pos
               S03:000102AC:  31 C1 04 02
F00:0324       	BRA	.end
               S03:000102B0:  60 28
F00:0325       
F00:0326       .bs	SUBI.W	#$1,D1			; backspace
               S03:000102B2:  53 41
F00:0327       	BMI	.end			; stop if cursor out of screen, don't store position
               S03:000102B4:  6B 24
F00:0328       	ANDI.W	#$7FF,D1
               S03:000102B6:  02 41 07 FF
F00:0329       	MOVE.W	D1,cursor_pos		; store the new cursor position
               S03:000102BA:  31 C1 04 02
F00:0330       .bs1	MOVE.W	D1,D3
               S03:000102BE:  36 01
F00:0331       	ADDQ	#$1,D3
               S03:000102C0:  52 43
F00:0332       	ANDI.W	#%0000000000111111,D3	; are we at positon $3f?
               S03:000102C2:  02 43 00 3F
F00:0333       	BNE	.bs2			; not yet
               S03:000102C6:  66 08
F00:0334       	MOVE.B	#ASCII_SPACE,(A0,D1)	; yes, place a space character
               S03:000102C8:  11 BC 00 20 10 00
F00:0335       	BRA	.end
               S03:000102CE:  60 0A
F00:0336       .bs2	MOVE.B	$1(A0,D1),(A0,D1)
               S03:000102D0:  11 B0 10 01 10 00
F00:0337       	ADDQ	#$1,D1
               S03:000102D6:  52 41
F00:0338       	BRA	.bs1
               S03:000102D8:  60 E4
F00:0339       
F00:0340       .end	MOVEM.L	(SP)+,D0-D3/A0-A2	; restore registers, including original ascii in D0
               S03:000102DA:  4C DF 07 0F
F00:0341       	RTS
               S03:000102DE:  4E 75
F00:0342       
F00:0343       
F00:0344       put_string
F00:0345       
F00:0346       	;
F00:0347       	; put_string expects a pointer to a string in A0
F00:0348       	;
F00:0349       
F00:0350       	MOVEM.L	A0/D0,-(SP)
               S03:000102E0:  48 E7 80 80
F00:0351       
F00:0352       .start	MOVE.B	(A0)+,D0	; move ascii value into D0, and move pointer to next char
               S03:000102E4:  10 18
F00:0353       	BEQ	.end
               S03:000102E6:  67 06
F00:0354       	BSR	put_char	; no, put char
               S03:000102E8:  61 00 FE E8
F00:0355       	BRA	.start
               S03:000102EC:  60 F6
F00:0356       
F00:0357       .end	MOVEM.L	(SP)+,A0/D0
               S03:000102EE:  4C DF 01 01
F00:0358       	RTS
               S03:000102F2:  4E 75
F00:0359       
F00:0360       
F00:0361       ; fake exception handler
F00:0362       
F00:0363       exception_handler
F00:0364       
F00:0365       	MOVE.L	D0,-(SP)
               S03:000102F4:  2F 00
F00:0366       	MOVE.L	#$DEADBEEF,D0
               S03:000102F6:  20 3C DE AD BE EF
F00:0367       	MOVE.L	(SP)+,D0
               S03:000102FC:  20 1F
F00:0368       	RTE
               S03:000102FE:  4E 73
F00:0369       
F00:0370       
F00:0371       ; level 2 interrupt autovector (vicv start of vblank)
F00:0372       
F00:0373       interrupt_2_autovector
F00:0374       
F00:0375       	MOVE.B	#%00000001,VICV_ISR				; acknowledge VBLANK interrupt
               S03:00010300:  13 FC 00 01 00 FF 04 0E
F00:0376       
F00:0377       	MOVE.B	#%00000001,VICV_BUFFERSWAP			; switch front- and backbuffer
               S03:00010308:  13 FC 00 01 00 FF 04 10
F00:0378       
F00:0379       	MOVE.B	#%00000001,BLITTER_CONTROL			; clear the backbuffer
               S03:00010310:  13 FC 00 01 00 FF 07 00
F00:0380       
F00:0381       	; add the blits (to be replaced by a kernel linked list)
F00:0382       	MOVE.L	#kernel_text_scr,BLITTER_DATA_32_BIT
               S03:00010318:  23 FC 00 00 04 20 00 FF 07 02
F00:0383       	MOVE.B	#%00000010,BLITTER_CONTROL
               S03:00010322:  13 FC 00 02 00 FF 07 00
F00:0384       
F00:0385       	RTE
               S03:0001032A:  4E 73
F00:0386       
F00:0387       
F00:0388       ; level 4 interrupt autovector (timer)
F00:0389       
F00:0390       interrupt_4_autovector
F00:0391       
F00:0392       	MOVE.L	A0,-(SP)		; save a0
               S03:0001032C:  2F 08
F00:0393       timer0_check
F00:0394       	BTST	#0,TIMER_BASE		; did timer 0 cause the interrupt?
               S03:0001032E:  08 39 00 00 00 FF 06 00
F00:0395       	BEQ	timer1_check		; no, go to next timer
               S03:00010336:  67 0E
F00:0396       	MOVE.B	#%00000001,TIMER_BASE	; yes, acknowledge interrupt
               S03:00010338:  13 FC 00 01 00 FF 06 00
F00:0397       	MOVEA.L	timer0_vector,A0
               S03:00010340:  20 78 04 08
F00:0398       	JMP	(A0)
               S03:00010344:  4E D0
F00:0399       timer1_check
F00:0400       	BTST	#1,TIMER_BASE
               S03:00010346:  08 39 00 01 00 FF 06 00
F00:0401       	BEQ	timer2_check
               S03:0001034E:  67 0E
F00:0402       	MOVE.B	#%00000010,TIMER_BASE
               S03:00010350:  13 FC 00 02 00 FF 06 00
F00:0403       	MOVEA.L	timer1_vector,A0
               S03:00010358:  20 78 04 0C
F00:0404       	JMP	(A0)
               S03:0001035C:  4E D0
F00:0405       timer2_check
F00:0406       	BTST	#2,TIMER_BASE		; did timer 2 cause the interrupt?
               S03:0001035E:  08 39 00 02 00 FF 06 00
F00:0407       	BEQ	timer3_check		; no, go to next timer
               S03:00010366:  67 0E
F00:0408       	MOVE.B	#%00000100,TIMER_BASE	; yes, acknowledge interrupt
               S03:00010368:  13 FC 00 04 00 FF 06 00
F00:0409       	MOVEA.L	timer2_vector,A0
               S03:00010370:  20 78 04 10
F00:0410       	JMP	(A0)
               S03:00010374:  4E D0
F00:0411       timer3_check
F00:0412       	BTST	#3,TIMER_BASE
               S03:00010376:  08 39 00 03 00 FF 06 00
F00:0413       	BEQ	timer_finish		; no, go to timer finish
               S03:0001037E:  67 0E
F00:0414       	MOVE.B	#%00001000,TIMER_BASE	; yes, acknowledge
               S03:00010380:  13 FC 00 08 00 FF 06 00
F00:0415       	MOVEA.L	timer3_vector,A0
               S03:00010388:  20 78 04 14
F00:0416       	JMP	(A0)
               S03:0001038C:  4E D0
F00:0417       timer_finish
F00:0418       	MOVE.L	(SP)+,A0		; restore a0
               S03:0001038E:  20 5F
F00:0419       	RTE
               S03:00010390:  4E 73
F00:0420       
F00:0421       
F00:0422       ; level 5 interrupt autovector
F00:0423       
F00:0424       interrupt_5_autovector
F00:0425       
F00:0426       	MOVE.L	A0,-(SP)
               S03:00010392:  2F 08
F00:0427       	MOVE.L	(SP)+,A0
               S03:00010394:  20 5F
F00:0428       	RTE
               S03:00010396:  4E 73
F00:0429       
F00:0430       
F00:0431       ; level 6 interrupt autovector
F00:0432       
F00:0433       interrupt_6_autovector
F00:0434       
F00:0435       	RTE
               S03:00010398:  4E 73
F00:0436       
F00:0437       
F00:0438       ; level 7 interrupt autovector
F00:0439       
F00:0440       interrupt_7_autovector
F00:0441       
F00:0442       	RTE
               S03:0001039A:  4E 73
F00:0443       
F00:0444       
F00:0445       timer0_handler
F00:0446       
F00:0447       	; cursor flash
F00:0448       	MOVEM.L	D0/A0,-(SP)
               S03:0001039C:  48 E7 80 80
F00:0449       
F00:0450       	BTST.B	#$0,se_crs_blink
               S03:000103A0:  08 38 00 00 04 40
F00:0451       	BEQ	.end
               S03:000103A6:  67 1C
F00:0452       
F00:0453       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:000103A8:  20 79 00 FF 04 04
F00:0454       	MOVE.W	cursor_pos,D0
               S03:000103AE:  30 38 04 02
F00:0455       	SUBQ.B	#$1,se_crs_cntdwn
               S03:000103B2:  53 38 04 41
F00:0456       	BNE	.end
               S03:000103B6:  66 0C
F00:0457       	EORI.B	#%10000000,(A0,D0)
               S03:000103B8:  0A 30 00 80 00 00
F00:0458       	MOVE.B	se_crs_interval,se_crs_cntdwn
               S03:000103BE:  11 F8 04 42 04 41
F00:0459       
F00:0460       .end	MOVEM.L	(SP)+,D0/A0
               S03:000103C4:  4C DF 01 01
F00:0461       	BRA	timer1_check
               S03:000103C8:  60 00 FF 7C
F00:0462       
F00:0463       
F00:0464       timer1_handler
F00:0465       
F00:0466       	;
F00:0467       	BRA	timer2_check
               S03:000103CC:  60 90
F00:0468       
F00:0469       
F00:0470       timer2_handler
F00:0471       
F00:0472       	;
F00:0473       	BRA	timer3_check
               S03:000103CE:  60 A6
F00:0474       
F00:0475       
F00:0476       timer3_handler
F00:0477       
F00:0478       	;
F00:0479       	BRA	timer_finish
               S03:000103D0:  60 BC
F00:0480       
F00:0481       
F00:0482       blockfill_bytes
F00:0483       
F00:0484       	;
F00:0485       	;	Arguments
F00:0486       	;
F00:0487       	;	A0	start address
F00:0488       	;	D0	number of bytes
F00:0489       	;	D1	byte value
F00:0490       	;
F00:0491       
F00:0492       	MOVE.L	D2,-(SP)	; save D2
               S03:000103D2:  2F 02
F00:0493       
F00:0494       	MOVEQ	#$0,D2
               S03:000103D4:  74 00
F00:0495       
F00:0496       .1	MOVE.B	D1,(A0,D2.L)
               S03:000103D6:  11 81 28 00
F00:0497       	ADDQ	#$1,D2
               S03:000103DA:  52 42
F00:0498       	CMP.L	D2,D0
               S03:000103DC:  B0 82
F00:0499       	BNE	.1
               S03:000103DE:  66 F6
F00:0500       
F00:0501       	MOVE.L	(SP)+,D2
               S03:000103E0:  24 1F
F00:0502       	RTS
               S03:000103E2:  4E 75
F00:0503       
F00:0504       blockfill_words
F00:0505       
F00:0506       	;
F00:0507       	;	Arguments
F00:0508       	;
F00:0509       	;	A0	start address
F00:0510       	;	D0	number of words
F00:0511       	;	D1	word value
F00:0512       	;
F00:0513       
F00:0514       	MOVEM.L	D0/D2,-(SP)
               S03:000103E4:  48 E7 A0 00
F00:0515       
F00:0516       	MOVEQ	#$0,D2
               S03:000103E8:  74 00
F00:0517       	LSL.L	#$1,D0
               S03:000103EA:  E3 88
F00:0518       
F00:0519       .1	MOVE.W	D1,(A0,D2.L)
               S03:000103EC:  31 81 28 00
F00:0520       	ADDQ.L	#$2,D2
               S03:000103F0:  54 82
F00:0521       	CMP.L	D2,D0
               S03:000103F2:  B0 82
F00:0522       	BNE	.1
               S03:000103F4:  66 F6
F00:0523       
F00:0524       	MOVEM.L	(SP)+,D0/D2
               S03:000103F6:  4C DF 00 05
F00:0525       	RTS
               S03:000103FA:  4E 75
F00:0526       
F00:0527       memcopy
F00:0528       
F00:0529       	;
F00:0530       	;	bytewise memory copy - probably slow?
F00:0531       	;
F00:0532       	;	Arguments
F00:0533       	;
F00:0534       	;	A0	source_start_address
F00:0535       	;	D0	no_of_bytes
F00:0536       	;	A1	destination_start_address
F00:0537       	;
F00:0538       
F00:0539       	MOVE.L	D1,-(SP)
               S03:000103FC:  2F 01
F00:0540       	MOVEQ	#$0,D1
               S03:000103FE:  72 00
F00:0541       .1	MOVE.B	(A0,D1.L),(A1,D1.L)
               S03:00010400:  13 B0 18 00 18 00
F00:0542       	ADDQ.L	#$1,D1
               S03:00010406:  52 81
F00:0543       	CMP.L	D1,D0
               S03:00010408:  B0 81
F00:0544       	BNE	.1
               S03:0001040A:  66 F4
F00:0545       
F00:0546       	MOVE.L	(SP)+,D1
               S03:0001040C:  22 1F
F00:0547       	RTS
               S03:0001040E:  4E 75
F00:0548       
F00:0549       
F00:0550       copy_charrom_to_charram
F00:0551       
F00:0552       	; Copy char rom to ram (go from 2k to 32k)
F00:0553       	; Note: this is a very special copy routine
F00:0554       	; that expands a charset from 1 bit into 16 bit
F00:0555       	; format.
F00:0556       	;
F00:0557       	;	Register Usage
F00:0558       	;
F00:0559       	;	D0	current_byte, holds a byte from the original rom charset
F00:0560       	;	D1	i, counter from 7 to 0 (8 bits per byte have to be processed)
F00:0561       	;	A0	*char_ram, pointer
F00:0562       	;	A1	*char_rom, pointer
F00:0563       	;
F00:0564       	MOVEM.L	D0-D1/A0-A1,-(SP)
               S03:00010410:  48 E7 C0 C0
F00:0565       
F00:0566       	MOVEQ	#0,D0			;    current_byte = 0;
               S03:00010414:  70 00
F00:0567       	LEA	CHAR_RAM,A0		;    char_ram = CHAR_RAM;
               S03:00010416:  41 F9 00 F1 00 00
F00:0568       	LEA	CHAR_ROM,A1		;    char_rom = CHAR_ROM;
               S03:0001041C:  43 F9 00 FE 00 00
F00:0569       
F00:0570       .1	CMPA.L	#CHAR_ROM+$800,A1	;    while(char_ram != CHAR_ROM+$800)
               S03:00010422:  B3 FC 00 FE 08 00
F00:0571       	BEQ	.5			;    {   //	branch to end of compound statement
               S03:00010428:  67 1C
F00:0572       					;        // load a byte from charset and incr pntr
F00:0573       	MOVE.B	(A1)+,D0		;        current_byte = char_rom++;
               S03:0001042A:  10 19
F00:0574       	MOVEQ	#8,D1			;        i = 8;
               S03:0001042C:  72 08
F00:0575       .2	BTST	#$7,D0
               S03:0001042E:  08 00 00 07
F00:0576       	BEQ	.3			;    bit 7 not set
               S03:00010432:  67 06
F00:0577       	MOVE.W	#C64_GREY,(A0)+		;    bit 7 is set, so set color
               S03:00010434:  30 FC F7 77
F00:0578       	BRA	.4
               S03:00010438:  60 04
F00:0579       .3	MOVE.W	#$0000,(A0)+		;    bit 7 not set, make empty
               S03:0001043A:  30 FC 00 00
F00:0580       .4	LSL.B	#$01,D0			;    move all the bits one place to the left
               S03:0001043E:  E3 08
F00:0581       	SUBQ	#$01,D1			;    i = i - 1;
               S03:00010440:  53 41
F00:0582       	BEQ	.1			;    did i reach zero? goto .1
               S03:00010442:  67 DE
F00:0583       	BRA	.2
               S03:00010444:  60 E8
F00:0584       					;    }
F00:0585       .5	MOVEM.L	(SP)+,D0-D1/A0-A1
               S03:00010446:  4C DF 03 03
F00:0586       	RTS
               S03:0001044A:  4E 75
F00:0587       
F00:0588       
F00:0589       setup_vector_table
F00:0590       
F00:0591       	LEA	exception_handler,A0
               S03:0001044C:  41 FA FE A6
F00:0592       	MOVE.L	A0,vec_04_illegal_instruction
               S03:00010450:  21 C8 00 10
F00:0593       	MOVE.L	A0,vec_10_unimpl_instruction
               S03:00010454:  21 C8 00 28
F00:0594       	MOVE.L	A0,vec_11_unimpl_instruction
               S03:00010458:  21 C8 00 2C
F00:0595       
F00:0596       	LEA	interrupt_2_autovector,A0
               S03:0001045C:  41 FA FE A2
F00:0597       	MOVE.L	A0,vec_26_level2_irq_autovect
               S03:00010460:  21 C8 00 68
F00:0598       
F00:0599       	LEA	interrupt_4_autovector,A0
               S03:00010464:  41 FA FE C6
F00:0600       	MOVE.L	A0,vec_28_level4_irq_autovect
               S03:00010468:  21 C8 00 70
F00:0601       
F00:0602       	LEA	interrupt_5_autovector,A0
               S03:0001046C:  41 FA FF 24
F00:0603       	MOVE.L	A0,vec_29_level5_irq_autovect
               S03:00010470:  21 C8 00 74
F00:0604       
F00:0605       	LEA	interrupt_6_autovector,A0
               S03:00010474:  41 FA FF 22
F00:0606       	MOVE.L	A0,vec_30_level6_irq_autovect
               S03:00010478:  21 C8 00 78
F00:0607       
F00:0608       	LEA	interrupt_7_autovector,A0
               S03:0001047C:  41 FA FF 1C
F00:0609       	MOVE.L	A0,vec_31_level7_irq_autovect
               S03:00010480:  21 C8 00 7C
F00:0610       
F00:0611       	LEA	timer0_handler,A0
               S03:00010484:  41 FA FF 16
F00:0612       	MOVE.L	A0,timer0_vector
               S03:00010488:  21 C8 04 08
F00:0613       
F00:0614       	LEA	timer1_handler,A0
               S03:0001048C:  41 FA FF 3E
F00:0615       	MOVE.L	A0,timer1_vector
               S03:00010490:  21 C8 04 0C
F00:0616       
F00:0617       	LEA	timer2_handler,A0
               S03:00010494:  41 FA FF 38
F00:0618       	MOVE.L	A0,timer2_vector
               S03:00010498:  21 C8 04 10
F00:0619       
F00:0620       	LEA	timer3_handler,A0
               S03:0001049C:  41 FA FF 32
F00:0621       	MOVE.L	A0,timer3_vector
               S03:000104A0:  21 C8 04 14
F00:0622       
F00:0623       	RTS
               S03:000104A4:  4E 75
F00:0624       
F00:0625       
F00:0626       reset_sids
F00:0627       
F00:0628       	MOVEM.L	D0-D1/A0,-(SP)
               S03:000104A6:  48 E7 C0 80
F00:0629       
F00:0630       	LEA	SOUND_BASE,A0
               S03:000104AA:  41 F9 00 FF 05 00
F00:0631       	MOVE.L	#$100,D0
               S03:000104B0:  20 3C 00 00 01 00
F00:0632       	MOVE.B	#$00,D1
               S03:000104B6:  12 3C 00 00
F00:0633       	JSR	blockfill_bytes
               S03:000104BA:  61 00 FF 16
F00:0634       
F00:0635       	; max volume for both sids
F00:0636       	MOVE.B	#$0F,SID0_VOLUME
               S03:000104BE:  13 FC 00 0F 00 FF 05 18
F00:0637       	MOVE.B	#$0F,SID1_VOLUME
               S03:000104C6:  13 FC 00 0F 00 FF 05 38
F00:0638       
F00:0639       	LEA	SOUND_BASE,A0
               S03:000104CE:  41 F9 00 FF 05 00
F00:0640       	MOVE.B	#$FF,D0
               S03:000104D4:  10 3C 00 FF
F00:0641       	MOVE.B	D0,SID0_LEFT		; left channel mix
               S03:000104D8:  13 C0 00 FF 05 80
F00:0642       	MOVE.B	D0,SID0_RGHT		; right channel mix
               S03:000104DE:  13 C0 00 FF 05 81
F00:0643       	MOVE.B	D0,SID1_LEFT		; left channel mix
               S03:000104E4:  13 C0 00 FF 05 82
F00:0644       	MOVE.B	D0,SID1_RGHT		; right channel mix
               S03:000104EA:  13 C0 00 FF 05 83
F00:0645       
F00:0646       	MOVEM.L	(SP)+,D0-D1/A0
               S03:000104F0:  4C DF 01 03
F00:0647       
F00:0648       	RTS
               S03:000104F4:  4E 75
F00:0649       
F00:0650       
F00:0651       se_activate_cursor
F00:0652       	MOVEM.L	D0/A0-A1,-(SP)
               S03:000104F6:  48 E7 80 C0
F00:0653       
F00:0654       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:000104FA:  20 79 00 FF 04 04
F00:0655       	MOVEA.L	VICV_COL,A1
               S03:00010500:  22 79 00 FF 04 08
F00:0656       	MOVE.W	cursor_pos,D0
               S03:00010506:  30 38 04 02
F00:0657       	MOVE.B	(A0,D0),se_orig_char
               S03:0001050A:  11 F0 00 00 04 43
F00:0658       	EORI.B	#%10000000,(A0,D0)
               S03:00010510:  0A 30 00 80 00 00
F00:0659       	MOVE.B	se_crs_interval,se_crs_cntdwn
               S03:00010516:  11 F8 04 42 04 41
F00:0660       	MOVE.B	#$1,se_crs_blink	; turn on cursor flash
               S03:0001051C:  11 FC 00 01 04 40
F00:0661       
F00:0662       	MOVEM.L	(SP)+,D0/A0-A1
               S03:00010522:  4C DF 03 01
F00:0663       	RTS
               S03:00010526:  4E 75
F00:0664       
F00:0665       se_deactivate_cursor
F00:0666       	MOVEM.L	D0/A0-A1,-(SP)
               S03:00010528:  48 E7 80 C0
F00:0667       
F00:0668       	MOVE.B	#$0,se_crs_blink	; turn off cursor flash
               S03:0001052C:  11 FC 00 00 04 40
F00:0669       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S03:00010532:  20 79 00 FF 04 04
F00:0670       	MOVEA.L	VICV_COL,A1
               S03:00010538:  22 79 00 FF 04 08
F00:0671       	MOVE.W	cursor_pos,D0
               S03:0001053E:  30 38 04 02
F00:0672       	MOVE.B	se_orig_char,(A0,D0)
               S03:00010542:  11 B8 04 43 00 00
F00:0673       
F00:0674       	MOVEM.L	(SP)+,D0/A0-A1
               S03:00010548:  4C DF 03 01
F00:0675       	RTS
               S03:0001054C:  4E 75
F00:0676       
F00:0677       ; kernel text screen blit desciption (rom description, copied to kernel ram area, also 32 byte aligned)
F00:0678       
F00:0679       	ALIGN	5
F00:0680       screen_blit_structure
F00:0681       	DC.B	%00001000	; flags 0 - tile mode, simple color, color per tile
               S03:00010560:  08
F00:0682       	DC.B	%00000000	; flags 1 - no stretching, mirroring etc
               S03:00010561:  00
F00:0683       	DC.B	%01010110	; height 2^%101 = 32 chars = 256 pixels, width 2^%110 = 64 chars  = 512 pixels
               S03:00010562:  56
F00:0684       	DC.B	%00000000	; currently unused.... :-)
               S03:00010563:  00
F00:0685       	DC.W	$0		; x (0)
               S03:00010564:  00 00
F00:0686       	DC.W	$10		; y (16)
               S03:00010566:  00 10
F00:0687       	DC.W	$F0A0		; foreground color
               S03:00010568:  F0 A0
F00:0688       	DC.W	$F222		; background color
               S03:0001056A:  F2 22
F00:0689       	DC.L	CHAR_RAM	; pixel_data
               S03:0001056C:  00 F1 00 00
F00:0690       	DC.L	$F00000		; character_data
               S03:00010570:  00 F0 00 00
F00:0691       	DC.L	$F00800		; character_color_data
               S03:00010574:  00 F0 08 00
F00:0692       	DC.L	$FF0000		; background_color_data
               S03:00010578:  00 FF 00 00
F00:0693       	DC.L	$0		; user_data
               S03:0001057C:  00 00 00 00
F00:0694       
F00:0695       
F00:0696       ; string data
F00:0697       
F00:0698       welcome
F00:0699       	DC.B	"E64-II (C)2019-2020 kernel 0.2.20200915",ASCII_LF,ASCII_LF,ASCII_NULL
               S03:00010580:  45 36 34 2D 49 49 20 28 43 29 32 30 31 39 2D 32
               S03:00010590:  30 32 30 20 6B 65 72 6E 65 6C 20 30 2E 32 2E 32
               S03:000105A0:  0A
               S03:000105A1:  0A
               S03:000105A2:  00
F00:0700       
F00:0701       	ALIGN	1
F00:0702       
F00:0703       	INCLUDE	"kernel_tables.s"
F02:0001       ; rom tables
F02:0002       
F02:0003       ascii_to_screencode
F02:0004       	DC.B	$80		; 0x00 - NUL	non printable character
               S03:000105AA:  80
F02:0005       	DC.B	$80		; 0x01 - SOH	non printable character
               S03:000105AB:  80
F02:0006       	DC.B	$80		; 0x02 - STX	non printable character
               S03:000105AC:  80
F02:0007       	DC.B	$80		; 0x03 - ETX	non printable character
               S03:000105AD:  80
F02:0008       	DC.B	$80		; 0x04 - EOT	non printable character
               S03:000105AE:  80
F02:0009       	DC.B	$80		; 0x05 - ENQ	non printable character
               S03:000105AF:  80
F02:0010       	DC.B	$80		; 0x06 - ACK	non printable character
               S03:000105B0:  80
F02:0011       	DC.B	$80		; 0x07 - BEL	non printable character
               S03:000105B1:  80
F02:0012       	DC.B	$80		; 0x08 - BS	non printable character
               S03:000105B2:  80
F02:0013       	DC.B	$80		; 0x09 - TAB	non printable character
               S03:000105B3:  80
F02:0014       	DC.B	$80		; 0x0A - LF	non printable character
               S03:000105B4:  80
F02:0015       	DC.B	$80		; 0x0B - VT	non printable character
               S03:000105B5:  80
F02:0016       	DC.B	$80		; 0x0C - FF	non printable character
               S03:000105B6:  80
F02:0017       	DC.B	$80		; 0x0D - CR	non printable character
               S03:000105B7:  80
F02:0018       	DC.B	$80		; 0x0E - SO	non printable character
               S03:000105B8:  80
F02:0019       	DC.B	$80		; 0x0F - SI	non printable character
               S03:000105B9:  80
F02:0020       	DC.B	$80		; 0x10 - DLE	non printable character
               S03:000105BA:  80
F02:0021       	DC.B	$80		; 0x11 - DC1	non printable character
               S03:000105BB:  80
F02:0022       	DC.B	$80		; 0x12 - DC2	non printable character
               S03:000105BC:  80
F02:0023       	DC.B	$80		; 0x13 - DC3	non printable character
               S03:000105BD:  80
F02:0024       	DC.B	$80		; 0x14 - DC4	non printable character
               S03:000105BE:  80
F02:0025       	DC.B	$80		; 0x15 - NAC	non printable character
               S03:000105BF:  80
F02:0026       	DC.B	$80		; 0x16 - SYN	non printable character
               S03:000105C0:  80
F02:0027       	DC.B	$80		; 0x17 - ETB	non printable character
               S03:000105C1:  80
F02:0028       	DC.B	$80		; 0x18 - CAN	non printable character
               S03:000105C2:  80
F02:0029       	DC.B	$80		; 0x19 - EM	non printable character
               S03:000105C3:  80
F02:0030       	DC.B	$80		; 0x1A - SUB	non printable character
               S03:000105C4:  80
F02:0031       	DC.B	$80		; 0x1B - ESC	non printable character
               S03:000105C5:  80
F02:0032       	DC.B	$80		; 0x1C - FS	non printable character
               S03:000105C6:  80
F02:0033       	DC.B	$80		; 0x1D - GS	non printable character
               S03:000105C7:  80
F02:0034       	DC.B	$80		; 0x1E - RS	non printable character
               S03:000105C8:  80
F02:0035       	DC.B	$80		; 0x1F - US	non printable character
               S03:000105C9:  80
F02:0036       	DC.B	$20		; 0x20 - (space)
               S03:000105CA:  20
F02:0037       	DC.B	$21		; 0x21 - !
               S03:000105CB:  21
F02:0038       	DC.B	$22		; 0x22 - "
               S03:000105CC:  22
F02:0039       	DC.B	$23		; 0x23 - #
               S03:000105CD:  23
F02:0040       	DC.B	$24		; 0x24 - $
               S03:000105CE:  24
F02:0041       	DC.B	$25		; 0x25 - %
               S03:000105CF:  25
F02:0042       	DC.B	$26		; 0x26 - &
               S03:000105D0:  26
F02:0043       	DC.B	$27		; 0x27 - '
               S03:000105D1:  27
F02:0044       	DC.B	$28		; 0x28 - (
               S03:000105D2:  28
F02:0045       	DC.B	$29		; 0x29 - )
               S03:000105D3:  29
F02:0046       	DC.B	$2A		; 0x2A - *
               S03:000105D4:  2A
F02:0047       	DC.B	$2B		; 0x2B - +
               S03:000105D5:  2B
F02:0048       	DC.B	$2C		; 0x2C - ,
               S03:000105D6:  2C
F02:0049       	DC.B	$2D		; 0x2D - -
               S03:000105D7:  2D
F02:0050       	DC.B	$2E		; 0x2E - .
               S03:000105D8:  2E
F02:0051       	DC.B	$2F		; 0x2F - /
               S03:000105D9:  2F
F02:0052       	DC.B	$30		; 0x30 - 0
               S03:000105DA:  30
F02:0053       	DC.B	$31		; 0x31 - 1
               S03:000105DB:  31
F02:0054       	DC.B	$32		; 0x32 - 2
               S03:000105DC:  32
F02:0055       	DC.B	$33		; 0x33 - 3
               S03:000105DD:  33
F02:0056       	DC.B	$34		; 0x34 - 4
               S03:000105DE:  34
F02:0057       	DC.B	$35		; 0x35 - 5
               S03:000105DF:  35
F02:0058       	DC.B	$36		; 0x36 - 6
               S03:000105E0:  36
F02:0059       	DC.B	$37		; 0x37 - 7
               S03:000105E1:  37
F02:0060       	DC.B	$38		; 0x38 - 8
               S03:000105E2:  38
F02:0061       	DC.B	$39		; 0x39 - 9
               S03:000105E3:  39
F02:0062       	DC.B	$3A		; 0x3A - :
               S03:000105E4:  3A
F02:0063       	DC.B	$3B		; 0x3B - ;
               S03:000105E5:  3B
F02:0064       	DC.B	$3C		; 0x3C - <
               S03:000105E6:  3C
F02:0065       	DC.B	$3D		; 0x3D - =
               S03:000105E7:  3D
F02:0066       	DC.B	$3E		; 0x3E - >
               S03:000105E8:  3E
F02:0067       	DC.B	$3F		; 0x3F - ?
               S03:000105E9:  3F
F02:0068       	DC.B	$00		; 0x40 - @
               S03:000105EA:  00
F02:0069       	DC.B	$41		; 0x41 - A
               S03:000105EB:  41
F02:0070       	DC.B	$42		; 0x42 - B
               S03:000105EC:  42
F02:0071       	DC.B	$43		; 0x43 - C
               S03:000105ED:  43
F02:0072       	DC.B	$44		; 0x44 - D
               S03:000105EE:  44
F02:0073       	DC.B	$45		; 0x45 - E
               S03:000105EF:  45
F02:0074       	DC.B	$46		; 0x46 - F
               S03:000105F0:  46
F02:0075       	DC.B	$47		; 0x47 - G
               S03:000105F1:  47
F02:0076       	DC.B	$48		; 0x48 - H
               S03:000105F2:  48
F02:0077       	DC.B	$49		; 0x49 - I
               S03:000105F3:  49
F02:0078       	DC.B	$4A		; 0x4A - J
               S03:000105F4:  4A
F02:0079       	DC.B	$4B		; 0x4B - K
               S03:000105F5:  4B
F02:0080       	DC.B	$4C		; 0x4C - L
               S03:000105F6:  4C
F02:0081       	DC.B	$4D		; 0x4D - M
               S03:000105F7:  4D
F02:0082       	DC.B	$4E		; 0x4E - N
               S03:000105F8:  4E
F02:0083       	DC.B	$4F		; 0x4F - O
               S03:000105F9:  4F
F02:0084       	DC.B	$50		; 0x50 - P
               S03:000105FA:  50
F02:0085       	DC.B	$51		; 0x51 - Q
               S03:000105FB:  51
F02:0086       	DC.B	$52		; 0x52 - R
               S03:000105FC:  52
F02:0087       	DC.B	$53		; 0x53 - S
               S03:000105FD:  53
F02:0088       	DC.B	$54		; 0x54 - T
               S03:000105FE:  54
F02:0089       	DC.B	$55		; 0x55 - U
               S03:000105FF:  55
F02:0090       	DC.B	$56		; 0x56 - V
               S03:00010600:  56
F02:0091       	DC.B	$57		; 0x57 - W
               S03:00010601:  57
F02:0092       	DC.B	$58		; 0x58 - X
               S03:00010602:  58
F02:0093       	DC.B	$59		; 0x59 - Y
               S03:00010603:  59
F02:0094       	DC.B	$5A		; 0x5A - Z
               S03:00010604:  5A
F02:0095       	DC.B	$1B		; 0x5B - [
               S03:00010605:  1B
F02:0096       	DC.B	$5C		; 0x5C - \	patched
               S03:00010606:  5C
F02:0097       	DC.B	$1D		; 0x5D - ]
               S03:00010607:  1D
F02:0098       	DC.B	$5E		; 0x5E - ^	patched
               S03:00010608:  5E
F02:0099       	DC.B	$5F		; 0x5F - _	patched
               S03:00010609:  5F
F02:0100       	DC.B	$63		; 0x60 - `	patched
               S03:0001060A:  63
F02:0101       	DC.B	$01		; 0x61 - a
               S03:0001060B:  01
F02:0102       	DC.B	$02		; 0x62 - b
               S03:0001060C:  02
F02:0103       	DC.B	$03		; 0x63 - c
               S03:0001060D:  03
F02:0104       	DC.B	$04		; 0x64 - d
               S03:0001060E:  04
F02:0105       	DC.B	$05		; 0x65 - e
               S03:0001060F:  05
F02:0106       	DC.B	$06		; 0x66 - f
               S03:00010610:  06
F02:0107       	DC.B	$07		; 0x67 - g
               S03:00010611:  07
F02:0108       	DC.B	$08		; 0x68 - h
               S03:00010612:  08
F02:0109       	DC.B	$09		; 0x69 - i
               S03:00010613:  09
F02:0110       	DC.B	$0A		; 0x6A - j
               S03:00010614:  0A
F02:0111       	DC.B	$0B		; 0x6B - k
               S03:00010615:  0B
F02:0112       	DC.B	$0C		; 0x6C - l
               S03:00010616:  0C
F02:0113       	DC.B	$0D		; 0x6D - m
               S03:00010617:  0D
F02:0114       	DC.B	$0E		; 0x6E - n
               S03:00010618:  0E
F02:0115       	DC.B	$0F		; 0x6F - o
               S03:00010619:  0F
F02:0116       	DC.B	$10		; 0x70 - p
               S03:0001061A:  10
F02:0117       	DC.B	$11		; 0x71 - q
               S03:0001061B:  11
F02:0118       	DC.B	$12		; 0x72 - r
               S03:0001061C:  12
F02:0119       	DC.B	$13		; 0x73 - s
               S03:0001061D:  13
F02:0120       	DC.B	$14		; 0x74 - t
               S03:0001061E:  14
F02:0121       	DC.B	$15		; 0x75 - u
               S03:0001061F:  15
F02:0122       	DC.B	$16		; 0x76 - v
               S03:00010620:  16
F02:0123       	DC.B	$17		; 0x77 - w
               S03:00010621:  17
F02:0124       	DC.B	$18		; 0x78 - x
               S03:00010622:  18
F02:0125       	DC.B	$19		; 0x79 - y
               S03:00010623:  19
F02:0126       	DC.B	$1A		; 0x7A - z
               S03:00010624:  1A
F02:0127       	DC.B	$64		; 0x7B - {	patched
               S03:00010625:  64
F02:0128       	DC.B	$65		; 0x7C - |	patched
               S03:00010626:  65
F02:0129       	DC.B	$66		; 0x7D - }	patched
               S03:00010627:  66
F02:0130       	DC.B	$67		; 0x7E - ~	patched
               S03:00010628:  67
F02:0131       	DC.B	$80		; 0x7F - DEL	non printable character
               S03:00010629:  80
F02:0132       
F02:0133       hex_table
F02:0134       	dc.b	'0123456789abcdef'
               S03:0001062A:  30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66
F02:0135       
F02:0136       ;	The following table is based on a SID clock frequency of 985248Hz (PAL)
F02:0137       ;	Calculations were made according to Codebase64 article
F02:0138       ;	https://codebase64.org/doku.php?id=base:how_to_calculate_your_own_sid_frequency_table
F02:0139       ;
F02:0140       	ALIGN	1
F02:0141       notes
F02:0142       	DC.W	$0116,$0127,$0139,$014B,$015F,$0174,$018A,$01A1,$01BA,$01D4,$01F0,$020E	; N_C0_ to N_B0_
               S03:0001063A:  01 16
               S03:0001063C:  01 27
               S03:0001063E:  01 39
               S03:00010640:  01 4B
               S03:00010642:  01 5F
               S03:00010644:  01 74
               S03:00010646:  01 8A
               S03:00010648:  01 A1
               S03:0001064A:  01 BA
               S03:0001064C:  01 D4
               S03:0001064E:  01 F0
               S03:00010650:  02 0E
F02:0143       	DC.W	$022D,$024E,$0271,$0296,$02BE,$02E7,$0314,$0342,$0374,$03A9,$03E0,$041B	; N_C1_ to N_B1_
               S03:00010652:  02 2D
               S03:00010654:  02 4E
               S03:00010656:  02 71
               S03:00010658:  02 96
               S03:0001065A:  02 BE
               S03:0001065C:  02 E7
               S03:0001065E:  03 14
               S03:00010660:  03 42
               S03:00010662:  03 74
               S03:00010664:  03 A9
               S03:00010666:  03 E0
               S03:00010668:  04 1B
F02:0144       	DC.W	$045A,$049C,$04E2,$052D,$057B,$05CF,$0627,$0685,$06E8,$0751,$07C1,$0837	; N_C2_ to N_B2_
               S03:0001066A:  04 5A
               S03:0001066C:  04 9C
               S03:0001066E:  04 E2
               S03:00010670:  05 2D
               S03:00010672:  05 7B
               S03:00010674:  05 CF
               S03:00010676:  06 27
               S03:00010678:  06 85
               S03:0001067A:  06 E8
               S03:0001067C:  07 51
               S03:0001067E:  07 C1
               S03:00010680:  08 37
F02:0145       	DC.W	$08B4,$0938,$09C4,$0A59,$0AF7,$0B9D,$0C4E,$0D0A,$0DD0,$0EA2,$0F81,$106D	; N_C3_ to N_B3_
               S03:00010682:  08 B4
               S03:00010684:  09 38
               S03:00010686:  09 C4
               S03:00010688:  0A 59
               S03:0001068A:  0A F7
               S03:0001068C:  0B 9D
               S03:0001068E:  0C 4E
               S03:00010690:  0D 0A
               S03:00010692:  0D D0
               S03:00010694:  0E A2
               S03:00010696:  0F 81
               S03:00010698:  10 6D
F02:0146       	DC.W	$1167,$1270,$1389,$14B2,$15ED,$173B,$189C,$1A13,$1BA0,$1D45,$1F02,$20DA	; N_C4_ to N_B4_
               S03:0001069A:  11 67
               S03:0001069C:  12 70
               S03:0001069E:  13 89
               S03:000106A0:  14 B2
               S03:000106A2:  15 ED
               S03:000106A4:  17 3B
               S03:000106A6:  18 9C
               S03:000106A8:  1A 13
               S03:000106AA:  1B A0
               S03:000106AC:  1D 45
               S03:000106AE:  1F 02
               S03:000106B0:  20 DA
F02:0147       	DC.W	$22CE,$24E0,$2711,$2964,$2BDA,$2E76,$3139,$3426,$3740,$3A89,$3E04,$41B4	; N_C5_ to N_B5_
               S03:000106B2:  22 CE
               S03:000106B4:  24 E0
               S03:000106B6:  27 11
               S03:000106B8:  29 64
               S03:000106BA:  2B DA
               S03:000106BC:  2E 76
               S03:000106BE:  31 39
               S03:000106C0:  34 26
               S03:000106C2:  37 40
               S03:000106C4:  3A 89
               S03:000106C6:  3E 04
               S03:000106C8:  41 B4
F02:0148       	DC.W	$459C,$49C0,$4E23,$52C8,$57B4,$5CEB,$6272,$684C,$6E80,$7512,$7C08,$8368	; N_C6_ to N_B6_
               S03:000106CA:  45 9C
               S03:000106CC:  49 C0
               S03:000106CE:  4E 23
               S03:000106D0:  52 C8
               S03:000106D2:  57 B4
               S03:000106D4:  5C EB
               S03:000106D6:  62 72
               S03:000106D8:  68 4C
               S03:000106DA:  6E 80
               S03:000106DC:  75 12
               S03:000106DE:  7C 08
               S03:000106E0:  83 68
F02:0149       	DC.W	$8B39,$9380,$9C45,$A590,$AF68,$B9D6,$C4E3,$D099,$DD00,$EA24,$F810	; N_C7_	to N_A7S
               S03:000106E2:  8B 39
               S03:000106E4:  93 80
               S03:000106E6:  9C 45
               S03:000106E8:  A5 90
               S03:000106EA:  AF 68
               S03:000106EC:  B9 D6
               S03:000106EE:  C4 E3
               S03:000106F0:  D0 99
               S03:000106F2:  DD 00
               S03:000106F4:  EA 24
               S03:000106F6:  F8 10
F02:0150       
F02:0151       ;notes_old
F02:0152       ;	dc.w	$0112,$0123,$0134,$0146,$015a,$016e,$0184,$018b,$01b3,$01cd,$01e9,$0206	; N_C0_ to N_B0_
F02:0153       ;	dc.w	$0225,$0245,$0268,$028c,$02b3,$02dc,$0308,$0336,$0367,$039b,$03d2,$040c	; N_C1_ to N_B1_
F02:0154       ;	dc.w	$0449,$048b,$04d0,$0519,$0567,$05b9,$0610,$066c,$06ce,$0735,$07a3,$0817	; N_C2_ to N_B2_
F02:0155       ;	dc.w	$0893,$0915,$099f,$0a32,$0acd,$0b72,$0c20,$0cd8,$0d9c,$0e6b,$0f46,$102f	; N_C3_ to N_B3_
F02:0156       ;	dc.w	$1125,$122a,$133f,$1464,$159a,$16e3,$183f,$1981,$1b38,$1cd6,$1e80,$205e	; N_C4_ to N_B4_
F02:0157       ;	dc.w	$224b,$2455,$267e,$28c8,$2b34,$2dc6,$307f,$3361,$366f,$39ac,$3d1a,$40bc	; N_C5_ to N_B5_
F02:0158       ;	dc.w	$4495,$48a9,$4cfc,$518f,$5669,$5b8c,$60fe,$6602,$6cdf,$7358,$7a34,$8178	; N_C6_ to N_B6_
F02:0159       ;	dc.w	$892b,$9153,$99f7,$a31f,$acd2,$b719,$c1fc,$cd85,$d9bd,$e6b0,$f467	; N_C7_	to N_A7S
F02:0160       
F02:0161       	ALIGN	1
F02:0162       test_table
F02:0163       	DC.B	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
               S03:000106F8:  00
               S03:000106F9:  01
               S03:000106FA:  02
               S03:000106FB:  03
               S03:000106FC:  04
               S03:000106FD:  05
               S03:000106FE:  06
               S03:000106FF:  07
               S03:00010700:  08
               S03:00010701:  09
               S03:00010702:  0A
               S03:00010703:  0B
               S03:00010704:  0C
               S03:00010705:  0D
               S03:00010706:  0E
               S03:00010707:  0F
F02:0164       	DC.B	$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
               S03:00010708:  10
               S03:00010709:  11
               S03:0001070A:  12
               S03:0001070B:  13
               S03:0001070C:  14
               S03:0001070D:  15
               S03:0001070E:  16
               S03:0001070F:  17
               S03:00010710:  18
               S03:00010711:  19
               S03:00010712:  1A
               S03:00010713:  1B
               S03:00010714:  1C
               S03:00010715:  1D
               S03:00010716:  1E
               S03:00010717:  1F
F02:0165       	DC.B	$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
               S03:00010718:  20
               S03:00010719:  21
               S03:0001071A:  22
               S03:0001071B:  23
               S03:0001071C:  24
               S03:0001071D:  25
               S03:0001071E:  26
               S03:0001071F:  27
               S03:00010720:  28
               S03:00010721:  29
               S03:00010722:  2A
               S03:00010723:  2B
               S03:00010724:  2C
               S03:00010725:  2D
               S03:00010726:  2E
               S03:00010727:  2F
F02:0166       	DC.B	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
               S03:00010728:  30
               S03:00010729:  31
               S03:0001072A:  32
               S03:0001072B:  33
               S03:0001072C:  34
               S03:0001072D:  35
               S03:0001072E:  36
               S03:0001072F:  37
               S03:00010730:  38
               S03:00010731:  39
               S03:00010732:  3A
               S03:00010733:  3B
               S03:00010734:  3C
               S03:00010735:  3D
               S03:00010736:  3E
               S03:00010737:  3F
F02:0167       	DC.B	$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
               S03:00010738:  40
               S03:00010739:  41
               S03:0001073A:  42
               S03:0001073B:  43
               S03:0001073C:  44
               S03:0001073D:  45
               S03:0001073E:  46
               S03:0001073F:  47
               S03:00010740:  48
               S03:00010741:  49
               S03:00010742:  4A
               S03:00010743:  4B
               S03:00010744:  4C
               S03:00010745:  4D
               S03:00010746:  4E
               S03:00010747:  4F
F02:0168       	DC.B	$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
               S03:00010748:  50
               S03:00010749:  51
               S03:0001074A:  52
               S03:0001074B:  53
               S03:0001074C:  54
               S03:0001074D:  55
               S03:0001074E:  56
               S03:0001074F:  57
               S03:00010750:  58
               S03:00010751:  59
               S03:00010752:  5A
               S03:00010753:  5B
               S03:00010754:  5C
               S03:00010755:  5D
               S03:00010756:  5E
               S03:00010757:  5F
F02:0169       	DC.B	$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
               S03:00010758:  60
               S03:00010759:  61
               S03:0001075A:  62
               S03:0001075B:  63
               S03:0001075C:  64
               S03:0001075D:  65
               S03:0001075E:  66
               S03:0001075F:  67
               S03:00010760:  68
               S03:00010761:  69
               S03:00010762:  6A
               S03:00010763:  6B
               S03:00010764:  6C
               S03:00010765:  6D
               S03:00010766:  6E
               S03:00010767:  6F
F02:0170       	DC.B	$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
               S03:00010768:  70
               S03:00010769:  71
               S03:0001076A:  72
               S03:0001076B:  73
               S03:0001076C:  74
               S03:0001076D:  75
               S03:0001076E:  76
               S03:0001076F:  77
               S03:00010770:  78
               S03:00010771:  79
               S03:00010772:  7A
               S03:00010773:  7B
               S03:00010774:  7C
               S03:00010775:  7D
               S03:00010776:  7E
               S03:00010777:  7F
F02:0171       	DC.B	$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A,$8B,$8C,$8D,$8E,$8F
               S03:00010778:  80
               S03:00010779:  81
               S03:0001077A:  82
               S03:0001077B:  83
               S03:0001077C:  84
               S03:0001077D:  85
               S03:0001077E:  86
               S03:0001077F:  87
               S03:00010780:  88
               S03:00010781:  89
               S03:00010782:  8A
               S03:00010783:  8B
               S03:00010784:  8C
               S03:00010785:  8D
               S03:00010786:  8E
               S03:00010787:  8F
F02:0172       	DC.B	$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$9F
               S03:00010788:  90
               S03:00010789:  91
               S03:0001078A:  92
               S03:0001078B:  93
               S03:0001078C:  94
               S03:0001078D:  95
               S03:0001078E:  96
               S03:0001078F:  97
               S03:00010790:  98
               S03:00010791:  99
               S03:00010792:  9A
               S03:00010793:  9B
               S03:00010794:  9C
               S03:00010795:  9D
               S03:00010796:  9E
               S03:00010797:  9F
F02:0173       	DC.B	$A0,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF
               S03:00010798:  A0
               S03:00010799:  A1
               S03:0001079A:  A2
               S03:0001079B:  A3
               S03:0001079C:  A4
               S03:0001079D:  A5
               S03:0001079E:  A6
               S03:0001079F:  A7
               S03:000107A0:  A8
               S03:000107A1:  A9
               S03:000107A2:  AA
               S03:000107A3:  AB
               S03:000107A4:  AC
               S03:000107A5:  AD
               S03:000107A6:  AE
               S03:000107A7:  AF
F02:0174       	DC.B	$B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE,$BF
               S03:000107A8:  B0
               S03:000107A9:  B1
               S03:000107AA:  B2
               S03:000107AB:  B3
               S03:000107AC:  B4
               S03:000107AD:  B5
               S03:000107AE:  B6
               S03:000107AF:  B7
               S03:000107B0:  B8
               S03:000107B1:  B9
               S03:000107B2:  BA
               S03:000107B3:  BB
               S03:000107B4:  BC
               S03:000107B5:  BD
               S03:000107B6:  BE
               S03:000107B7:  BF
F02:0175       	DC.B	$C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
               S03:000107B8:  C0
               S03:000107B9:  C1
               S03:000107BA:  C2
               S03:000107BB:  C3
               S03:000107BC:  C4
               S03:000107BD:  C5
               S03:000107BE:  C6
               S03:000107BF:  C7
               S03:000107C0:  C8
               S03:000107C1:  C9
               S03:000107C2:  CA
               S03:000107C3:  CB
               S03:000107C4:  CC
               S03:000107C5:  CD
               S03:000107C6:  CE
               S03:000107C7:  CF
F02:0176       	DC.B	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DE,$DF
               S03:000107C8:  D0
               S03:000107C9:  D1
               S03:000107CA:  D2
               S03:000107CB:  D3
               S03:000107CC:  D4
               S03:000107CD:  D5
               S03:000107CE:  D6
               S03:000107CF:  D7
               S03:000107D0:  D8
               S03:000107D1:  D9
               S03:000107D2:  DA
               S03:000107D3:  DB
               S03:000107D4:  DC
               S03:000107D5:  DD
               S03:000107D6:  DE
               S03:000107D7:  DF
F02:0177       	DC.B	$E0,$E1,$E2,$E3,$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED,$EE,$EF
               S03:000107D8:  E0
               S03:000107D9:  E1
               S03:000107DA:  E2
               S03:000107DB:  E3
               S03:000107DC:  E4
               S03:000107DD:  E5
               S03:000107DE:  E6
               S03:000107DF:  E7
               S03:000107E0:  E8
               S03:000107E1:  E9
               S03:000107E2:  EA
               S03:000107E3:  EB
               S03:000107E4:  EC
               S03:000107E5:  ED
               S03:000107E6:  EE
               S03:000107E7:  EF
F02:0178       	DC.B	$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
               S03:000107E8:  F0
               S03:000107E9:  F1
               S03:000107EA:  F2
               S03:000107EB:  F3
               S03:000107EC:  F4
               S03:000107ED:  F5
               S03:000107EE:  F6
               S03:000107EF:  F7
               S03:000107F0:  F8
               S03:000107F1:  F9
               S03:000107F2:  FA
               S03:000107F3:  FB
               S03:000107F4:  FC
               S03:000107F5:  FD
               S03:000107F6:  FE
               S03:000107F7:  FF
F00:0704       
F00:0705       	ORG	KERNEL_LOC+$FFFC
F00:0706       	DC.L	$DEADBEEF
               S04:0001FFFC:  DE AD BE EF


Sections:
S01  seg0
S02  seg400
S03  seg10000
S04  seg1fffc


Sources:
F00  kernel.s
F01  kernel_definitions.s
F02  kernel_tables.s


Symbols:
test_table EXPR(67320=0x106f8) UNUSED ABS 
hex_table EXPR(67114=0x1062a) UNUSED ABS 
 copy_charrom_to_charram .4 EXPR(66622=0x1043e) ABS 
 copy_charrom_to_charram .3 EXPR(66618=0x1043a) ABS 
 copy_charrom_to_charram .2 EXPR(66606=0x1042e) ABS 
 copy_charrom_to_charram .5 EXPR(66630=0x10446) ABS 
 copy_charrom_to_charram .1 EXPR(66594=0x10422) ABS 
 memcopy .1 EXPR(66560=0x10400) ABS 
 blockfill_words .1 EXPR(66540=0x103ec) ABS 
 blockfill_bytes .1 EXPR(66518=0x103d6) ABS 
timer3_handler EXPR(66512=0x103d0) ABS 
timer2_handler EXPR(66510=0x103ce) ABS 
timer1_handler EXPR(66508=0x103cc) ABS 
 timer0_handler .end EXPR(66500=0x103c4) ABS 
timer0_handler EXPR(66460=0x1039c) ABS 
interrupt_7_autovector EXPR(66458=0x1039a) ABS 
interrupt_6_autovector EXPR(66456=0x10398) ABS 
interrupt_5_autovector EXPR(66450=0x10392) ABS 
timer_finish EXPR(66446=0x1038e) ABS 
timer3_check EXPR(66422=0x10376) ABS 
timer2_check EXPR(66398=0x1035e) ABS 
timer1_check EXPR(66374=0x10346) ABS 
timer0_check EXPR(66350=0x1032e) UNUSED ABS 
interrupt_4_autovector EXPR(66348=0x1032c) ABS 
interrupt_2_autovector EXPR(66304=0x10300) ABS 
exception_handler EXPR(66292=0x102f4) ABS 
 put_string .end EXPR(66286=0x102ee) ABS 
 put_string .start EXPR(66276=0x102e4) ABS 
 put_char .bs2 EXPR(66256=0x102d0) ABS 
 put_char .bs1 EXPR(66238=0x102be) ABS 
 put_char .right2 EXPR(66190=0x1028e) ABS 
 put_char .down2 EXPR(66166=0x10276) ABS 
 put_char .lf2 EXPR(66142=0x1025e) ABS 
 put_char .end EXPR(66266=0x102da) ABS 
 put_char .char2 EXPR(66110=0x1023e) ABS 
 put_char .char EXPR(66076=0x1021c) UNUSED ABS 
 put_char .bs EXPR(66226=0x102b2) ABS 
 put_char .left EXPR(66212=0x102a4) ABS 
 put_char .up EXPR(66196=0x10294) ABS 
 put_char .right EXPR(66172=0x1027c) ABS 
 put_char .down EXPR(66148=0x10264) ABS 
 put_char .lf EXPR(66118=0x10246) ABS 
ascii_to_screencode EXPR(66986=0x105aa) ABS 
 se_scroll_up .2 EXPR(65976=0x101b8) ABS 
 se_scroll_up .1 EXPR(65960=0x101a8) ABS 
se_scroll_up EXPR(65938=0x10192) ABS 
blockfill_words EXPR(66532=0x103e4) ABS 
blockfill_bytes EXPR(66514=0x103d2) ABS 
 mainloop .mes2 EXPR(65862=0x10146) ABS 
 mainloop .main2 EXPR(65854=0x1013e) ABS 
put_char EXPR(66002=0x101d2) ABS 
se_deactivate_cursor EXPR(66856=0x10528) ABS 
 mainloop .main1 EXPR(65814=0x10116) ABS 
se_activate_cursor EXPR(66806=0x104f6) ABS 
 mainloop .prompt EXPR(65860=0x10144) ABS 
put_string EXPR(66272=0x102e0) ABS 
welcome EXPR(66944=0x10580) ABS 
se_clear_screen EXPR(65888=0x10160) ABS 
 mainloop .main0 EXPR(65780=0x100f4) ABS 
mainloop EXPR(65768=0x100e8) UNUSED ABS 
notes EXPR(67130=0x1063a) ABS 
memcopy EXPR(66556=0x103fc) ABS 
screen_blit_structure EXPR(66912=0x10560) ABS 
copy_charrom_to_charram EXPR(66576=0x10410) ABS 
reset_sids EXPR(66726=0x104a6) ABS 
setup_vector_table EXPR(66636=0x1044c) ABS 
kernel_main EXPR(65544=0x10008) ABS 
se_command_buf EXPR(1094=0x446) UNUSED ABS 
se_orig_color EXPR(1092=0x444) UNUSED ABS 
se_orig_char EXPR(1091=0x443) ABS 
se_crs_interval EXPR(1090=0x442) ABS 
se_crs_cntdwn EXPR(1089=0x441) ABS 
se_crs_blink EXPR(1088=0x440) ABS 
kernel_text_scr EXPR(1056=0x420) ABS 
timer3_vector EXPR(1044=0x414) ABS 
timer2_vector EXPR(1040=0x410) ABS 
timer1_vector EXPR(1036=0x40c) ABS 
timer0_vector EXPR(1032=0x408) ABS 
current_txt_scr EXPR(1028=0x404) ABS 
cursor_pos EXPR(1026=0x402) ABS 
curr_text_color EXPR(1024=0x400) ABS 
vec_31_level7_irq_autovect EXPR(124=0x7c) ABS 
vec_30_level6_irq_autovect EXPR(120=0x78) ABS 
vec_29_level5_irq_autovect EXPR(116=0x74) ABS 
vec_28_level4_irq_autovect EXPR(112=0x70) ABS 
vec_27_level3_irq_autovect EXPR(108=0x6c) UNUSED ABS 
vec_26_level2_irq_autovect EXPR(104=0x68) ABS 
vec_25 EXPR(100=0x64) UNUSED ABS 
vec_24 EXPR(96=0x60) UNUSED ABS 
vec_23 EXPR(92=0x5c) UNUSED ABS 
vec_22 EXPR(88=0x58) UNUSED ABS 
vec_21 EXPR(84=0x54) UNUSED ABS 
vec_20 EXPR(80=0x50) UNUSED ABS 
vec_19 EXPR(76=0x4c) UNUSED ABS 
vec_18 EXPR(72=0x48) UNUSED ABS 
vec_17 EXPR(68=0x44) UNUSED ABS 
vec_16 EXPR(64=0x40) UNUSED ABS 
vec_15 EXPR(60=0x3c) UNUSED ABS 
vec_14 EXPR(56=0x38) UNUSED ABS 
vec_13 EXPR(52=0x34) UNUSED ABS 
vec_12 EXPR(48=0x30) UNUSED ABS 
vec_11_unimpl_instruction EXPR(44=0x2c) ABS 
vec_10_unimpl_instruction EXPR(40=0x28) ABS 
vec_09 EXPR(36=0x24) UNUSED ABS 
vec_08 EXPR(32=0x20) UNUSED ABS 
vec_07 EXPR(28=0x1c) UNUSED ABS 
vec_06 EXPR(24=0x18) UNUSED ABS 
vec_05 EXPR(20=0x14) UNUSED ABS 
vec_04_illegal_instruction EXPR(16=0x10) ABS 
vec_03 EXPR(12=0xc) UNUSED ABS 
vec_02 EXPR(8=0x8) UNUSED ABS 
vec_01 EXPR(4=0x4) UNUSED ABS 
vec_00 EXPR(0=0x0) UNUSED ABS 
N_A7S EXPR(188=0xbc) UNUSED EQU 
N_A7_ EXPR(186=0xba) UNUSED EQU 
N_G7S EXPR(184=0xb8) UNUSED EQU 
N_G7_ EXPR(182=0xb6) UNUSED EQU 
N_F7S EXPR(180=0xb4) UNUSED EQU 
N_F7_ EXPR(178=0xb2) UNUSED EQU 
N_E7_ EXPR(176=0xb0) UNUSED EQU 
N_D7S EXPR(174=0xae) UNUSED EQU 
N_D7_ EXPR(172=0xac) UNUSED EQU 
N_C7S EXPR(170=0xaa) UNUSED EQU 
N_C7_ EXPR(168=0xa8) UNUSED EQU 
N_B6_ EXPR(166=0xa6) UNUSED EQU 
N_A6S EXPR(164=0xa4) UNUSED EQU 
N_A6_ EXPR(162=0xa2) UNUSED EQU 
N_G6S EXPR(160=0xa0) UNUSED EQU 
N_G6_ EXPR(158=0x9e) UNUSED EQU 
N_F6S EXPR(156=0x9c) UNUSED EQU 
N_F6_ EXPR(154=0x9a) UNUSED EQU 
N_E6_ EXPR(152=0x98) UNUSED EQU 
N_D6S EXPR(150=0x96) UNUSED EQU 
N_D6_ EXPR(148=0x94) UNUSED EQU 
N_C6S EXPR(146=0x92) UNUSED EQU 
N_C6_ EXPR(144=0x90) UNUSED EQU 
N_B5_ EXPR(142=0x8e) UNUSED EQU 
N_A5S EXPR(140=0x8c) UNUSED EQU 
N_A5_ EXPR(138=0x8a) UNUSED EQU 
N_G5S EXPR(136=0x88) UNUSED EQU 
N_G5_ EXPR(134=0x86) UNUSED EQU 
N_F5S EXPR(132=0x84) UNUSED EQU 
N_F5_ EXPR(130=0x82) UNUSED EQU 
N_E5_ EXPR(128=0x80) UNUSED EQU 
N_D5S EXPR(126=0x7e) UNUSED EQU 
N_D5_ EXPR(124=0x7c) UNUSED EQU 
N_C5S EXPR(122=0x7a) UNUSED EQU 
N_C5_ EXPR(120=0x78) UNUSED EQU 
N_B4_ EXPR(118=0x76) UNUSED EQU 
N_A4S EXPR(116=0x74) UNUSED EQU 
N_A4_ EXPR(114=0x72) UNUSED EQU 
N_G4S EXPR(112=0x70) UNUSED EQU 
N_G4_ EXPR(110=0x6e) UNUSED EQU 
N_F4S EXPR(108=0x6c) UNUSED EQU 
N_F4_ EXPR(106=0x6a) UNUSED EQU 
N_E4_ EXPR(104=0x68) UNUSED EQU 
N_D4S EXPR(102=0x66) UNUSED EQU 
N_D4_ EXPR(100=0x64) UNUSED EQU 
N_C4S EXPR(98=0x62) UNUSED EQU 
N_C4_ EXPR(96=0x60) UNUSED EQU 
N_B3_ EXPR(94=0x5e) UNUSED EQU 
N_A3S EXPR(92=0x5c) UNUSED EQU 
N_A3_ EXPR(90=0x5a) EQU 
N_G3S EXPR(88=0x58) UNUSED EQU 
N_G3_ EXPR(86=0x56) UNUSED EQU 
N_F3S EXPR(84=0x54) UNUSED EQU 
N_F3_ EXPR(82=0x52) UNUSED EQU 
N_E3_ EXPR(80=0x50) UNUSED EQU 
N_D3S EXPR(78=0x4e) UNUSED EQU 
N_D3_ EXPR(76=0x4c) EQU 
N_C3S EXPR(74=0x4a) UNUSED EQU 
N_C3_ EXPR(72=0x48) UNUSED EQU 
N_B2_ EXPR(70=0x46) UNUSED EQU 
N_A2S EXPR(68=0x44) UNUSED EQU 
N_A2_ EXPR(66=0x42) UNUSED EQU 
N_G2S EXPR(64=0x40) UNUSED EQU 
N_G2_ EXPR(62=0x3e) UNUSED EQU 
N_F2S EXPR(60=0x3c) UNUSED EQU 
N_F2_ EXPR(58=0x3a) UNUSED EQU 
N_E2_ EXPR(56=0x38) UNUSED EQU 
N_D2S EXPR(54=0x36) UNUSED EQU 
N_D2_ EXPR(52=0x34) UNUSED EQU 
N_C2S EXPR(50=0x32) UNUSED EQU 
N_C2_ EXPR(48=0x30) UNUSED EQU 
N_B1_ EXPR(46=0x2e) UNUSED EQU 
N_A1S EXPR(44=0x2c) UNUSED EQU 
N_A1_ EXPR(42=0x2a) UNUSED EQU 
N_G1S EXPR(40=0x28) UNUSED EQU 
N_G1_ EXPR(38=0x26) UNUSED EQU 
N_F1S EXPR(36=0x24) UNUSED EQU 
N_F1_ EXPR(34=0x22) UNUSED EQU 
N_E1_ EXPR(32=0x20) UNUSED EQU 
N_D1S EXPR(30=0x1e) UNUSED EQU 
N_D1_ EXPR(28=0x1c) UNUSED EQU 
N_C1S EXPR(26=0x1a) UNUSED EQU 
N_C1_ EXPR(24=0x18) UNUSED EQU 
N_B0_ EXPR(22=0x16) UNUSED EQU 
N_A0S EXPR(20=0x14) UNUSED EQU 
N_A0_ EXPR(18=0x12) UNUSED EQU 
N_G0S EXPR(16=0x10) UNUSED EQU 
N_G0_ EXPR(14=0xe) UNUSED EQU 
N_F0S EXPR(12=0xc) UNUSED EQU 
N_F0_ EXPR(10=0xa) UNUSED EQU 
N_E0_ EXPR(8=0x8) UNUSED EQU 
N_D0S EXPR(6=0x6) UNUSED EQU 
N_D0_ EXPR(4=0x4) UNUSED EQU 
N_C0S EXPR(2=0x2) UNUSED EQU 
N_C0_ EXPR(0=0x0) UNUSED EQU 
C64_LIGHTGREY EXPR(64170=0xfaaa) UNUSED EQU 
C64_LIGHTBLUE EXPR(63101=0xf67d) EQU 
C64_LIGHTGREEN EXPR(64506=0xfbfa) UNUSED EQU 
C64_GREY EXPR(63351=0xf777) EQU 
C64_DARKGREY EXPR(62532=0xf444) UNUSED EQU 
C64_LIGHTRED EXPR(64375=0xfb77) UNUSED EQU 
C64_BROWN EXPR(62769=0xf531) UNUSED EQU 
C64_ORANGE EXPR(63571=0xf853) UNUSED EQU 
C64_YELLOW EXPR(65256=0xfee8) UNUSED EQU 
C64_BLUE EXPR(62265=0xf339) EQU 
C64_GREEN EXPR(63141=0xf6a5) UNUSED EQU 
C64_PURPLE EXPR(63561=0xf849) UNUSED EQU 
C64_CYAN EXPR(63692=0xf8cc) UNUSED EQU 
C64_RED EXPR(63283=0xf733) UNUSED EQU 
C64_WHITE EXPR(65535=0xffff) UNUSED EQU 
C64_BLACK EXPR(61440=0xf000) EQU 
BLITTER_CLEAR_COLOR EXPR(16713478=0xff0706) EQU 
BLITTER_DATA_32_BIT EXPR(16713474=0xff0702) EQU 
BLITTER_CONTROL EXPR(16713472=0xff0700) EQU 
BLITTER_BASE EXPR(16713472=0xff0700) EQU 
TIMER_BASE EXPR(16713216=0xff0600) EQU 
SID1_RGHT EXPR(16713091=0xff0583) EQU 
SID1_LEFT EXPR(16713090=0xff0582) EQU 
SID0_RGHT EXPR(16713089=0xff0581) EQU 
SID0_LEFT EXPR(16713088=0xff0580) EQU 
SID1_VOLUME EXPR(16713016=0xff0538) EQU 
SID1_BASE EXPR(16712992=0xff0520) EQU 
SID0_VOLUME EXPR(16712984=0xff0518) EQU 
SID0_BASE EXPR(16712960=0xff0500) EQU 
SOUND_BASE EXPR(16712960=0xff0500) EQU 
VICV_BUFFERSWAP EXPR(16712720=0xff0410) EQU 
VICV_ISR EXPR(16712718=0xff040e) EQU 
VICV_BORDER_SIZE EXPR(16712716=0xff040c) EQU 
VICV_COL EXPR(16712712=0xff0408) EQU 
VICV_TXT EXPR(16712708=0xff0404) EQU 
VICV_BORDER_COLOR EXPR(16712704=0xff0400) EQU 
VICV_BASE EXPR(16712704=0xff0400) EQU 
CIA_KEYBOARD EXPR(16712576=0xff0380) UNUSED EQU 
CIA_ASCII EXPR(16712452=0xff0304) EQU 
CIA_REPEAT EXPR(16712451=0xff0303) UNUSED EQU 
CIA_DELAY EXPR(16712450=0xff0302) UNUSED EQU 
CIA_CONTROL EXPR(16712449=0xff0301) EQU 
CIA_STATUS EXPR(16712448=0xff0300) UNUSED EQU 
CIA_BASE EXPR(16712448=0xff0300) EQU 
CHAR_RAM EXPR(15794176=0xf10000) EQU 
CHAR_ROM EXPR(16646144=0xfe0000) EQU 
SCRN_SPACE EXPR(32=0x20) EQU 
ASCII_CURSOR_LEFT EXPR(157=0x9d) EQU 
ASCII_CURSOR_UP EXPR(145=0x91) EQU 
ASCII_SPACE EXPR(32=0x20) EQU 
ASCII_CURSOR_RIGHT EXPR(29=0x1d) EQU 
ASCII_CURSOR_DOWN EXPR(17=0x11) EQU 
ASCII_LF EXPR(10=0xa) EQU 
ASCII_BACKSPACE EXPR(8=0x8) EQU 
ASCII_NULL EXPR(0=0x0) EQU 
SUPERV_STACK EXPR(14680064=0xe00000) EQU 
KERNEL_LOC EXPR(65536=0x10000) EQU 
KERNEL_VARS EXPR(1024=0x400) EQU 
_MOVEMBYTES EXPR(12=0xc) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(769=0x301) INTERNAL 
__LINE__ EXPR(706=0x2c2) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 

There have been no errors.
