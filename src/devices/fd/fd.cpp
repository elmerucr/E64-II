/*
 * fd.cpp
 * E64-II
 *
 * Copyright Â© 2020-2021 elmerucr. All rights reserved.
 */

#include "common.hpp"
#include "monitor_console.hpp"
#include "fd.hpp"
#include <unistd.h>
#include <sys/stat.h>

extern uint16_t fd_motor_sound[];

E64::fd::fd()
{
	disk_contents = new uint8_t[FD_DISK_SIZE * sizeof(uint8_t)];
	
	fd_state = FD_STATE_EMPTY;
	
	error_led_cycles = (CPU_CLOCK_SPEED / 1000) * FD_ERROR_LED_TIME_MS;
	reset_error_state();
	
	spin_up_cycles = (CPU_CLOCK_SPEED / 1000) * FD_SPIN_UP_TIME_MS;
	spin_delay_cycles = (CPU_CLOCK_SPEED / 1000) * FD_SPIN_DELAY_MS;
	
	sample_no = 0;
}

E64::fd::~fd()
{
	if (fd_state != FD_STATE_EMPTY) {
		// finish actions if any such as writing a sector
		// NEEDS WORK
		eject_disk();
	}
	delete disk_contents;
}

void E64::fd::reset()
{
	// a reset doesn't eject a disk
	for (int i=0; i<16; i++)
		registers[i] = 0x00;
	reset_error_state();
	cycles_done = 0;
}

uint8_t E64::fd::read_byte(uint8_t address)
{
	switch (address & 0xf) {
		case 0x00:
			return
				(disk_inside()    ? 0b00000001 : 0b00000000) |
				(motor_spinning() ? 0b00000010 : 0b00000000) |
				(reading()        ? 0b00000100 : 0b00000000) |
				(writing()        ? 0b00001000 : 0b00000000) |
				(in_error()       ? 0b10000000 : 0b00000000) ;
		case 0x01:
			return 0x00;
		case 0x02:
			return get_error_state();
		default:
			return registers[address & 0xf];
	}
	return 0x00;
}

void E64::fd::write_byte(uint8_t address, uint8_t byte)
{
	switch (address & 0xf) {
		case 0x00:
			break;
		case 0x01:
			switch (byte) {
				case 0b00000100:
					attempt_start_reading();
					break;
				case 0b00001000:
					attempt_start_writing();
					break;
				case 0b10000000:
					reset_error_state();
					break;
				default:
					break;
			}
			break;
		case 0x0b:
			// smallest byte of buffer address, must be even
			registers[0x0b] = byte & 0b11111110;
			break;
		default:
			registers[address & 0xf] = byte;
	}
}

void E64::fd::attempt_start_reading()
{
	switch (fd_state) {
		case FD_STATE_EMPTY:
			set_error_state(FD_ERROR_NO_DISK_INSIDE);
			break;
		case FD_STATE_DISK_LOADED:
			if (sector >= FD_SECTORS) {
				set_error_state(FD_ERROR_ILLEGAL_SECTOR);
				break;
			}
			get_sector_and_buffer();
			fd_state = FD_STATE_SPINNING_UP;
			next_state = FD_STATE_READING;
			cycles_done = 0;
			bytes_done = 0;
			break;
		case FD_STATE_SPINNING_UP:
			switch (next_state) {
				case FD_STATE_SPINNING:
					if (sector >= FD_SECTORS) {
						set_error_state(FD_ERROR_ILLEGAL_SECTOR);
						break;
					}
					get_sector_and_buffer();
					next_state = FD_STATE_READING;
					cycles_done = 0;
					bytes_done = 0;
					break;
				case FD_STATE_READING:
					set_error_state(FD_ERROR_READING_PLANNED);
					break;
				case FD_STATE_WRITING:
					set_error_state(FD_ERROR_WRITING_PLANNED);
					break;
				default:
					break;
			}
			break;
		case FD_STATE_READING:
			set_error_state(FD_ERROR_READING);
			break;
		case FD_STATE_WRITING:
			set_error_state(FD_ERROR_WRITING);
			break;
		case FD_STATE_SPINNING:
			if (sector >= FD_SECTORS) {
				set_error_state(FD_ERROR_ILLEGAL_SECTOR);
				break;
			}
			get_sector_and_buffer();
			fd_state = FD_STATE_READING;
			cycles_done = 0;
			bytes_done = 0;
			break;
	}
}

void E64::fd::attempt_start_writing()
{
	if (write_protect) {
		set_error_state(FD_ERROR_WRITE_PROTECT);
	} else {
		switch (fd_state) {
			case FD_STATE_EMPTY:
				set_error_state(FD_ERROR_NO_DISK_INSIDE);
				break;
			case FD_STATE_DISK_LOADED:
				if (sector >= FD_SECTORS) {
					set_error_state(FD_ERROR_ILLEGAL_SECTOR);
					break;
				}
				get_sector_and_buffer();
				fd_state = FD_STATE_SPINNING_UP;
				next_state = FD_STATE_WRITING;
				cycles_done = 0;
				bytes_done = 0;
				break;
			case FD_STATE_SPINNING_UP:
				switch (next_state) {
					case FD_STATE_SPINNING:
						if (sector >= FD_SECTORS) {
							set_error_state(FD_ERROR_ILLEGAL_SECTOR);
							break;
						}
						get_sector_and_buffer();
						next_state = FD_STATE_WRITING;
						cycles_done = 0;
						bytes_done = 0;
						break;
					case FD_STATE_READING:
						set_error_state(FD_ERROR_READING_PLANNED);
						break;
					case FD_STATE_WRITING:
						set_error_state(FD_ERROR_WRITING_PLANNED);
						break;
					default:
						break;
				}
				break;
			case FD_STATE_READING:
				set_error_state(FD_ERROR_READING);
				break;
			case FD_STATE_WRITING:
				set_error_state(FD_ERROR_WRITING);
				break;
			case FD_STATE_SPINNING:
				if (sector >= FD_SECTORS) {
					set_error_state(FD_ERROR_ILLEGAL_SECTOR);
					break;
				}
				get_sector_and_buffer();
				fd_state = FD_STATE_WRITING;
				cycles_done = 0;
				bytes_done = 0;
				break;
		}
	}
}

int E64::fd::insert_disk(const char *path, bool write_protect_disk, bool save_on_eject_disk)
{
	if (fd_state != FD_STATE_EMPTY) {
		debug_console_print("\nerror: already a disk inside\n");
		return 1;
	}
	
	struct stat stats;
	
	if (stat(path, &stats) == 0) {
		if (S_ISDIR(stats.st_mode)) {
			debug_console_print("\nerror: path is directory\n");
			return 1;
		}
		if (stats.st_size != FD_DISK_SIZE) {
			debug_console_print("\nerror: disk image wrong size\n");
			return 1;
		}
		debug_console_print("\ninserting disk: ");
		debug_console_print(path);
		debug_console_put_char('\n');
		current_disk = fopen(path, "r+b");
		fread(disk_contents, FD_DISK_SIZE, 1, current_disk);
		
		fd_state = FD_STATE_SPINNING_UP;
		next_state = FD_STATE_SPINNING;
		
		write_protect = write_protect_disk;
		save_on_eject = save_on_eject_disk;
		
		if (write_protect) {
			debug_console_print("\ndisk is write protected\n");
		} else {
			debug_console_print("\ndisk is writable\n");
		}
		if (save_on_eject) {
			debug_console_print("disk contents will be saved on eject\n");
		} else {
			debug_console_print("disk contents will not be saved on eject\n");
		}
		
		return 0;
	} else {
		debug_console_print("\nerror: no such file\n");
		return 1;
	}
}

int E64::fd::eject_disk()
{
	switch (fd_state) {
		case FD_STATE_EMPTY:
			set_error_state(FD_ERROR_NO_DISK_INSIDE);
			return 1;
		case FD_STATE_DISK_LOADED:
			if (save_on_eject) {
				fseek(current_disk, 0, SEEK_SET);
				fwrite(disk_contents, FD_DISK_SIZE, 1, current_disk);
				printf("[fd] writing disk contents\n");
			}
			fclose(current_disk);
			fd_state = FD_STATE_EMPTY;
			for (int i=0; i < FD_DISK_SIZE; i++)
				disk_contents[i] = 0;
			return 0;
		default:
			// drive motor is spinning
			// that's true, but make difference between read/write
			// etc???
			// NEEDS WORK
			set_error_state(FD_ERROR_MOTOR_IS_SPINNING);
			return 1;
	}
}

uint16_t E64::fd::bytes_per_sector()
{
	return FD_BYTES_PER_SECTOR;
}

uint32_t E64::fd::disk_size()
{
	return FD_DISK_SIZE;
}


void E64::fd::run(uint32_t cycles)
{
	switch (fd_state) {
		case FD_STATE_EMPTY:
			break;
		case FD_STATE_DISK_LOADED:
			break;
		case FD_STATE_SPINNING_UP:
			cycles_done += cycles;
			if (cycles_done > spin_up_cycles) {
				fd_state = next_state;
				next_state = FD_STATE_SPINNING;
				cycles_done -= spin_up_cycles;
			}
			break;
		case FD_STATE_READING:
			cycles_done += cycles;
			if (cycles_done > FD_CYCLES_PER_BYTE) {
				pc.mmu->ram[(buffer+bytes_done) & 0xffffff] =
					pc.fd0->disk_contents[(sector * FD_BYTES_PER_SECTOR) + bytes_done];
				cycles_done -= FD_CYCLES_PER_BYTE;
				bytes_done++;
				if (bytes_done == FD_BYTES_PER_SECTOR) {
					fd_state = FD_STATE_SPINNING;
					cycles_done = 0;
				}
			}
			break;
		case FD_STATE_WRITING:
			cycles_done += cycles;
			if (cycles_done > FD_CYCLES_PER_BYTE) {
				pc.fd0->disk_contents[(sector * FD_BYTES_PER_SECTOR) + bytes_done] =
					pc.mmu->ram[(buffer+bytes_done) & 0xffffff];
				cycles_done -= FD_CYCLES_PER_BYTE;
				bytes_done++;
				if (bytes_done == FD_BYTES_PER_SECTOR) {
					fd_state = FD_STATE_SPINNING;
					cycles_done = 0;
				}
			}
			break;
		case FD_STATE_SPINNING:
			cycles_done += cycles;
			if (cycles_done > spin_delay_cycles) {
				fd_state = FD_STATE_DISK_LOADED;
				cycles_done -= spin_delay_cycles;
			}
			break;
	}
	if (current_error_state != FD_ERROR_NONE) {
		if (error_led_counter > error_led_cycles) {
			error_led_on = !error_led_on;
			error_led_counter -= error_led_cycles;
		}
		error_led_counter += cycles;
	}
}

uint16_t disk_icon_data[448] = {
	
	// FD_EMPTY
	COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,
	COBALT_03,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_03,
	COBALT_03,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_03,
	COBALT_03,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_03,
	COBALT_03,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_03,
	COBALT_03,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_03,
	COBALT_03,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_03,
	COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,COBALT_03,

	// FD_DISK_LOADED
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	COBALT_06,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_06,
	COBALT_06,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_06,
	COBALT_06,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_06,
	COBALT_06,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_06,
	COBALT_06,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_06,
	COBALT_06,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_02,COBALT_06,
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	
	// FD_SPINNING_UP
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	COBALT_06,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,COBALT_06,
	COBALT_06,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,COBALT_06,
	COBALT_06,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,COBALT_06,
	COBALT_06,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,COBALT_06,
	COBALT_06,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,COBALT_06,
	COBALT_06,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,   0x44f3,COBALT_06,
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	
	// FD_READING
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	COBALT_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06,COBALT_06,
	COBALT_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06,COBALT_06,
	COBALT_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06,COBALT_06,
	COBALT_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06,COBALT_06,
	COBALT_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06,COBALT_06,
	COBALT_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06, GREEN_06,COBALT_06,
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	
	// FD_WRITING
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	COBALT_06,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,COBALT_06,
	COBALT_06,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,COBALT_06,
	COBALT_06,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,COBALT_06,
	COBALT_06,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,COBALT_06,
	COBALT_06,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,COBALT_06,
	COBALT_06,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,   0x1ff1,COBALT_06,
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	
	// FD_SPINNING
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	COBALT_06, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03,COBALT_06,
	COBALT_06, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03,COBALT_06,
	COBALT_06, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03,COBALT_06,
	COBALT_06, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03,COBALT_06,
	COBALT_06, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03,COBALT_06,
	COBALT_06, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03, GREEN_03,COBALT_06,
	COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,COBALT_06,
	
	// error led flashes
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,
	C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED,C64_RED
};

uint16_t *E64::fd::icon_data()
{
	if (error_led_on)
		return &disk_icon_data[0x180];
	switch (fd_state) {
		case FD_STATE_EMPTY:
			return &disk_icon_data[0x000];
		case FD_STATE_DISK_LOADED:
			return &disk_icon_data[0x040];
		case FD_STATE_SPINNING_UP:
			return &disk_icon_data[0x080];
		case FD_STATE_READING:
			return &disk_icon_data[0x0c0];
		case FD_STATE_WRITING:
			return &disk_icon_data[0x100];
		case FD_STATE_SPINNING:
			return &disk_icon_data[0x140];
	}
}

void E64::fd::set_error_state(enum fd_error_list new_error)
{
	current_error_state = new_error;
	error_led_on = true;
	error_led_counter = 0;
}

void E64::fd::reset_error_state()
{
	current_error_state = FD_ERROR_NONE;
	error_led_on = false;
}

int16_t E64::fd::motor_sound_sample()
{
	if (sample_no == 3816) {
		sample_no = 0;
	}
	return motor_spinning() ? (int16_t)fd_motor_sound[sample_no++] : 0;
}

uint16_t fd_motor_sound[3816] = {
	0xfff4, 0x0010, 0x003e, 0x0083, 0x0093, 0x0093, 0x0084, 0x0053,
	0x0027, 0x0031, 0x0034, 0x0037, 0xfffe, 0xffc6, 0xffb9, 0x0003,
	0x0086, 0x00e7, 0x0107, 0x0127, 0x0154, 0x0199, 0x01cd, 0x01b2,
	0x0154, 0x00c8, 0x006b, 0x0010, 0xffc5, 0xff5d, 0xff23, 0xff17,
	0xff20, 0xff39, 0xff32, 0xff0e, 0xff43, 0xffce, 0x003a, 0x0095,
	0x00c4, 0x00a6, 0x006c, 0x000f, 0xff9d, 0xff41, 0xff11, 0xfef2,
	0xff14, 0xff38, 0xff56, 0xff7c, 0xff43, 0xff16, 0xff18, 0xff39,
	0xff81, 0xffe9, 0x001a, 0x0035, 0x0036, 0x0055, 0x005a, 0x0008,
	0xffcd, 0xffc7, 0xfff1, 0x0014, 0xffda, 0xff4c, 0xfee6, 0xfed4,
	0xff03, 0xff52, 0xffc3, 0xfffa, 0x0018, 0x0032, 0x0050, 0x003d,
	0x0029, 0x0051, 0x00b6, 0x00e5, 0x00e9, 0x00b2, 0x0058, 0xfff6,
	0xffa6, 0xffa5, 0x001b, 0x006e, 0x008f, 0x0065, 0x004d, 0x006c,
	0x00c2, 0x0101, 0x0137, 0x0167, 0x0177, 0x01ad, 0x01ae, 0x0154,
	0x00df, 0x007d, 0x0054, 0x002a, 0xffd8, 0xff8b, 0xff7b, 0xff97,
	0xfff6, 0x006d, 0x0099, 0x00b6, 0x00ba, 0x00c5, 0x00cc, 0x00a2,
	0x005c, 0x0015, 0xffe0, 0xffa6, 0xffa8, 0xffa0, 0xff8a, 0xff5e,
	0xff20, 0xff06, 0xff3b, 0xff38, 0xff47, 0xff42, 0xff13, 0xff10,
	0xff15, 0xff06, 0xff0a, 0xff28, 0xff69, 0xffcd, 0xffdd, 0xffb3,
	0xff88, 0xff3f, 0xff1e, 0xff0c, 0xff1a, 0xff7b, 0xffc8, 0xffe3,
	0x0026, 0x002c, 0x0002, 0xfff2, 0xffd1, 0xffdf, 0x0005, 0x002c,
	0x005b, 0x0049, 0x0000, 0xffd1, 0xffba, 0xffd2, 0xfff8, 0xffe3,
	0xffa7, 0xff87, 0xff7b, 0xff90, 0xffcf, 0x002f, 0x009f, 0x00f5,
	0x00e4, 0x00b0, 0x0052, 0x0021, 0x0059, 0x009a, 0x00b5, 0x00cf,
	0x00c9, 0x00cc, 0x00c5, 0x0087, 0x0056, 0x003c, 0x0046, 0x0084,
	0x009f, 0x004d, 0xffed, 0xffae, 0xffa1, 0xffd2, 0xfffd, 0x0019,
	0x0046, 0x007d, 0x00a2, 0x00b4, 0x0095, 0x0048, 0x0002, 0xffc5,
	0xfff0, 0x0010, 0xffdf, 0xff62, 0xfed4, 0xfe73, 0xfe53, 0xfe42,
	0xfe47, 0xfe54, 0xfe8d, 0xfeb9, 0xfed3, 0xfec6, 0xfebb, 0xff21,
	0xff80, 0x000a, 0x0050, 0x0057, 0x0076, 0x005e, 0x0044, 0xfff5,
	0xffc5, 0xffbe, 0xffa2, 0xff8e, 0xff79, 0xff65, 0xff6b, 0xff81,
	0xffe6, 0x0030, 0x008c, 0x00bd, 0x00bd, 0x00ae, 0x0081, 0x0071,
	0x007e, 0x006a, 0x0034, 0xffe0, 0xffb1, 0xffb1, 0xffc1, 0xffb1,
	0xffa9, 0xffde, 0x0007, 0x0062, 0x007f, 0x0056, 0x0018, 0x001d,
	0x0041, 0x00a0, 0x00f6, 0x012d, 0x0176, 0x0168, 0x00d1, 0x004c,
	0xffb2, 0xff5d, 0xff5f, 0xff7f, 0xff93, 0xff88, 0xff57, 0xff69,
	0xff9e, 0xffe2, 0x0010, 0x0002, 0x0002, 0xfffc, 0xffe4, 0xffd3,
	0xffbb, 0xff74, 0xff1c, 0xfee1, 0xfeb9, 0xfec7, 0xfec5, 0xfeb0,
	0xfeab, 0xfed4, 0xff09, 0xff3f, 0xff36, 0xff1c, 0xff1b, 0xff21,
	0xff62, 0xff75, 0xff3f, 0xff2e, 0xff2b, 0xff64, 0xffb9, 0xff99,
	0xff4c, 0xfeda, 0xfe8d, 0xfe9b, 0xfeec, 0xff45, 0xff9f, 0xffef,
	0x0025, 0x0062, 0x0054, 0x0016, 0xffda, 0xffcf, 0xffe6, 0x0018,
	0x0063, 0x009f, 0x00f7, 0x0108, 0x00fb, 0x00ee, 0x0090, 0x0052,
	0x0000, 0xffe5, 0x0020, 0x0056, 0x005f, 0x0078, 0x0061, 0x0077,
	0x0074, 0x0080, 0x008c, 0x009d, 0x00ba, 0x00e7, 0x00ff, 0x00d9,
	0x00a0, 0x005b, 0x000d, 0x0008, 0xfff1, 0xffd4, 0xfffe, 0x002d,
	0x0061, 0x0073, 0x0081, 0x0072, 0x006d, 0x0065, 0x0075, 0x0082,
	0x0047, 0x0018, 0xffba, 0xff64, 0xff27, 0xff01, 0xfeff, 0xff25,
	0xff7f, 0xffd6, 0xffda, 0xffb6, 0xff67, 0xff44, 0xff3c, 0xff5a,
	0xff73, 0xffa1, 0xffe3, 0xffea, 0xffb0, 0xff44, 0xfecb, 0xfea8,
	0xfed6, 0xff23, 0xffa7, 0x0003, 0x0017, 0x001a, 0x003c, 0x0037,
	0x0057, 0x008a, 0x00bc, 0x011e, 0x014b, 0x0149, 0x011f, 0x00b9,
	0x006d, 0x0033, 0xfff8, 0xffd2, 0xffbe, 0xff92, 0xff6f, 0xff74,
	0xff8e, 0xfff5, 0x006f, 0x00c5, 0x00cf, 0x0097, 0x0054, 0x0028,
	0x0003, 0x0000, 0x001c, 0x001c, 0x001a, 0x0000, 0xffaa, 0xff93,
	0xff8c, 0xffc6, 0x0016, 0x0076, 0x00a6, 0x00e4, 0x010b, 0x012d,
	0x0161, 0x0174, 0x01ad, 0x01a0, 0x016b, 0x0116, 0x00ec, 0x00bc,
	0x0099, 0x007e, 0x0067, 0x008e, 0x00b8, 0x00dc, 0x0114, 0x0115,
	0x00ff, 0x00bf, 0x006f, 0x0038, 0x0035, 0x002d, 0x0023, 0x0009,
	0xffcf, 0xffa9, 0xffbe, 0xffe2, 0xfffb, 0xffcf, 0xff7f, 0xff58,
	0xff31, 0xff23, 0xff40, 0xff36, 0xff86, 0xfffa, 0x004c, 0x00ab,
	0x00cf, 0x00c6, 0x00a2, 0x008a, 0x0062, 0x002a, 0xffe8, 0xffa0,
	0xff6d, 0xff34, 0xfef8, 0xfed1, 0xfea5, 0xfed5, 0xff43, 0xffb6,
	0x0036, 0x0081, 0x00b6, 0x00e2, 0x011f, 0x015f, 0x01a6, 0x0193,
	0x017d, 0x0128, 0x00b9, 0x0065, 0x0032, 0xfff7, 0x000a, 0x005b,
	0x0087, 0x00c2, 0x00d1, 0x00e4, 0x010e, 0x0123, 0x0140, 0x015f,
	0x0176, 0x01c1, 0x01ff, 0x01cb, 0x0198, 0x014a, 0x00fe, 0x0118,
	0x012c, 0x0120, 0x010e, 0x00e0, 0x009f, 0x0053, 0xffdd, 0xffab,
	0xffcc, 0x001d, 0x007d, 0x00c3, 0x00d8, 0x00af, 0x008e, 0x003e,
	0x003d, 0x004b, 0x002f, 0x000a, 0xffa5, 0xff30, 0xfeaa, 0xfe3a,
	0xfe12, 0xfe3f, 0xfea7, 0xff4a, 0xffec, 0x005a, 0x0087, 0x008e,
	0x0077, 0x00a6, 0x00c3, 0x00e9, 0x00d2, 0x00a6, 0x006a, 0x006e,
	0x0047, 0x0000, 0xffce, 0xff7b, 0xff85, 0xff95, 0xffbd, 0xfffd,
	0x004b, 0x00a5, 0x00ee, 0x0142, 0x015a, 0x016b, 0x0149, 0x0115,
	0x00fe, 0x00cf, 0x00a0, 0x005a, 0x0049, 0x0052, 0x006e, 0x0060,
	0x005d, 0x0081, 0x0072, 0x008e, 0x009c, 0x00b9, 0x0110, 0x0135,
	0x011b, 0x00d1, 0x00a6, 0x00b1, 0x00ee, 0x0108, 0x013d, 0x011d,
	0x00b9, 0x006f, 0x000a, 0xffcf, 0xffa3, 0xffc0, 0x0009, 0x005e,
	0x006b, 0x000f, 0xffab, 0xff5c, 0xff99, 0x0008, 0x0058, 0x007c,
	0x0065, 0x003f, 0x0065, 0x0072, 0x0064, 0x0064, 0x0038, 0x000c,
	0xffd0, 0xff64, 0xfeea, 0xfe87, 0xfe60, 0xfec6, 0xff4d, 0xff7d,
	0xff77, 0xff61, 0xff7d, 0xffb7, 0xffdc, 0x0002, 0xfff8, 0xffd6,
	0xffa7, 0xffb6, 0xffed, 0x001e, 0x000b, 0x0015, 0x0028, 0x003e,
	0x000e, 0xffeb, 0xffa2, 0xffae, 0xffde, 0xffef, 0x0012, 0x001c,
	0x0018, 0x004a, 0x0064, 0x005a, 0x0036, 0x0032, 0x0046, 0x00a5,
	0x00c9, 0x00d2, 0x00a9, 0x005b, 0x000b, 0xffd3, 0xffcf, 0xfff9,
	0x001d, 0x0022, 0x002f, 0x001a, 0xffe6, 0xffda, 0xfffd, 0x0032,
	0x0068, 0x0094, 0x0090, 0x0065, 0x003b, 0x0053, 0x009c, 0x00bb,
	0x00b9, 0x0077, 0x0064, 0x008a, 0x00a3, 0x0056, 0x001c, 0xfff3,
	0xfff7, 0x001f, 0x0022, 0x0015, 0x0008, 0xfffb, 0x0010, 0x001e,
	0xffd5, 0xff85, 0xff36, 0xff30, 0xff71, 0xffbc, 0xffd0, 0xffca,
	0xffd4, 0xffe9, 0x0014, 0x0023, 0xffff, 0xffc0, 0xff87, 0xffa2,
	0xffd0, 0xffe5, 0xfff0, 0xfff6, 0x002a, 0x0086, 0x00ab, 0x009d,
	0x0078, 0x0082, 0x006d, 0x007a, 0x003d, 0xffd8, 0xffb8, 0xffad,
	0xfff7, 0x0036, 0x0052, 0x0049, 0x005d, 0x0084, 0x00a5, 0x00c1,
	0x00b8, 0x00ee, 0x00ff, 0x00fa, 0x00e8, 0x00a5, 0x0060, 0x003c,
	0x0052, 0x005e, 0x005d, 0x0007, 0xffdb, 0xffd7, 0xfff1, 0x0039,
	0x003a, 0x0031, 0x0034, 0x0016, 0x0047, 0x0086, 0x0095, 0x00ac,
	0x00c6, 0x00d3, 0x00c1, 0x007b, 0x0025, 0x000a, 0x0011, 0x0008,
	0xfffb, 0xffc5, 0xffa5, 0xff95, 0xffa2, 0xffe7, 0x0060, 0x00a2,
	0x00df, 0x011e, 0x0139, 0x0168, 0x0164, 0x014b, 0x0133, 0x0111,
	0x00dd, 0x00c2, 0x0073, 0x004d, 0xfff8, 0xffa4, 0xffa7, 0xffa0,
	0xffbc, 0xfffd, 0x0022, 0x0067, 0x0095, 0x00bc, 0x00ae, 0x00b3,
	0x00c6, 0x00c8, 0x00b6, 0x0053, 0x000f, 0xffe6, 0xfff2, 0xfff6,
	0xffe5, 0xffdd, 0xffd7, 0xfffe, 0x001c, 0x007e, 0x00b9, 0x00ff,
	0x0131, 0x0133, 0x011e, 0x00fa, 0x00dd, 0x00b2, 0x008b, 0x0042,
	0xffff, 0xffba, 0xff89, 0xffa1, 0xffc9, 0xffd1, 0x0004, 0x000f,
	0x0000, 0x000b, 0x0023, 0x005e, 0x009f, 0x00a8, 0x0072, 0x003c,
	0xfff8, 0xffd3, 0xffb6, 0xffc0, 0x0005, 0x0036, 0x0040, 0x0035,
	0x001a, 0x0000, 0x000d, 0x002b, 0x0064, 0x00bc, 0x0104, 0x0147,
	0x014c, 0x0105, 0x00de, 0x00c6, 0x00ae, 0x00b7, 0x0099, 0x0064,
	0x0031, 0xffee, 0xff9b, 0xff58, 0xff53, 0xff85, 0xffb8, 0xfff0,
	0x0038, 0x0043, 0x004a, 0x005c, 0x0035, 0xffde, 0xffa4, 0xff71,
	0xff59, 0xff4d, 0xff1c, 0xff0d, 0xff27, 0xff61, 0xffa2, 0xffc3,
	0xffbb, 0xffd0, 0xff9e, 0xff3f, 0xfefb, 0xfec0, 0xfeac, 0xfee2,
	0xff30, 0xff4e, 0xff79, 0xff7f, 0xffb2, 0xffc9, 0xffe9, 0xfff3,
	0xffe1, 0xffc1, 0xffb0, 0xff79, 0xff67, 0xff82, 0xffc7, 0x0006,
	0x0025, 0x0004, 0xffd0, 0xff9f, 0xff8a, 0xff98, 0xffaf, 0xffc4,
	0xffc9, 0xffc8, 0xffba, 0xffe8, 0x0026, 0x004b, 0x0073, 0x009b,
	0x00c4, 0x00db, 0x00cf, 0x008f, 0x0070, 0x006e, 0x0093, 0x00b4,
	0x00b7, 0x0091, 0x004f, 0xfffa, 0xffb5, 0xffa0, 0xffa0, 0xffdc,
	0x000a, 0x0024, 0x0014, 0x001d, 0x002c, 0x003f, 0x0044, 0x0062,
	0x0077, 0x0054, 0x0001, 0xff7a, 0xfee1, 0xfea0, 0xfe89, 0xfea4,
	0xfee1, 0xff08, 0xff51, 0xff62, 0xff55, 0xff45, 0xff22, 0xff1d,
	0xff37, 0xff55, 0xff4e, 0xff61, 0xff59, 0xff1f, 0xfee6, 0xfe72,
	0xfe1e, 0xfdf9, 0xfdfd, 0xfe2a, 0xfe69, 0xfe7e, 0xfea0, 0xfeeb,
	0xff22, 0xffa2, 0xffe8, 0x003b, 0x006b, 0x0055, 0x0025, 0xffe6,
	0xffb6, 0xffc0, 0xffd4, 0xffc6, 0xffa5, 0xff88, 0xff4b, 0xff51,
	0xff4d, 0xff51, 0xff92, 0xffd3, 0x000a, 0x004c, 0x0095, 0x0109,
	0x013e, 0x0147, 0x011f, 0x00fa, 0x00e9, 0x0103, 0x00e2, 0x004f,
	0xffda, 0xff79, 0xff6a, 0xff6d, 0xff3b, 0xff0f, 0xff21, 0xff78,
	0x0005, 0x0073, 0x0085, 0x00bc, 0x00d8, 0x00e2, 0x00c8, 0x0098,
	0x004b, 0xfffb, 0xff9b, 0xff4c, 0xff0b, 0xfeac, 0xfe57, 0xfe17,
	0xfe12, 0xfe30, 0xfe4c, 0xfe78, 0xfea2, 0xfed2, 0xff02, 0xff32,
	0xff5f, 0xff7a, 0xffb7, 0xffc6, 0xffe3, 0xffc1, 0xff8e, 0xff55,
	0xff30, 0xff28, 0xff51, 0xff61, 0xff43, 0xff5f, 0xff6d, 0xff61,
	0xff86, 0xff8a, 0xffa9, 0x0006, 0x002e, 0x0064, 0x008d, 0x00aa,
	0x00a3, 0x0083, 0x0070, 0x004d, 0x003f, 0xffea, 0xffb6, 0xff9b,
	0xff89, 0xff9d, 0xff7a, 0xff62, 0xff79, 0xff86, 0xffb0, 0xffc1,
	0xffee, 0x0042, 0x0074, 0x008e, 0x0085, 0x0073, 0x0050, 0x001d,
	0x0023, 0x002f, 0x004c, 0x0029, 0x0019, 0x000a, 0xffe7, 0xfff8,
	0xffe2, 0xffdd, 0xffdf, 0x0002, 0x0013, 0x0024, 0x0025, 0x002e,
	0x0068, 0x006e, 0x0063, 0x0064, 0x0055, 0x005c, 0x0044, 0x000c,
	0xffad, 0xff6b, 0xff31, 0xff00, 0xfed5, 0xfeab, 0xfeb1, 0xfebd,
	0xfed0, 0xfef1, 0xff12, 0xff54, 0xffb6, 0xffd8, 0xffbd, 0xff81,
	0xff2a, 0xff00, 0xfeed, 0xfeeb, 0xfeee, 0xfed7, 0xfeb0, 0xfeb2,
	0xfe8a, 0xfe8d, 0xfe97, 0xfec4, 0xfee9, 0xff1f, 0xff51, 0xff86,
	0xffcc, 0xfff0, 0x000c, 0x0014, 0xfff5, 0xffcd, 0xff6d, 0xff13,
	0xfedf, 0xfeda, 0xfed4, 0xfee7, 0xff21, 0xff67, 0xffb7, 0xfff1,
	0x0004, 0xffca, 0xff8b, 0xffa7, 0xffd8, 0x0006, 0x001a, 0x0010,
	0x004a, 0x009c, 0x00a7, 0x0072, 0x0033, 0x0001, 0x0000, 0x0036,
	0x0049, 0x0035, 0xffe9, 0xff95, 0xff89, 0xffc2, 0x0007, 0x0027,
	0x0053, 0x0074, 0x00b8, 0x00f9, 0x0139, 0x0161, 0x0134, 0x0100,
	0x00c7, 0x006a, 0x0009, 0xff9c, 0xff4a, 0xff36, 0xff31, 0xff16,
	0xfee4, 0xfe9b, 0xfea1, 0xfedb, 0xff4a, 0xffc8, 0x003a, 0x0067,
	0x0047, 0x0004, 0xff9b, 0xff52, 0xff03, 0xfed9, 0xfef4, 0xff0a,
	0xff1d, 0xff18, 0xfedf, 0xfebb, 0xfede, 0xff10, 0xff81, 0xfff0,
	0x005f, 0x00b0, 0x00e0, 0x00f2, 0x00cd, 0x007f, 0x0070, 0x0079,
	0x008f, 0x0066, 0xfff2, 0xff2f, 0xfeb0, 0xfe8b, 0xfec3, 0xff18,
	0xff5e, 0xff4e, 0xff74, 0xffb7, 0xfffb, 0x000f, 0x0013, 0x0039,
	0x008d, 0x00ae, 0x0091, 0x0048, 0xffed, 0xffa4, 0xff86, 0xffa5,
	0xffdf, 0xffe4, 0xffc9, 0xffc7, 0xffca, 0xffdf, 0x0026, 0x0051,
	0x0066, 0x007b, 0x00ad, 0x00f9, 0x015f, 0x015b, 0x0131, 0x00fd,
	0x00cb, 0x006b, 0xfff3, 0xff80, 0xff70, 0xff91, 0xffbe, 0xffd3,
	0xffb0, 0xff7e, 0xff87, 0xffbe, 0xfff0, 0x0012, 0x0010, 0xfff1,
	0xffd7, 0xffba, 0xffcb, 0xffcf, 0xffbb, 0xffa8, 0xff7b, 0xff55,
	0xff31, 0xfefc, 0xfefb, 0xfefb, 0xff06, 0xff0a, 0xff22, 0xff29,
	0xff47, 0xffb0, 0x0011, 0x008c, 0x007d, 0x0056, 0x000a, 0xffab,
	0xff69, 0xff49, 0xff55, 0xffa8, 0xffe9, 0xffef, 0xffd0, 0xff86,
	0xff32, 0xff11, 0xff1e, 0xff2a, 0xff72, 0xffa6, 0xffe5, 0xffda,
	0xffa8, 0xff96, 0xffb9, 0xffc5, 0xffdb, 0xffcf, 0xff9e, 0xff7e,
	0xff5d, 0xff40, 0xff71, 0xffbe, 0x001e, 0x0078, 0x0077, 0x005e,
	0x0058, 0x007a, 0x00c3, 0x00f3, 0x00f8, 0x00fa, 0x00f6, 0x00d0,
	0x0095, 0x0038, 0xffe9, 0xffd9, 0xffe8, 0x000b, 0x0000, 0xffb4,
	0xff60, 0xff48, 0xff49, 0xff83, 0xffb0, 0xffda, 0x0015, 0x0068,
	0x00aa, 0x00d4, 0x00b9, 0x006c, 0x003a, 0x003a, 0x006c, 0x006f,
	0x0020, 0xffbe, 0xff5e, 0xff1d, 0xff23, 0xff40, 0xff5c, 0xff8c,
	0xffd0, 0xfffd, 0xfff2, 0xffb9, 0xff8a, 0xffba, 0xfff7, 0x0044,
	0x003a, 0x0018, 0x0017, 0x0010, 0xfff2, 0xffc6, 0xffd6, 0xffc6,
	0xff99, 0xff86, 0xff48, 0xff4a, 0xff64, 0xff95, 0xffea, 0xfffc,
	0x000b, 0x0018, 0x0002, 0xffef, 0xffec, 0x0017, 0x0044, 0x0034,
	0xffe0, 0xff8e, 0xff57, 0xff51, 0xff49, 0xff36, 0xff31, 0xff36,
	0xff3e, 0xff50, 0xff79, 0xff77, 0xff83, 0xffa3, 0xffc8, 0x001f,
	0x007c, 0x00cb, 0x0155, 0x0161, 0x00fd, 0x009d, 0x0005, 0xffd0,
	0x0000, 0x0033, 0x0073, 0x008e, 0x0082, 0x0058, 0x0056, 0x006f,
	0x0097, 0x00b0, 0x00b3, 0x00c1, 0x00ba, 0x0082, 0x0055, 0xffe7,
	0xff7f, 0xff5d, 0xff48, 0xff67, 0xff62, 0xff47, 0xff0f, 0xfeec,
	0xfedd, 0xff07, 0xff12, 0xff18, 0xff37, 0xff65, 0xffc5, 0xfffa,
	0xfff2, 0x0015, 0x0027, 0x0059, 0x0065, 0x0013, 0xff7e, 0xfef5,
	0xfead, 0xfea9, 0xff00, 0xff5b, 0xffba, 0x0023, 0x0089, 0x00f5,
	0x0112, 0x00dc, 0x009b, 0x0077, 0x0070, 0x0090, 0x00bf, 0x00bf,
	0x00d1, 0x009a, 0x0059, 0x0029, 0xffdd, 0xffb9, 0xffb2, 0xffea,
	0x005c, 0x00a1, 0x00b2, 0x00bd, 0x00d2, 0x00bf, 0x0084, 0x0044,
	0x0013, 0xffeb, 0xfff2, 0x0001, 0x001e, 0x000c, 0xfff9, 0xffec,
	0xffc6, 0xffe0, 0x0008, 0x0019, 0x0024, 0x002e, 0x0012, 0x0009,
	0x000f, 0xffe3, 0xffef, 0x000b, 0x0055, 0x007d, 0x0069, 0x002a,
	0xffb0, 0xff1b, 0xfeae, 0xfe8a, 0xfed6, 0xff4e, 0xffcf, 0xffea,
	0xffd4, 0xff9c, 0xff6f, 0xff8f, 0xffe9, 0x0040, 0x008e, 0x0093,
	0x0095, 0x0051, 0xfff6, 0xff90, 0xff4b, 0xff3b, 0xff5e, 0xffa0,
	0xfff1, 0x003e, 0x0080, 0x00b9, 0x00fd, 0x0117, 0x0121, 0x0114,
	0x00eb, 0x00ea, 0x00d3, 0x00c0, 0x00a0, 0x005b, 0x0044, 0x002e,
	0x0020, 0xfff0, 0xffcc, 0xff97, 0xff94, 0xffac, 0xffcf, 0x0023,
	0x008b, 0x00c9, 0x00f1, 0x00ed, 0x00ba, 0x0098, 0x0087, 0x0061,
	0x0066, 0x0060, 0x0065, 0x0077, 0x005c, 0x0031, 0x0000, 0xffc3,
	0xff9b, 0xff80, 0xff75, 0xffbf, 0x0017, 0x0077, 0x00b4, 0x00cc,
	0x00c4, 0x00a9, 0x00a3, 0x0093, 0x00be, 0x00a3, 0x0069, 0x000d,
	0xffa0, 0xff60, 0xff46, 0xff88, 0x0023, 0x00a6, 0x00d1, 0x00af,
	0x0063, 0x0031, 0x0042, 0x006d, 0x00a5, 0x00c2, 0x0097, 0x005a,
	0x0008, 0xffca, 0xff85, 0xff3f, 0xff17, 0xff60, 0xffa7, 0xffc9,
	0xffd4, 0xffd2, 0x0034, 0x00b2, 0x0127, 0x0161, 0x015c, 0x011d,
	0x00c9, 0x0079, 0x0011, 0xffd1, 0xff9b, 0xff88, 0xffb6, 0xffc7,
	0xffc7, 0xffcd, 0xffb8, 0xffd4, 0x0003, 0x0060, 0x00b4, 0x00c8,
	0x009a, 0x009a, 0x00ab, 0x00da, 0x0109, 0x00fa, 0x00f9, 0x00e3,
	0x00dc, 0x00c7, 0x00a5, 0x007e, 0x009e, 0x00d4, 0x00e9, 0x00fa,
	0x00df, 0x00a1, 0x0064, 0x005f, 0x009f, 0x011d, 0x0191, 0x01f9,
	0x0201, 0x017c, 0x00fc, 0x007c, 0x0031, 0x002f, 0x0033, 0x000f,
	0xffd8, 0xffa8, 0xff7d, 0xff5e, 0xff5d, 0xff9f, 0xfff0, 0x0051,
	0x00a2, 0x00c1, 0x0078, 0x0003, 0xff92, 0xff37, 0xff3d, 0xff58,
	0xff49, 0xff37, 0xfef8, 0xfeaf, 0xfe76, 0xfe33, 0xfe4e, 0xfe85,
	0xfef5, 0xff70, 0xffcd, 0xffb6, 0xff81, 0xff3d, 0xff2f, 0xff58,
	0xffae, 0xffe7, 0x000f, 0x0032, 0x0048, 0x0071, 0x004f, 0x0034,
	0x0031, 0x0033, 0x0061, 0x0077, 0x0087, 0x0072, 0x0091, 0x007f,
	0x00ba, 0x0109, 0x0153, 0x018d, 0x0193, 0x015a, 0x0127, 0x00e8,
	0x008e, 0x004b, 0x0016, 0x0017, 0x0033, 0x002b, 0x000a, 0xffde,
	0xffbb, 0xffe4, 0x000c, 0x0038, 0x006d, 0x008a, 0x0063, 0x0048,
	0x001a, 0x0031, 0x0077, 0x00b1, 0x00c8, 0x00ab, 0x005b, 0x002c,
	0xffe0, 0xff96, 0xff51, 0xff82, 0xffdb, 0x0055, 0x004d, 0xfff0,
	0xff74, 0xff12, 0xff2e, 0xff73, 0xffa9, 0xffb6, 0xffa6, 0xffac,
	0xffb5, 0xff99, 0xff76, 0xff84, 0xffa2, 0xffba, 0xffa8, 0xff61,
	0xff0f, 0xfecd, 0xfebd, 0xff02, 0xff60, 0xff82, 0xff7a, 0xff61,
	0xff61, 0xff71, 0xff68, 0xff51, 0xff1e, 0xfef1, 0xfefd, 0xff40,
	0xff8c, 0xff89, 0xff79, 0xff82, 0xffc2, 0xfff4, 0xfffe, 0xffdb,
	0xffc4, 0xffc9, 0xffe6, 0xffe9, 0xfffa, 0xfff4, 0x0019, 0x004a,
	0x0055, 0x002d, 0xffff, 0x0019, 0x005f, 0x00b7, 0x00fb, 0x011b,
	0x00fd, 0x00a5, 0x005b, 0x0049, 0x005a, 0x00ad, 0x00d3, 0x00e2,
	0x00dd, 0x00cb, 0x00ad, 0x0081, 0x0088, 0x00aa, 0x00dd, 0x0100,
	0x00bc, 0x0076, 0x0043, 0x0042, 0x0058, 0x002b, 0xffff, 0xffcc,
	0xffda, 0x0003, 0x0015, 0xffd2, 0xffa4, 0xff8e, 0xff8a, 0xffb3,
	0xffaf, 0xffb3, 0xffc8, 0xfff4, 0x0016, 0xffde, 0xff6a, 0xfee4,
	0xfea9, 0xfeb9, 0xfef3, 0xff42, 0xff5b, 0xff73, 0xff97, 0xffb6,
	0xffd0, 0xffd2, 0xffb2, 0xffa9, 0xffbf, 0xfff0, 0xfff0, 0xffc7,
	0xff8a, 0xff87, 0xffcc, 0x0038, 0x0063, 0x004c, 0x0025, 0x0020,
	0x000f, 0x002b, 0x0001, 0x000c, 0x0023, 0x0059, 0x00bb, 0x00cd,
	0x008c, 0x004f, 0x0054, 0x0065, 0x0077, 0x0062, 0x003b, 0x003f,
	0x002f, 0x0014, 0xfff1, 0xffcf, 0xffb6, 0xffc1, 0xffe6, 0x000b,
	0x001a, 0xfff2, 0xfffd, 0x0044, 0x0085, 0x00c5, 0x00ae, 0x0092,
	0x0062, 0x0023, 0x0024, 0x0049, 0x005e, 0x0061, 0x007a, 0x0081,
	0x008f, 0x008c, 0x0096, 0x00b5, 0x00d7, 0x00ed, 0x00d1, 0x0064,
	0xffe0, 0xffa4, 0xffb9, 0xffdb, 0x0021, 0x000d, 0x0016, 0x0022,
	0x0027, 0x001d, 0x002b, 0x003c, 0x0085, 0x009d, 0x0096, 0x008e,
	0x0038, 0xfff3, 0xffb0, 0xff72, 0xff87, 0xff87, 0xffa5, 0xffae,
	0xffac, 0xffc2, 0xffd6, 0x0001, 0x000a, 0x002c, 0x0050, 0x004d,
	0x004a, 0x0002, 0xffda, 0xffc2, 0xffe2, 0x000c, 0x002e, 0x0029,
	0x0015, 0x0010, 0x000e, 0x0022, 0x0020, 0x0039, 0x0054, 0x004e,
	0x003a, 0x0009, 0xffd6, 0xffc6, 0xffb9, 0xff9b, 0xff99, 0xffad,
	0xffd8, 0x001f, 0x006b, 0x007c, 0x008a, 0x006e, 0x0073, 0x0083,
	0x0090, 0x009b, 0x0092, 0x0069, 0x0027, 0x002b, 0x0001, 0x0024,
	0x003a, 0x0063, 0x009a, 0x00d2, 0x00ba, 0x0080, 0x0061, 0x0057,
	0x00a0, 0x00d0, 0x00f6, 0x0123, 0x0121, 0x010a, 0x00e8, 0x0094,
	0x0086, 0x0079, 0x005b, 0x0050, 0x0019, 0xffed, 0xffbd, 0xff90,
	0xff49, 0xff49, 0xff64, 0xff82, 0xffc1, 0xfffd, 0x003f, 0x006f,
	0x00a0, 0x00ae, 0x0073, 0xffff, 0xffdb, 0xffc8, 0xffc2, 0xffa4,
	0xff5d, 0xff3e, 0xff3d, 0xff35, 0xff20, 0xff2b, 0xff24, 0xff47,
	0xff2c, 0xff0c, 0xff17, 0xff0e, 0xff1f, 0xff5e, 0xffa4, 0xffe0,
	0x000b, 0x0008, 0xffe8, 0xffa6, 0xff76, 0xff72, 0xff8a, 0xffaf,
	0xffc0, 0xffaa, 0xff8a, 0xff9b, 0xffbc, 0xffd8, 0xffe8, 0xffda,
	0xffbf, 0xffc3, 0xffca, 0xfff5, 0x0027, 0x0071, 0x00d5, 0x0139,
	0x0185, 0x01a8, 0x017c, 0x013b, 0x010c, 0x00e1, 0x00c2, 0x00a4,
	0x0052, 0x001e, 0xfff8, 0x0020, 0x0067, 0x00e9, 0x0132, 0x0155,
	0x0155, 0x0116, 0x00d1, 0x009e, 0x0098, 0x00be, 0x00c1, 0x00c1,
	0x00a7, 0x0073, 0x005a, 0x005f, 0x008f, 0x00bf, 0x00e5, 0x00b6,
	0x0059, 0xffda, 0xff67, 0xff2d, 0xff21, 0xff6b, 0xffba, 0xffcd,
	0xffc2, 0xff9a, 0xff47, 0xfef8, 0xfef0, 0xfefc, 0xff56, 0xff98,
	0xffb9, 0xffb2, 0xff6a, 0xfeff, 0xfe9e, 0xfe2d, 0xfdda, 0xfde2,
	0xfde5, 0xfe03, 0xfe49, 0xfe68, 0xfeba, 0xff08, 0xff57, 0xffbb,
	0x0006, 0x001c, 0xffe8, 0xff89, 0xff27, 0xfee2, 0xfecc, 0xfee3,
	0xff2a, 0xff62, 0xff85, 0xff8f, 0xff95, 0xffa5, 0xffbb, 0xffd1,
	0xffe8, 0x000a, 0x0028, 0x0048, 0x0071, 0x0087, 0x00ae, 0x00bc,
	0x00c8, 0x00ef, 0x0112, 0x0110, 0x0107, 0x00b6, 0x007a, 0x0054,
	0x0027, 0x002c, 0xfff9, 0xffec, 0x0029, 0x0062, 0x00aa, 0x00c8,
	0x00ae, 0x007e, 0x007d, 0x0084, 0x007e, 0x0066, 0x0039, 0x002d,
	0x000c, 0xfffb, 0xffd6, 0xffa5, 0xff5f, 0xff1b, 0xfebe, 0xfe95,
	0xfe7a, 0xfe84, 0xfe97, 0xfec4, 0xfece, 0xfede, 0xfecf, 0xfebc,
	0xfeda, 0xfeed, 0xff19, 0xff15, 0xff20, 0xff15, 0xff3a, 0xff53,
	0xff8e, 0xffb5, 0xffa0, 0xffc2, 0xffcb, 0xffab, 0xff8c, 0xff48,
	0xff2f, 0xff26, 0xff36, 0xff83, 0xffba, 0xffe3, 0xfff4, 0x0002,
	0x001b, 0x0024, 0x0022, 0xffe7, 0xffde, 0xffef, 0x0015, 0x003d,
	0x0015, 0xffe3, 0xffd5, 0xffcf, 0xffe6, 0x0000, 0x0052, 0x00ba,
	0x0128, 0x014e, 0x0138, 0x0117, 0x00f0, 0x010f, 0x0139, 0x011e,
	0x0103, 0x00c2, 0x007f, 0x006f, 0x0057, 0x005a, 0x0080, 0x00ba,
	0x00ff, 0x0113, 0x00d7, 0x009c, 0x0061, 0x004f, 0x0079, 0x0085,
	0x0080, 0x004f, 0x001a, 0xffef, 0xffbd, 0xff85, 0xff53, 0xff4d,
	0xff49, 0xff2f, 0xff00, 0xfebc, 0xfecf, 0xff00, 0xff50, 0xffb3,
	0xfff3, 0xfffc, 0xffee, 0xff9c, 0xff5b, 0xff4d, 0xff5a, 0xff8d,
	0xffc5, 0xffd0, 0xffb9, 0xff6c, 0xff2e, 0xff44, 0xff74, 0xffce,
	0x0017, 0x0069, 0x0067, 0x0055, 0x003c, 0x0059, 0x00d5, 0x012b,
	0x0163, 0x0148, 0x00df, 0x0063, 0xffdc, 0xff61, 0xff3d, 0xff61,
	0xff7f, 0xffbc, 0x0005, 0x004b, 0x00a8, 0x00c7, 0x00c1, 0x0092,
	0x0050, 0x006b, 0x009e, 0x00bb, 0x009b, 0x0089, 0x00a9, 0x00d3,
	0x00b0, 0x0068, 0x001e, 0xffe5, 0x0015, 0x008c, 0x00d7, 0x00f3,
	0x00c2, 0x007e, 0x0053, 0x008a, 0x0095, 0x0080, 0x0037, 0x0006,
	0x0024, 0x005a, 0x0071, 0x007a, 0x001b, 0xffe9, 0xffbc, 0xff87,
	0xff2b, 0xfee9, 0xfecc, 0xfeef, 0xff0c, 0xff05, 0xfed5, 0xfed3,
	0xff0b, 0xff98, 0x0023, 0x0090, 0x00dd, 0x00b1, 0x0039, 0xffbd,
	0xff1f, 0xfed0, 0xfe9b, 0xfe76, 0xfeae, 0xfed6, 0xff0a, 0xff21,
	0xff16, 0xff54, 0xffbf, 0x0039, 0x009b, 0x00ed, 0x00f5, 0x00d2,
	0x00cb, 0x0097, 0x0046, 0xffea, 0xffcb, 0xffee, 0x0014, 0xfff9,
	0xff91, 0xff14, 0xfeea, 0xff1d, 0xff69, 0xffc5, 0x0007, 0x000b,
	0x003d, 0x007a, 0x0086, 0x0071, 0x0081, 0x00bc, 0x00e7, 0x00c6,
	0x005f, 0xffdd, 0xff6e, 0xff2a, 0xff5a, 0xffca, 0x0025, 0x0043,
	0x0011, 0xfff7, 0xfff5, 0x0016, 0x004d, 0x0050, 0x0032, 0x002f,
	0x0039, 0x006b, 0x007f, 0x004d, 0x0035, 0x005b, 0x005e, 0x0016,
	0xffa4, 0xff2d, 0xff17, 0xff2d, 0xff58, 0xff76, 0xff76, 0xff83,
	0xffba, 0xffe3, 0xffe7, 0xfff1, 0xffe2, 0xfff4, 0x0005, 0x0009,
	0x0026, 0x0036, 0x0025, 0x0022, 0x0016, 0x000c, 0xfff8, 0xffd5,
	0xffb7, 0xff92, 0xff97, 0xffb1, 0xffef, 0xffde, 0x0007, 0x0042,
	0x0091, 0x00f4, 0x00e3, 0x00b8, 0x007c, 0x004c, 0x0007, 0xffda,
	0xfffa, 0x0056, 0x00a1, 0x00d4, 0x00cf, 0x0084, 0x0037, 0x000b,
	0xfffc, 0x0010, 0x0051, 0x009a, 0x00de, 0x00f7, 0x00cb, 0x00c0,
	0x00ca, 0x00c3, 0x0096, 0x004f, 0x0002, 0xffc6, 0xffb3, 0xff87,
	0xff9e, 0xffbf, 0xfff7, 0x003a, 0x0056, 0x0080, 0x00b2, 0x00ed,
	0x0131, 0x0147, 0x011b, 0x00f4, 0x00fa, 0x00d1, 0x008a, 0x0022,
	0xffd8, 0xffbd, 0xfff3, 0x001d, 0x0038, 0x0018, 0x0011, 0x001b,
	0x0022, 0x004a, 0x004f, 0x004b, 0x0064, 0x009c, 0x00a7, 0x0092,
	0x003c, 0xffe8, 0xffd3, 0x0002, 0x002b, 0x0023, 0xffdd, 0xff5e,
	0xfefe, 0xfed8, 0xfede, 0xff2f, 0xff7e, 0xffca, 0xfffa, 0xffe0,
	0xffbb, 0xff62, 0xff49, 0xffae, 0x0038, 0x00ac, 0x00db, 0x00f2,
	0x00d2, 0x00a1, 0x004d, 0x0010, 0x0022, 0x0017, 0x001a, 0xffee,
	0xff99, 0xffa4, 0xffb2, 0xfff2, 0x0053, 0x0083, 0x009d, 0x00a8,
	0x00a1, 0x007c, 0x0083, 0x0097, 0x00c9, 0x00c9, 0x0073, 0x001f,
	0xffce, 0xff9f, 0xff90, 0xff78, 0xff7b, 0xffad, 0xffe2, 0x000f,
	0x0007, 0xffdc, 0xffc4, 0xffdc, 0xfff9, 0x0033, 0x004f, 0x0080,
	0x00a0, 0x0039, 0xffbb, 0xff6e, 0xff2b, 0xff28, 0xff4b, 0xff68,
	0xff7a, 0xff84, 0xff64, 0xff41, 0xff57, 0xff6e, 0xff6f, 0xff5b,
	0xff32, 0xff48, 0xff62, 0xff86, 0xffa4, 0xff88, 0xff5d, 0xff6c,
	0xff6f, 0xff6f, 0xff42, 0xfef4, 0xfecc, 0xfed8, 0xfefb, 0xff0f,
	0xff15, 0xfef6, 0xfef8, 0xff19, 0xff5b, 0xff87, 0xffa8, 0xffde,
	0x002a, 0x0080, 0x007c, 0x002b, 0xff93, 0xff3b, 0xff25, 0xff2e,
	0xff59, 0xff70, 0xff7d, 0xff9c, 0xffdd, 0x0018, 0x0019, 0xfff7,
	0xffc1, 0xffce, 0xffd2, 0x000f, 0x0057, 0x008a, 0x009b, 0x0071,
	0x0051, 0xfff1, 0xff7b, 0xff26, 0xfeff, 0xff32, 0xff93, 0xffca,
	0xfffb, 0x0013, 0x0036, 0x0026, 0x000f, 0xfff6, 0xffe7, 0xfff4,
	0x0007, 0x0019, 0x000b, 0xffcc, 0xff94, 0xff5e, 0xff33, 0xff23,
	0xff1a, 0xff31, 0xff66, 0xff90, 0xff8b, 0xffa3, 0xffa7, 0xff85,
	0xff83, 0xff92, 0xffaf, 0xffb4, 0xff91, 0xff69, 0xff11, 0xfee0,
	0xfef3, 0xff19, 0xff5b, 0xffbd, 0x001d, 0x0010, 0xffdf, 0xff5f,
	0xff0d, 0xff20, 0xff69, 0xffbf, 0xfff1, 0x000d, 0x000f, 0x0010,
	0xffdc, 0xff97, 0xff5e, 0xff48, 0xff48, 0xff5e, 0xff6a, 0xff6b,
	0xff82, 0xffb1, 0xffff, 0x001c, 0x0006, 0xfff4, 0xffe8, 0x0000,
	0x0013, 0x001e, 0x0055, 0x004f, 0x0023, 0xffde, 0xff89, 0xff4d,
	0xff23, 0xff18, 0xff32, 0xff6f, 0xffc6, 0x0011, 0x0057, 0x0060,
	0x003b, 0x0054, 0x006c, 0x00ac, 0x009a, 0x004c, 0x0022, 0x0010,
	0x001b, 0xfffe, 0xffc0, 0xff92, 0xffa5, 0xffa1, 0xff8e, 0xff8f,
	0xff9b, 0xfff1, 0x0025, 0x0070, 0x008a, 0x00a9, 0x006b, 0x003b,
	0x001f, 0x001d, 0x0041, 0x0010, 0xffd9, 0xffa3, 0xff67, 0xff5f,
	0xff6e, 0xffa9, 0x0005, 0x0040, 0x003c, 0x0034, 0x0023, 0x0013,
	0x004e, 0x0089, 0x00b0, 0x00a1, 0x0068, 0x0035, 0x0007, 0xffc0,
	0xff77, 0xff1b, 0xfedf, 0xfef8, 0xff02, 0xff19, 0xff2a, 0xff3c,
	0xff91, 0xffea, 0x0028, 0x0014, 0xfff0, 0xff9e, 0xff62, 0xff40,
	0xff15, 0xfefd, 0xfed8, 0xfec1, 0xfec9, 0xfecd, 0xfeb6, 0xfea6,
	0xfe8f, 0xfea8, 0xfef7, 0xff48, 0xff9d, 0xffd8, 0x0006, 0x005c,
	0x0090, 0x00c3, 0x009d, 0x0056, 0xffe0, 0xff6f, 0xff53, 0xff50,
	0xff67, 0xff5a, 0xff79, 0xff91, 0xffba, 0xfff7, 0x000c, 0x0027,
	0x003f, 0x0063, 0x0076, 0x00a0, 0x00de, 0x0122, 0x0133, 0x00e6,
	0x0065, 0xffea, 0xffae, 0xffba, 0xffde, 0xffe8, 0xffe2, 0xffcc,
	0xff9a, 0xff55, 0xff2f, 0xff5f, 0xffe1, 0x0097, 0x0100, 0x0129,
	0x00cd, 0x0068, 0xffe1, 0xff7d, 0xff56, 0xff34, 0xfefd, 0xfebd,
	0xfe4c, 0xfdf9, 0xfdc7, 0xfdbf, 0xfdff, 0xfe8b, 0xff31, 0xffcd,
	0x0042, 0x0044, 0x0010, 0xffcd, 0xffc1, 0xffc1, 0xffde, 0xff9f,
	0xff65, 0xff16, 0xfeed, 0xff03, 0xfedf, 0xfed5, 0xfed5, 0xfee9,
	0xff04, 0xff3e, 0xff74, 0xff9a, 0xfffc, 0x003a, 0x0077, 0x0095,
	0x0069, 0x004b, 0x002b, 0x0018, 0x001a, 0xfff6, 0xffbf, 0xffa9,
	0xff8e, 0xff8e, 0xffb2, 0xffdc, 0x0006, 0xfffe, 0xfff4, 0x001b,
	0x0036, 0x004e, 0x0063, 0x0063, 0x004b, 0x0050, 0x0070, 0x00aa,
	0x00f6, 0x00f9, 0x00c2, 0x0049, 0xffe2, 0xff93, 0xff73, 0xff3b,
	0xff57, 0xff97, 0xffec, 0x0054, 0x0072, 0x006b, 0x0061, 0x0069,
	0x009b, 0x00c5, 0x00b5, 0x0079, 0x0059, 0x0093, 0x00d6, 0x00e4,
	0x00d1, 0x00cd, 0x00a2, 0x0097, 0x0084, 0x0051, 0xfff2, 0xff7d,
	0xff24, 0xff26, 0xff27, 0xff0f, 0xff25, 0xff46, 0xff9f, 0xffda,
	0x000f, 0xffe3, 0xffbd, 0xffa3, 0xff82, 0xffae, 0xffbc, 0xffab,
	0xff9d, 0xff77, 0xff78, 0xff5b, 0xff29, 0xfefb, 0xff14, 0xff40,
	0xff8c, 0xffc1, 0xffde, 0xfff6, 0x003d, 0x0069, 0x005c, 0x0031,
	0x001f, 0x0059, 0x00ab, 0x0101, 0x010b, 0x00c5, 0x006a, 0x0027,
	0x0011, 0x0051, 0x00c0, 0x010a, 0x013a, 0x010c, 0x00dc, 0x00a0,
	0x0071, 0x0072, 0x00ab, 0x00c8, 0x00fd, 0x011a, 0x00dd, 0x00a4,
	0x00a3, 0x00c4, 0x00f6, 0x0101, 0x00b1, 0x0065, 0x0041, 0x0048,
	0x0041, 0x0034, 0x0069, 0x00b8, 0x00e2, 0x00d8, 0x0083, 0x002a,
	0x0021, 0x0055, 0x0055, 0x0016, 0xff84, 0xfee5, 0xfe9d, 0xfea6,
	0xff02, 0xff66, 0xff87, 0xffa1, 0xff94, 0xff54, 0xff27, 0xfef1,
	0xfeba, 0xfed4, 0xff00, 0xff29, 0xff2b, 0xfefd, 0xfedf, 0xff1e,
	0xff9b, 0x0003, 0x0044, 0xfffe, 0xffdc, 0xffb1, 0xff7f, 0xff5f,
	0xff27, 0xff0f, 0xff4c, 0xffb0, 0x001d, 0x0055, 0x0039, 0x002d,
	0x0044, 0x0052, 0x0084, 0x0090, 0x0095, 0x00b9, 0x00d2, 0x00d6,
	0x00cc, 0x00a4, 0x0070, 0x0082, 0x006d, 0x0023, 0x0002, 0xffcc,
	0x0003, 0x005c, 0x00b8, 0x00ed, 0x00ed, 0x00dd, 0x00e0, 0x00de,
	0x00f9, 0x0126, 0x0111, 0x0103, 0x00da, 0x00b2, 0x0083, 0x005e,
	0x0032, 0x0054, 0x006e, 0x005b, 0x0017, 0xffc8, 0xff74, 0xff68,
	0xff9f, 0x0008, 0x007f, 0x00ad, 0x00e4, 0x0106, 0x0100, 0x00e5,
	0x00cf, 0x00b0, 0x008f, 0x006d, 0xfffa, 0xffa2, 0xff32, 0xfefd,
	0xfee6, 0xff0d, 0xff51, 0xff93, 0xffc9, 0xffce, 0xfff6, 0x000e,
	0x004a, 0x0075, 0x005f, 0x006e, 0x0065, 0x003f, 0xffff, 0xffbc,
	0xff91, 0xffa0, 0xffc3, 0xffc0, 0xffc8, 0xff9b, 0xff97, 0xffad,
	0xffa9, 0xffec, 0x0046, 0x008d, 0x00a1, 0x0091, 0x0045, 0x0017,
	0x000f, 0x0027, 0x0051, 0x0060, 0x0040, 0xfffb, 0xffbc, 0xffc5,
	0xffed, 0xfff2, 0x001c, 0x0038, 0x0054, 0x0051, 0x0050, 0x004c,
	0x0079, 0x0085, 0x0091, 0x0095, 0x0061, 0x0033, 0x001c, 0x003d,
	0x0085, 0x00b6, 0x0089, 0x003f, 0xfffe, 0xffbf, 0xffe0, 0x000f,
	0x0056, 0x00b0, 0x00ce, 0x00d1, 0x00b5, 0x0090, 0x0088, 0x005b,
	0x001f, 0x0000, 0xffd4, 0xff7b, 0xff44, 0xff12, 0xfefb, 0xff21,
	0xff48, 0xff58, 0xff82, 0xffa3, 0xffd6, 0x0004, 0x0018, 0xfffc,
	0xffb5, 0xff6c, 0xff62, 0xff78, 0xff82, 0xff9c, 0xff9c, 0xffa5,
	0xffcd, 0xffbc, 0xffb2, 0xffa8, 0xff93, 0xffa8, 0xffb4, 0xff9d,
	0xff82, 0xff68, 0xff6c, 0xff9d, 0xffc7, 0xffdb, 0xfff7, 0x0017,
	0x0029, 0x002b, 0x001c, 0x0030, 0x0078, 0x00c0, 0x00dd, 0x00e8,
	0x00d4, 0x00df, 0x00e3, 0x00a8, 0x0054, 0xfff0, 0xffcc, 0x0004,
	0x0014, 0x0027, 0x0057, 0x0076, 0x009d, 0x00c0, 0x00d4, 0x00ef,
	0x010a, 0x0104, 0x0108, 0x00f3, 0x00df, 0x00d9, 0x00a0, 0x0078,
	0x0062, 0x006b, 0x0071, 0x0099, 0x007f, 0x0044, 0x0012, 0xffed,
	0x0000, 0x0032, 0x0047, 0x0080, 0x0096, 0x00ac, 0x00c5, 0x00cd,
	0x00b3, 0x00c7, 0x00c6, 0x00b5, 0x008b, 0x0041, 0xffff, 0xffa6,
	0xff75, 0xff88, 0xffcc, 0x000e, 0x0055, 0x0066, 0x006c, 0x0056,
	0x003a, 0x0035, 0x006e, 0x00b0, 0x010d, 0x012c, 0x0138, 0x0104,
	0x00b1, 0x0032, 0xffcc, 0xff47, 0xfec9, 0xfeb1, 0xfea5, 0xfef9,
	0xff6f, 0xffbd, 0x0045, 0x00a6, 0x00eb, 0x0111, 0x0135, 0x0120,
	0x00f1, 0x009c, 0x0054, 0x003f, 0x0041, 0x0036, 0x0033, 0xfff9,
	0xffca, 0xffa3, 0xff89, 0xffa4, 0xffc4, 0xffed, 0x003a, 0x0097,
	0x00f7, 0x0161, 0x01f1, 0x0250, 0x0260, 0x0232, 0x01e7, 0x01b8,
	0x0193, 0x0159, 0x0100, 0x007d, 0x0029, 0xfff6, 0xffea, 0xfff1,
	0xffe5, 0x001d, 0x009d, 0x0104, 0x0131, 0x0126, 0x0105, 0x00f6,
	0x0131, 0x0148, 0x014b, 0x011c, 0x00b2, 0x004c, 0xfffa, 0xffc6,
	0xffb1, 0xffaa, 0xff6d, 0xff26, 0xfeea, 0xfecd, 0xfef6, 0xff27,
	0xff6e, 0xffa7, 0xffa7, 0xffba, 0xffcf, 0xfff2, 0x000e, 0x0040,
	0x0051, 0x005c, 0x0036, 0xffe5, 0xffd2, 0xffd1, 0xffe3, 0xffe9,
	0xffe2, 0xffe8, 0xffc8, 0xff94, 0xff3c, 0xfef3, 0xfeda, 0xff13,
	0xff88, 0xfff4, 0x0044, 0x006c, 0x0050, 0x0066, 0x0042, 0x0020,
	0xffff, 0xffb6, 0xff8e, 0xff67, 0xff4e, 0xff29, 0xff22, 0xff4a,
	0xff6e, 0xffa3, 0xffda, 0xffff, 0x0017, 0x0037, 0x006b, 0x006e,
	0x0081, 0x00ae, 0x00a1, 0x00cb, 0x00c7, 0x008c, 0x0040, 0x0028,
	0x0053, 0x0089, 0x0097, 0x0086, 0x0089, 0x0070, 0x0086, 0x009c,
	0x0075, 0x0068, 0x0057, 0x004d, 0x0050, 0x0059, 0x0069, 0x007e,
	0x00b8, 0x00f5, 0x010f, 0x00f9, 0x00bc, 0x0064, 0xffe3, 0xff68,
	0xff1a, 0xfed7, 0xfedb, 0xfef4, 0xff17, 0xff4b, 0xff83, 0xffc4,
	0xffe6, 0xffec, 0xffe7, 0xffe7, 0xffe9, 0xffc5, 0xffa8, 0xff51,
	0xff2d, 0xff08, 0xfeff, 0xff0a, 0xff28, 0xff2e, 0xff42, 0xff57,
	0xff7c, 0xffba, 0xfffb, 0x0040, 0x007a, 0x006d, 0x005b, 0x0043,
	0x0029, 0xfffe, 0xffcc, 0xffb4, 0xffa8, 0xff99, 0xff6c, 0xff86,
	0xffb4, 0xfff0, 0x0039, 0x0017, 0xffdb, 0xff94, 0xff70, 0xff9f,
	0x0000, 0x0067, 0x00b3, 0x0116, 0x0127, 0x0114, 0x00f0, 0x00b0,
	0x0073, 0x0033, 0x0047, 0x0066, 0x0040, 0xffec, 0xffab, 0xffbd,
	0x0011, 0x0075, 0x005f, 0x0037, 0x001e, 0x0036, 0x00b8, 0x0117,
	0x013b, 0x0109, 0x008d, 0x0028, 0xffb3, 0xff36, 0xfee2, 0xfec7,
	0xfecc, 0xfef0, 0xfee6, 0xfee0, 0xfec3, 0xfeed, 0xff46, 0xffd7,
	0x004c, 0x00a5, 0x00b0, 0x003d, 0xffca, 0xff52, 0xfef6, 0xfed8,
	0xfeb7, 0xfec4, 0xff16, 0xff64, 0xff93, 0xff7f, 0xff53, 0xff70,
	0xffbf, 0x0023, 0x0069, 0x00a6, 0x008a, 0x0049, 0x0044, 0x0026,
	0xfffc, 0xffe3, 0x0006, 0x0053, 0x0062, 0x0031, 0xffb5, 0xff56,
	0xff4e, 0xff90, 0xffcb, 0xfff7, 0xfff6, 0xffac, 0xffc2, 0xfff7,
	0x0018, 0x0043, 0x0082, 0x00d0, 0x00cc, 0x0096, 0x0049, 0xffeb,
	0xff95, 0xff50, 0xff87, 0xffd6, 0xfff8, 0xffd1, 0xff79, 0xff61,
	0xff81, 0xffbd, 0x001e, 0x0066, 0x0078, 0x0097, 0x00a7, 0x00ce,
	0x00d0, 0x0096, 0x0061, 0x0063, 0x0057, 0x000e, 0xffcf, 0xff93,
	0xffba, 0x0023, 0x0081, 0x00b4, 0x0094, 0x0055, 0x0035, 0x0014,
	0xfffd, 0x000b, 0x001d, 0x003c, 0x004f, 0x0046, 0x0062, 0x0088,
	0x0078, 0x007a, 0x0068, 0x0046, 0xfff2, 0xffaa, 0xff70, 0xff46,
	0xff3a, 0xff3e, 0xff95, 0xffb6, 0x0003, 0x0054, 0x00b1, 0x0115,
	0x013c, 0x0149, 0x0123, 0x00eb, 0x009e, 0x0071, 0x006c, 0x0072,
	0x0064, 0x0022, 0xffc6, 0xff72, 0xff1c, 0xff34, 0xff78, 0xffed,
	0x005f, 0x00c2, 0x00e0, 0x00ce, 0x00ac, 0x00b9, 0x00c6, 0x00b2,
	0x0078, 0x0024, 0xffc1, 0xff73, 0xff39, 0xff46, 0xff8e, 0xffe9,
	0x0020, 0x0021, 0x0009, 0x0006, 0x0021, 0x0077, 0x00be, 0x0109,
	0x011f, 0x0122, 0x0124, 0x00f3, 0x00a6, 0x0071, 0x0031, 0x003b,
	0x005a, 0x005b, 0x003a, 0xffde, 0xff94, 0xff7b, 0xff83, 0xff98,
	0xffc0, 0xffeb, 0x002c, 0x0093, 0x00d9, 0x010b, 0x0102, 0x00dc,
	0x00cc, 0x00eb, 0x00cd, 0x005c, 0xffc7, 0xff38, 0xfee4, 0xfec2,
	0xfed2, 0xff11, 0xff3a, 0xff89, 0xffd1, 0xffe7, 0x0001, 0x000c,
	0x003d, 0x009b, 0x010f, 0x013a, 0x0117, 0x00d5, 0x007a, 0x0062,
	0x001c, 0xfffb, 0x0004, 0xffd4, 0xffd3, 0xffbb, 0xff8d, 0xffaa,
	0xffec, 0x005d, 0x00c9, 0x00d6, 0x00c3, 0x007d, 0x0039, 0x002d
};
