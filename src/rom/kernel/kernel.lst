F00:0001       ; elmerucr - 16/06/2020
F00:0002       ; compiles with vasmm68k_mot
F00:0003       
F00:0004       	INCLUDE "kernel_definitions.s"
F01:0001       ; E64 definitions - 2019-11-21 elmerucr
F01:0002       
F01:0003       KERNEL_LOC	equ	$FF0000
F01:0004       
F01:0005       VEC_04_ILLEGAL_INSTRUCTION		equ	$00000010
F01:0006       VEC_10_UNIMPL_INSTRUCTION		equ	$00000028
F01:0007       VEC_11_UNIMPL_INSTRUCTION		equ	$0000002C
F01:0008       VEC_26_LEVEL2_IRQ_AUTOVECT		equ	$00000068
F01:0009       VEC_27_LEVEL3_IRQ_AUTOVECT		equ	$0000006c
F01:0010       VEC_28_LEVEL4_IRQ_AUTOVECT		equ	$00000070
F01:0011       VEC_29_LEVEL5_IRQ_AUTOVECT		equ	$00000074
F01:0012       VEC_30_LEVEL6_IRQ_AUTOVECT		equ	$00000078
F01:0013       VEC_31_LEVEL7_IRQ_AUTOVECT		equ	$0000007C
F01:0014       
F01:0015       ; ascii definitions
F01:0016       ASCII_NULL		equ	$00
F01:0017       ASCII_BACKSPACE		equ	$08
F01:0018       ASCII_LF		equ	$0A
F01:0019       ASCII_CURSOR_DOWN	equ	$11
F01:0020       ASCII_CURSOR_RIGHT	equ	$1D
F01:0021       ASCII_SPACE		equ	$20
F01:0022       ASCII_CURSOR_UP		equ	$91
F01:0023       ASCII_CURSOR_LEFT	equ	$9D
F01:0024       
F01:0025       ; scrn_codes
F01:0026       SCRN_SPACE		equ	$20
F01:0027       
F01:0028       ; char rom
F01:0029       CHAR_ROM		equ	$FD0000
F01:0030       CHAR_RAM		equ	$F10000
F01:0031       
F01:0032       ; cia
F01:0033       CIA_BASE		equ	$FE0300
F01:0034       CIA_STATUS		equ	CIA_BASE
F01:0035       CIA_CONTROL		equ	CIA_BASE+$01
F01:0036       CIA_DELAY		equ	CIA_BASE+$02
F01:0037       CIA_REPEAT		equ	CIA_BASE+$03
F01:0038       CIA_ASCII		equ	CIA_BASE+$04
F01:0039       CIA_KEYBOARD		equ	CIA_BASE+$80
F01:0040       
F01:0041       ; vicv
F01:0042       VICV_BASE		equ	$FE0400 	; vicv base register
F01:0043       VICV_BORDER_COLOR	equ	VICV_BASE	; 16 bit value
F01:0044       
F01:0045       VICV_TXT		equ	VICV_BASE+$04
F01:0046       VICV_COL		equ	VICV_BASE+$08
F01:0047       VICV_BORDER_SIZE	equ	VICV_BASE+$0C
F01:0048       VICV_ISR		equ	VICV_BASE+$0E
F01:0049       VICV_BUFFERSWAP		equ	VICV_BASE+$10
F01:0050       
F01:0051       ; timer
F01:0052       TIMER_BASE		equ	$FE0600
F01:0053       
F01:0054       ; blitter
F01:0055       BLITTER_BASE		equ	$FE0700
F01:0056       BLITTER_CONTROL		equ	BLITTER_BASE
F01:0057       BLITTER_DATA_32_BIT	equ	BLITTER_BASE+$02
F01:0058       BLITTER_CLEAR_COLOR	equ	BLITTER_BASE+$06	; 16 bit word
F01:0059       
F01:0060       ; color palette
F01:0061       C64_BLACK	equ	$F000
F01:0062       C64_WHITE	equ	$FFFF
F01:0063       C64_RED		equ	$F733
F01:0064       C64_CYAN	equ	$F8CC
F01:0065       C64_PURPLE	equ	$F849
F01:0066       C64_GREEN	equ	$F6A5
F01:0067       C64_BLUE	equ	$F339
F01:0068       C64_YELLOW	equ	$FEE8
F01:0069       C64_ORANGE	equ	$F853
F01:0070       C64_BROWN	equ	$F531
F01:0071       C64_LIGHTRED	equ	$FB77
F01:0072       C64_DARKGREY	equ	$F444
F01:0073       C64_GREY	equ	$F777
F01:0074       C64_LIGHTGREEN	equ	$FBFA
F01:0075       C64_LIGHTBLUE	equ	$F67D
F01:0076       C64_LIGHTGREY	equ	$FAAA
F01:0077       
F01:0078       ; SOUND
F01:0079       SOUND_BASE	equ	$FE0500			; base register
F01:0080       SID0_BASE	equ	SOUND_BASE
F01:0081       SID0_VOLUME	equ	SID0_BASE+$18
F01:0082       SID1_BASE	equ	SOUND_BASE+$20
F01:0083       SID1_VOLUME	equ	SID1_BASE+$18
F01:0084       
F01:0085       ; SOUND MIXING
F01:0086       SID0_LEFT	equ	SOUND_BASE+$80
F01:0087       SID0_RGHT	equ	SOUND_BASE+$81
F01:0088       SID1_LEFT	equ	SOUND_BASE+$82
F01:0089       SID1_RGHT	equ	SOUND_BASE+$83
F01:0090       
F01:0091       
F01:0092       N_C0_	equ	00*2
F01:0093       N_C0S	equ	01*2
F01:0094       N_D0_	equ	02*2
F01:0095       N_D0S	equ	03*2
F01:0096       N_E0_	equ	04*2
F01:0097       N_F0_	equ	05*2
F01:0098       N_F0S	equ	06*2
F01:0099       N_G0_	equ	07*2
F01:0100       N_G0S	equ	08*2
F01:0101       N_A0_	equ	09*2
F01:0102       N_A0S	equ	10*2
F01:0103       N_B0_	equ	11*2
F01:0104       
F01:0105       N_C1_	equ	12*2
F01:0106       N_C1S	equ	13*2
F01:0107       N_D1_	equ	14*2
F01:0108       N_D1S	equ	15*2
F01:0109       N_E1_	equ	16*2
F01:0110       N_F1_	equ	17*2
F01:0111       N_F1S	equ	18*2
F01:0112       N_G1_	equ	19*2
F01:0113       N_G1S	equ	20*2
F01:0114       N_A1_	equ	21*2
F01:0115       N_A1S	equ	22*2
F01:0116       N_B1_	equ	23*2
F01:0117       
F01:0118       N_C2_	equ	24*2
F01:0119       N_C2S	equ	25*2
F01:0120       N_D2_	equ	26*2
F01:0121       N_D2S	equ	27*2
F01:0122       N_E2_	equ	28*2
F01:0123       N_F2_	equ	29*2
F01:0124       N_F2S	equ	30*2
F01:0125       N_G2_	equ	31*2
F01:0126       N_G2S	equ	32*2
F01:0127       N_A2_	equ	33*2
F01:0128       N_A2S	equ	34*2
F01:0129       N_B2_	equ	35*2
F01:0130       
F01:0131       N_C3_	equ	36*2
F01:0132       N_C3S	equ	37*2
F01:0133       N_D3_	equ	38*2
F01:0134       N_D3S	equ	39*2
F01:0135       N_E3_	equ	40*2
F01:0136       N_F3_	equ	41*2
F01:0137       N_F3S	equ	42*2
F01:0138       N_G3_	equ	43*2
F01:0139       N_G3S	equ	44*2
F01:0140       N_A3_	equ	45*2
F01:0141       N_A3S	equ	46*2
F01:0142       N_B3_	equ	47*2
F01:0143       
F01:0144       N_C4_	equ	48*2
F01:0145       N_C4S	equ	49*2
F01:0146       N_D4_	equ	50*2
F01:0147       N_D4S	equ	51*2
F01:0148       N_E4_	equ	52*2
F01:0149       N_F4_	equ	53*2
F01:0150       N_F4S	equ	54*2
F01:0151       N_G4_	equ	55*2
F01:0152       N_G4S	equ	56*2
F01:0153       N_A4_	equ	57*2
F01:0154       N_A4S	equ	58*2
F01:0155       N_B4_	equ	59*2
F01:0156       
F01:0157       N_C5_	equ	60*2
F01:0158       N_C5S	equ	61*2
F01:0159       N_D5_	equ	62*2
F01:0160       N_D5S	equ	63*2
F01:0161       N_E5_	equ	64*2
F01:0162       N_F5_	equ	65*2
F01:0163       N_F5S	equ	66*2
F01:0164       N_G5_	equ	67*2
F01:0165       N_G5S	equ	68*2
F01:0166       N_A5_	equ	69*2
F01:0167       N_A5S	equ	70*2
F01:0168       N_B5_	equ	71*2
F01:0169       
F01:0170       N_C6_	equ	72*2
F01:0171       N_C6S	equ	73*2
F01:0172       N_D6_	equ	74*2
F01:0173       N_D6S	equ	75*2
F01:0174       N_E6_	equ	76*2
F01:0175       N_F6_	equ	77*2
F01:0176       N_F6S	equ	78*2
F01:0177       N_G6_	equ	79*2
F01:0178       N_G6S	equ	80*2
F01:0179       N_A6_	equ	81*2
F01:0180       N_A6S	equ	82*2
F01:0181       N_B6_	equ	83*2
F01:0182       
F01:0183       N_C7_	equ	84*2
F01:0184       N_C7S	equ	85*2
F01:0185       N_D7_	equ	86*2
F01:0186       N_D7S	equ	87*2
F01:0187       N_E7_	equ	88*2
F01:0188       N_F7_	equ	89*2
F01:0189       N_F7S	equ	90*2
F01:0190       N_G7_	equ	91*2
F01:0191       N_G7S	equ	92*2
F01:0192       N_A7_	equ	93*2
F01:0193       N_A7S	equ	94*2
F01:0194       
F01:0195       
F01:0196       ; ram locations
F01:0197       
F01:0198       CURR_TEXT_COLOR	equ	$008000	; word
F01:0199       CURSOR_POS	equ	$008002	; word
F01:0200       
F01:0201       TIMER0_VECTOR	equ	$008004	; long
F01:0202       TIMER1_VECTOR	equ	$008008	; long
F01:0203       TIMER2_VECTOR	equ	$00800C	; long
F01:0204       TIMER3_VECTOR	equ	$008010	; long
F01:0205       
F01:0206       CURRENT_TXT_SCR	equ	$008014	; long
F01:0207       
F01:0208       KERNEL_TEXT_SCR	equ	$008020 ; 32 bytes (up to and incl $00805F), and 32 byte aligned
F01:0209       LOGO_BLIT	equ	$008040 ; 32 bytes (up to and incl $00807F), and 32 byte aligned
F01:0210       
F01:0211       ; screen editor variables
F01:0212       SE_CRS_BLINK	equ	$008060	; byte (actually least significant bit), 0=off, 1=currently blinking
F01:0213       SE_CRS_CNTDWN	equ	$008061	; byte, counter for blinking interval
F01:0214       SE_CRS_INTERVAL	equ	$008062	; byte, duration of blinking. e.g. @60Hz value 20 means 0.33s on, 0.33s off
F01:0215       SE_ORIG_CHAR	equ	$008063	; byte, original value of the char behind the cursor
F01:0216       SE_ORIG_COLOR	equ	$008084	; word, original value of the color value behind the cursor
F00:0005       
F00:0006       	ORG	KERNEL_LOC
F00:0007       
F00:0008       	DC.L	$00E00000		; vector 0 - supervisor stackpointer
               S01:00FF0000:  00 E0 00 00
F00:0009       	DC.L	kernel_main		; vector 1 - reset vector
               S01:00FF0004:  00 FF 00 08
F00:0010       
F00:0011       
F00:0012       ; start of main kernel code
F00:0013       
F00:0014       kernel_main
F00:0015       
F00:0016       	BSR	setup_vector_table
               S01:00FF0008:  61 00 03 FE
F00:0017       	BSR	reset_sids
               S01:00FF000C:  61 00 04 5C
F00:0018       	BSR	copy_charrom_to_charram
               S01:00FF0010:  61 00 03 BA
F00:0019       
F00:0020       	; put something in the usp
F00:0021       	LEA	$C00000,A0
               S01:00FF0014:  41 F9 00 C0 00 00
F00:0022       	MOVE.L	A0,USP
               S01:00FF001A:  4E 60
F00:0023       
F00:0024       	; set up timer0 interrupts (cursor flashing)
F00:0025       
F00:0026       	MOVE.W	#$E10,TIMER_BASE+2	; load value 3600 ($E10 = 3600bpm = 60Hz)
               S01:00FF001C:  33 FC 0E 10 00 FE 06 02
F00:0027       	ORI.B	#%00000001,TIMER_BASE+1	; turn on interrupt generation by clock0
               S01:00FF0024:  00 39 00 01 00 FE 06 01
F00:0028       
F00:0029       
F00:0030       	; set up timer1 interrupts (ting sound)
F00:0031       
F00:0032       	;MOVE.W	#$3C,TIMER_BASE+2	; load value 60 ($3c = 60bpm = 1Hz)
F00:0033       	;ORI.B	#%00000010,TIMER_BASE+1	; turn on interrupt generation by clock0
F00:0034       
F00:0035       
F00:0036       	; set up timer3 interrupts at 50.125Hz for music / sid tunes
F00:0037       
F00:0038       	;MOVE.W	#$BC0,TIMER_BASE+2		; 3008bpm (=50.125Hz)
F00:0039       	;ORI.B	#%00001000,TIMER_BASE+1	; turn on interrupt generation by clock3
F00:0040       
F00:0041       
F00:0042       	; set ipl to level 1 (all interrupts levels of >= 2 will be acknowledged)
F00:0043       
F00:0044       	MOVE.W	SR,D0
               S01:00FF002C:  40 C0
F00:0045       	ANDI.W	#%1111100011111111,D0
               S01:00FF002E:  02 40 F8 FF
F00:0046       	ORI.W	#%0000000100000000,D0
               S01:00FF0032:  00 40 01 00
F00:0047       	MOVE.W	D0,SR
               S01:00FF0036:  46 C0
F00:0048       
F00:0049       	; CIA start generating keyboard events
F00:0050       	MOVE.B	#%00000001,CIA_CONTROL
               S01:00FF0038:  13 FC 00 01 00 FE 03 01
F00:0051       
F00:0052       
F00:0053       	; set color and size of border
F00:0054       	MOVE.W	#C64_BLACK,VICV_BORDER_COLOR
               S01:00FF0040:  33 FC F0 00 00 FE 04 00
F00:0055       	MOVE.B	#$10,VICV_BORDER_SIZE
               S01:00FF0048:  13 FC 00 10 00 FE 04 0C
F00:0056       
F00:0057       	; set clear color ('background')
F00:0058       	MOVE.W	#C64_BLUE,BLITTER_CLEAR_COLOR
               S01:00FF0050:  33 FC F3 39 00 FE 07 06
F00:0059       
F00:0060       	; copy the screen blit struct from rom to appropriate ram area
F00:0061       	LEA	screen_blit_structure,a0
               S01:00FF0058:  41 FA 04 E6
F00:0062       	LEA	KERNEL_TEXT_SCR,a1
               S01:00FF005C:  43 F9 00 00 80 20
F00:0063       	MOVE.L	#$20,D0			; 32 bytes
               S01:00FF0062:  70 20
F00:0064       	JSR	memcopy
               S01:00FF0064:  61 00 03 52
F00:0065       
F00:0066       	MOVE.L	#KERNEL_TEXT_SCR,CURRENT_TXT_SCR	; set current text screen
               S01:00FF0068:  23 FC 00 00 80 20 00 00 80 14
F00:0067       
F00:0068       
F00:0069       	; set txt & color pointer  -  deprecated!
F00:0070       	MOVE.L	#$00F00000,VICV_TXT
               S01:00FF0072:  23 FC 00 F0 00 00 00 FE 04 04
F00:0071       	MOVE.L	#$00F00800,VICV_COL
               S01:00FF007C:  23 FC 00 F0 08 00 00 FE 04 08
F00:0072       
F00:0073       	MOVE.W	#C64_LIGHTBLUE,CURR_TEXT_COLOR
               S01:00FF0086:  33 FC F6 7D 00 00 80 00
F00:0074       
F00:0075       
F00:0076       	; reset cursor position  -  deprecated
F00:0077       	MOVE.W	#$0,CURSOR_POS
               S01:00FF008E:  33 FC 00 00 00 00 80 02
F00:0078       
F00:0079       	MOVE.B	#$14,SE_CRS_INTERVAL	; blinking interval at 20 (0.33s)
               S01:00FF0096:  13 FC 00 14 00 00 80 62
F00:0080       
F00:0081       
F00:0082       	; clear screen and print welcome
F00:0083       
F00:0084       	BSR	se_clear_screen
               S01:00FF009E:  61 00 00 84
F00:0085       	LEA	welcome,A0
               S01:00FF00A2:  41 FA 04 BC
F00:0086       	BSR	put_string
               S01:00FF00A6:  61 00 01 E2
F00:0087       
F00:0088       
F00:0089       	; play a welcome sound on SID0
F00:0090       
F00:0091       	LEA	SID0_BASE,A0
               S01:00FF00AA:  41 F9 00 FE 05 00
F00:0092       	LEA	notes,A1
               S01:00FF00B0:  43 FA 05 68
F00:0093       	MOVE.W	N_D3_(A1),(A0)		; set frequency of voice 1
               S01:00FF00B4:  30 A9 00 4C
F00:0094       	MOVE.B	#%00001001,$5(A0)	; attack and decay of voice 1
               S01:00FF00B8:  11 7C 00 09 00 05
F00:0095       	MOVE.W	#$F0F,$02(A0)		; pulse width of voice 1
               S01:00FF00BE:  31 7C 0F 0F 00 02
F00:0096       	MOVE.B	#$FF,SID0_LEFT		; left channel mix
               S01:00FF00C4:  13 FC 00 FF 00 FE 05 80
F00:0097       	MOVE.B	#$10,SID0_RGHT		; right channel mix
               S01:00FF00CC:  13 FC 00 10 00 FE 05 81
F00:0098       	MOVE.B	#%01000001,$4(A0)	; pulse (bit 6) and open gate (bit 0)
               S01:00FF00D4:  11 7C 00 41 00 04
F00:0099       
F00:0100       
F00:0101       	; play a welcome sound on SID1
F00:0102       
F00:0103       	LEA	SID1_BASE,A0
               S01:00FF00DA:  41 F9 00 FE 05 20
F00:0104       	LEA	notes,A1
               S01:00FF00E0:  43 FA 05 38
F00:0105       	MOVE.W	N_A3_(A1),(A0)		; set frequency of voice 1
               S01:00FF00E4:  30 A9 00 5A
F00:0106       	MOVE.B	#%00001001,$5(A0)	; attack and decay of voice 1
               S01:00FF00E8:  11 7C 00 09 00 05
F00:0107       	MOVE.W	#$F0F,$2(A0)		; pulse width of voice 1
               S01:00FF00EE:  31 7C 0F 0F 00 02
F00:0108       	MOVE.B	#$10,SID1_LEFT		; left channel mix
               S01:00FF00F4:  13 FC 00 10 00 FE 05 82
F00:0109       	MOVE.B	#$FF,SID1_RGHT		; right channel mix
               S01:00FF00FC:  13 FC 00 FF 00 FE 05 83
F00:0110       	MOVE.B	#%01000001,$4(A0)	; pulse (bit 6) and open gate (bit 0)
               S01:00FF0104:  11 7C 00 41 00 04
F00:0111       
F00:0112       
F00:0113       mainloop
F00:0114       
F00:0115       	JSR	se_activate_cursor
               S01:00FF010A:  61 00 03 AE
F00:0116       
F00:0117       .start	CLR.L	D0
               S01:00FF010E:  70 00
F00:0118       	MOVE.B	CIA_ASCII,D0		; scan for a keyboard event/ascii value
               S01:00FF0110:  10 39 00 FE 03 04
F00:0119       	BEQ.S	.start			; if 0 (nothing), jump to .start
               S01:00FF0116:  67 F6
F00:0120       	JSR	se_deactivate_cursor
               S01:00FF0118:  61 00 03 DC
F00:0121       	JSR	put_char		; process input
               S01:00FF011C:  61 7A
F00:0122       	JSR	se_activate_cursor
               S01:00FF011E:  61 00 03 9A
F00:0123       
F00:0124       	BRA.S	.start
               S01:00FF0122:  60 EA
F00:0125       
F00:0126       
F00:0127       se_clear_screen
F00:0128       
F00:0129       	MOVEM.L	D0-D1/A0,-(SP)
               S01:00FF0124:  48 E7 C0 80
F00:0130       
F00:0131       	MOVEA.L	(VICV_TXT),A0
               S01:00FF0128:  20 79 00 FE 04 04
F00:0132       	MOVE.L	#$800,D0
               S01:00FF012E:  20 3C 00 00 08 00
F00:0133       	MOVE.B	#SCRN_SPACE,D1			; space screencode
               S01:00FF0134:  12 3C 00 20
F00:0134       	JSR	blockfill_bytes
               S01:00FF0138:  61 00 02 54
F00:0135       
F00:0136       	MOVEA.L	(VICV_COL),A0
               S01:00FF013C:  20 79 00 FE 04 08
F00:0137       	MOVE.L	#$800,D0
               S01:00FF0142:  20 3C 00 00 08 00
F00:0138       	MOVE.W	#C64_LIGHTBLUE,D1
               S01:00FF0148:  32 3C F6 7D
F00:0139       	JSR	blockfill_words
               S01:00FF014C:  61 00 02 52
F00:0140       
F00:0141       	MOVEM.L	(SP)+,D0-D1/A0
               S01:00FF0150:  4C DF 01 03
F00:0142       	RTS
               S01:00FF0154:  4E 75
F00:0143       
F00:0144       
F00:0145       se_scroll_up
F00:0146       
F00:0147       	MOVEM.L	D0/A0-A1,-(SP)
               S01:00FF0156:  48 E7 80 C0
F00:0148       
F00:0149       	MOVE.L	#$7C0,D0
               S01:00FF015A:  20 3C 00 00 07 C0
F00:0150       
F00:0151       	MOVEA.L	(VICV_TXT),A0
               S01:00FF0160:  20 79 00 FE 04 04
F00:0152       	MOVEA.L	(VICV_COL),A1
               S01:00FF0166:  22 79 00 FE 04 08
F00:0153       
F00:0154       .1	MOVE.B	$40(A0),(A0)
               S01:00FF016C:  10 A8 00 40
F00:0155       	MOVE.W	$80(A1),(A1)
               S01:00FF0170:  32 A9 00 80
F00:0156       	ADDA	#$1,A0
               S01:00FF0174:  52 48
F00:0157       	ADDA	#$2,A1
               S01:00FF0176:  54 49
F00:0158       	SUBQ	#$1,D0
               S01:00FF0178:  53 40
F00:0159       	BNE	.1
               S01:00FF017A:  66 F0
F00:0160       
F00:0161       .2	MOVE.B	#ASCII_SPACE,(A0)
               S01:00FF017C:  10 BC 00 20
F00:0162       	MOVE.W	CURR_TEXT_COLOR,(A1)
               S01:00FF0180:  32 B9 00 00 80 00
F00:0163       	ADDA	#$1,A0
               S01:00FF0186:  52 48
F00:0164       	ADDA	#$2,A1
               S01:00FF0188:  54 49
F00:0165       	ADDQ	#$1,D0
               S01:00FF018A:  52 40
F00:0166       	CMPI.W	#$40,D0
               S01:00FF018C:  0C 40 00 40
F00:0167       	BNE	.2
               S01:00FF0190:  66 EA
F00:0168       
F00:0169       	MOVEM.L	(SP)+,D0/A0-A1
               S01:00FF0192:  4C DF 03 01
F00:0170       	RTS
               S01:00FF0196:  4E 75
F00:0171       
F00:0172       ; put_char expects an ascii value in register D0
F00:0173       
F00:0174       put_char
F00:0175       
F00:0176       	MOVEM.L	D1-D3/A0-A2,-(SP)	; save registers
               S01:00FF0198:  48 E7 70 E0
F00:0177       	ANDI.W	#$00FF,D0		; clear bits 8-15 from D0
               S01:00FF019C:  02 40 00 FF
F00:0178       	MOVE.W	CURSOR_POS,D1		; load current cursor position into D1
               S01:00FF01A0:  32 39 00 00 80 02
F00:0179       	MOVE.W	CURR_TEXT_COLOR,D2	; load current text colour into D2
               S01:00FF01A6:  34 39 00 00 80 00
F00:0180       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S01:00FF01AC:  20 79 00 FE 04 04
F00:0181       	MOVEA.L	VICV_COL,A1		; load pointer to current color screen into A1
               S01:00FF01B2:  22 79 00 FE 04 08
F00:0182       	LEA	ascii_to_screencode,A2	; A2 now points to ascii-screencode table
               S01:00FF01B8:  45 FA 03 D0
F00:0183       	CMP.B	#ASCII_LF,D0		; do we have a line feed as the next ascii?
               S01:00FF01BC:  B0 3C 00 0A
F00:0184       	BEQ	.lf
               S01:00FF01C0:  67 3E
F00:0185       	CMP.B	#ASCII_CURSOR_DOWN,D0
               S01:00FF01C2:  B0 3C 00 11
F00:0186       	BEQ	.down
               S01:00FF01C6:  67 48
F00:0187       	CMP.B	#ASCII_CURSOR_RIGHT,D0
               S01:00FF01C8:  B0 3C 00 1D
F00:0188       	BEQ	.right
               S01:00FF01CC:  67 5C
F00:0189       	CMP.B	#ASCII_CURSOR_UP,D0
               S01:00FF01CE:  B0 3C 00 91
F00:0190       	BEQ	.up
               S01:00FF01D2:  67 64
F00:0191       	CMP.B	#ASCII_CURSOR_LEFT,D0
               S01:00FF01D4:  B0 3C 00 9D
F00:0192       	BEQ	.left
               S01:00FF01D8:  67 70
F00:0193       	CMP.B	#ASCII_BACKSPACE,D0
               S01:00FF01DA:  B0 3C 00 08
F00:0194       	BEQ	.bs
               S01:00FF01DE:  67 7A
F00:0195       
F00:0196       	; it's not a control character so print it
F00:0197       	MOVE.B	(A2,D0),D0		; change ascii value into screencode value
               S01:00FF01E0:  10 32 00 00
F00:0198       	MOVE.B	D0,(A0,D1)
               S01:00FF01E4:  11 80 10 00
F00:0199       	LSL.W	#$1,D1			; multiply index by two (color values are words contrary to tiles)
               S01:00FF01E8:  E3 49
F00:0200       	MOVE.W	D2,(A1,D1)
               S01:00FF01EA:  33 82 10 00
F00:0201       	ADDQ	#$1,CURSOR_POS
               S01:00FF01EE:  52 79 00 00 80 02
F00:0202       	ANDI.W	#$7FF,CURSOR_POS
               S01:00FF01F4:  02 79 07 FF 00 00 80 02
F00:0203       	BRA	.end
               S01:00FF01FC:  60 00 00 86
F00:0204       
F00:0205       .lf	ADDI.W	#$40,D1			; line feed, add 64 positions to current cursor pos
               S01:00FF0200:  06 41 00 40
F00:0206       	ANDI.W	#%0000011111000000,D1	; move cursor pos to beginning of line (and confine to screen)
               S01:00FF0204:  02 41 07 C0
F00:0207       	MOVE.W	D1,CURSOR_POS		; store new value
               S01:00FF0208:  33 C1 00 00 80 02
F00:0208       	BRA	.end
               S01:00FF020E:  60 74
F00:0209       
F00:0210       .down	ADDI.W	#$40,D1			; cursor down, add 64 positions to current cursor pos
               S01:00FF0210:  06 41 00 40
F00:0211       	MOVE.W	D1,D2
               S01:00FF0214:  34 01
F00:0212       	ANDI.W	#$F800,D2
               S01:00FF0216:  02 42 F8 00
F00:0213       	BEQ	.down2
               S01:00FF021A:  67 06
F00:0214       	BSR	se_scroll_up
               S01:00FF021C:  61 00 FF 38
F00:0215       	BRA	.end
               S01:00FF0220:  60 62
F00:0216       .down2	MOVE.W	D1,CURSOR_POS		; store new value
               S01:00FF0222:  33 C1 00 00 80 02
F00:0217       	BRA	.end
               S01:00FF0228:  60 5A
F00:0218       
F00:0219       .right	ADDI.W	#$1,D1			; cursor right
               S01:00FF022A:  52 41
F00:0220       	ANDI.W	#$7FF,D1
               S01:00FF022C:  02 41 07 FF
F00:0221       	MOVE.W	D1,CURSOR_POS
               S01:00FF0230:  33 C1 00 00 80 02
F00:0222       	BRA	.end
               S01:00FF0236:  60 4C
F00:0223       
F00:0224       .up	SUBI.W	#$40,D1			; cursor up
               S01:00FF0238:  04 41 00 40
F00:0225       	BMI	.end			; stop if cursor out of screen, don't store position
               S01:00FF023C:  6B 46
F00:0226       	ANDI.W	#$7FF,D1
               S01:00FF023E:  02 41 07 FF
F00:0227       	MOVE.W	D1,CURSOR_POS
               S01:00FF0242:  33 C1 00 00 80 02
F00:0228       	BRA	.end
               S01:00FF0248:  60 3A
F00:0229       
F00:0230       .left	SUBI.W	#$1,D1			; cursor left
               S01:00FF024A:  53 41
F00:0231       	BMI	.end			; stop if cursor out of screen, don't store position
               S01:00FF024C:  6B 36
F00:0232       	ANDI.W	#$7FF,D1
               S01:00FF024E:  02 41 07 FF
F00:0233       	MOVE.W	D1,CURSOR_POS
               S01:00FF0252:  33 C1 00 00 80 02
F00:0234       	BRA	.end
               S01:00FF0258:  60 2A
F00:0235       
F00:0236       .bs	SUBI.W	#$1,D1			; backspace
               S01:00FF025A:  53 41
F00:0237       	BMI	.end			; stop if cursor out of screen, don't store position
               S01:00FF025C:  6B 26
F00:0238       	ANDI.W	#$7FF,D1
               S01:00FF025E:  02 41 07 FF
F00:0239       	MOVE.W	D1,CURSOR_POS		; store the new cursor position
               S01:00FF0262:  33 C1 00 00 80 02
F00:0240       .bs1	MOVE.W	D1,D3
               S01:00FF0268:  36 01
F00:0241       	ADDQ	#$1,D3
               S01:00FF026A:  52 43
F00:0242       	ANDI.W	#%0000000000111111,D3	; are we at positon $3f?
               S01:00FF026C:  02 43 00 3F
F00:0243       	BNE	.bs2			; not yet
               S01:00FF0270:  66 08
F00:0244       	MOVE.B	#ASCII_SPACE,(A0,D1)	; yes, place a space character
               S01:00FF0272:  11 BC 00 20 10 00
F00:0245       	BRA	.end
               S01:00FF0278:  60 0A
F00:0246       .bs2	MOVE.B	$1(A0,D1),(A0,D1)
               S01:00FF027A:  11 B0 10 01 10 00
F00:0247       	ADDQ	#$1,D1
               S01:00FF0280:  52 41
F00:0248       	BRA	.bs1
               S01:00FF0282:  60 E4
F00:0249       
F00:0250       .end	MOVEM.L	(SP)+,D1-D3/A0-A2	; restore registers
               S01:00FF0284:  4C DF 07 0E
F00:0251       	RTS
               S01:00FF0288:  4E 75
F00:0252       
F00:0253       
F00:0254       put_string
F00:0255       
F00:0256       	;
F00:0257       	; put_string expects a pointer to a string in A0
F00:0258       	;
F00:0259       
F00:0260       	MOVEM.L	A0/D0,-(SP)
               S01:00FF028A:  48 E7 80 80
F00:0261       
F00:0262       .start	MOVE.B	(A0)+,D0	; move ascii value into D0, and move pointer to next char
               S01:00FF028E:  10 18
F00:0263       	BEQ	.end
               S01:00FF0290:  67 06
F00:0264       	BSR	put_char	; no, put char
               S01:00FF0292:  61 00 FF 04
F00:0265       	BRA	.start
               S01:00FF0296:  60 F6
F00:0266       
F00:0267       .end	MOVEM.L	(SP)+,A0/D0
               S01:00FF0298:  4C DF 01 01
F00:0268       	RTS
               S01:00FF029C:  4E 75
F00:0269       
F00:0270       
F00:0271       ; fake exception handler
F00:0272       
F00:0273       exception_handler
F00:0274       
F00:0275       	MOVE.L	D0,-(SP)
               S01:00FF029E:  2F 00
F00:0276       	MOVE.L	#$DEADBEEF,D0
               S01:00FF02A0:  20 3C DE AD BE EF
F00:0277       	MOVE.L	(SP)+,D0
               S01:00FF02A6:  20 1F
F00:0278       	RTE
               S01:00FF02A8:  4E 73
F00:0279       
F00:0280       
F00:0281       ; level 2 interrupt autovector (vicv start of vblank)
F00:0282       
F00:0283       interrupt_2_autovector
F00:0284       
F00:0285       	MOVE.B	#%00000001,VICV_ISR				; acknowledge VBLANK interrupt
               S01:00FF02AA:  13 FC 00 01 00 FE 04 0E
F00:0286       
F00:0287       	MOVE.B	#%00000001,VICV_BUFFERSWAP			; switch front- and backbuffer
               S01:00FF02B2:  13 FC 00 01 00 FE 04 10
F00:0288       
F00:0289       	MOVE.B	#%00000001,BLITTER_CONTROL			; clear the backbuffer
               S01:00FF02BA:  13 FC 00 01 00 FE 07 00
F00:0290       
F00:0291       	; add the blits (to be replaced by a kernel linked list)
F00:0292       	MOVE.L	#KERNEL_TEXT_SCR,BLITTER_DATA_32_BIT
               S01:00FF02C2:  23 FC 00 00 80 20 00 FE 07 02
F00:0293       	MOVE.B	#%00000010,BLITTER_CONTROL
               S01:00FF02CC:  13 FC 00 02 00 FE 07 00
F00:0294       
F00:0295       	RTE
               S01:00FF02D4:  4E 73
F00:0296       
F00:0297       
F00:0298       ; level 4 interrupt autovector (timer)
F00:0299       
F00:0300       interrupt_4_autovector
F00:0301       
F00:0302       	MOVE.L	A0,-(SP)		; save a0
               S01:00FF02D6:  2F 08
F00:0303       timer0_check
F00:0304       	BTST	#0,TIMER_BASE		; did timer 0 cause the interrupt?
               S01:00FF02D8:  08 39 00 00 00 FE 06 00
F00:0305       	BEQ	timer1_check		; no, go to next timer
               S01:00FF02E0:  67 10
F00:0306       	MOVE.B	#%00000001,TIMER_BASE	; yes, acknowledge interrupt
               S01:00FF02E2:  13 FC 00 01 00 FE 06 00
F00:0307       	MOVEA.L	TIMER0_VECTOR,A0
               S01:00FF02EA:  20 79 00 00 80 04
F00:0308       	JMP	(A0)
               S01:00FF02F0:  4E D0
F00:0309       timer1_check
F00:0310       	BTST	#1,TIMER_BASE
               S01:00FF02F2:  08 39 00 01 00 FE 06 00
F00:0311       	BEQ	timer2_check
               S01:00FF02FA:  67 10
F00:0312       	MOVE.B	#%00000010,TIMER_BASE
               S01:00FF02FC:  13 FC 00 02 00 FE 06 00
F00:0313       	MOVEA.L	TIMER1_VECTOR,A0
               S01:00FF0304:  20 79 00 00 80 08
F00:0314       	JMP	(A0)
               S01:00FF030A:  4E D0
F00:0315       timer2_check
F00:0316       	BTST	#2,TIMER_BASE		; did timer 2 cause the interrupt?
               S01:00FF030C:  08 39 00 02 00 FE 06 00
F00:0317       	BEQ	timer3_check		; no, go to next timer
               S01:00FF0314:  67 10
F00:0318       	MOVE.B	#%00000100,TIMER_BASE	; yes, acknowledge interrupt
               S01:00FF0316:  13 FC 00 04 00 FE 06 00
F00:0319       	MOVEA.L	TIMER2_VECTOR,A0
               S01:00FF031E:  20 79 00 00 80 0C
F00:0320       	JMP	(A0)
               S01:00FF0324:  4E D0
F00:0321       timer3_check
F00:0322       	BTST	#3,TIMER_BASE
               S01:00FF0326:  08 39 00 03 00 FE 06 00
F00:0323       	BEQ	timer_finish		; no, go to timer finish
               S01:00FF032E:  67 10
F00:0324       	MOVE.B	#%00001000,TIMER_BASE	; yes, acknowledge
               S01:00FF0330:  13 FC 00 08 00 FE 06 00
F00:0325       	MOVEA.L	TIMER3_VECTOR,A0
               S01:00FF0338:  20 79 00 00 80 10
F00:0326       	JMP	(A0)
               S01:00FF033E:  4E D0
F00:0327       timer_finish
F00:0328       	MOVE.L	(SP)+,A0		; restore a0
               S01:00FF0340:  20 5F
F00:0329       	RTE
               S01:00FF0342:  4E 73
F00:0330       
F00:0331       
F00:0332       ; level 5 interrupt autovector
F00:0333       
F00:0334       interrupt_5_autovector
F00:0335       
F00:0336       	MOVE.L	A0,-(SP)
               S01:00FF0344:  2F 08
F00:0337       	MOVE.L	(SP)+,A0
               S01:00FF0346:  20 5F
F00:0338       	RTE
               S01:00FF0348:  4E 73
F00:0339       
F00:0340       
F00:0341       ; level 6 interrupt autovector
F00:0342       
F00:0343       interrupt_6_autovector
F00:0344       
F00:0345       	RTE
               S01:00FF034A:  4E 73
F00:0346       
F00:0347       
F00:0348       ; level 7 interrupt autovector
F00:0349       
F00:0350       interrupt_7_autovector
F00:0351       
F00:0352       	RTE
               S01:00FF034C:  4E 73
F00:0353       
F00:0354       
F00:0355       timer0_handler
F00:0356       
F00:0357       	; cursor flash
F00:0358       	MOVEM.L	D0/A0,-(SP)
               S01:00FF034E:  48 E7 80 80
F00:0359       
F00:0360       	BTST.B	#$1,SE_CRS_BLINK
               S01:00FF0352:  08 39 00 01 00 00 80 60
F00:0361       	BNE	.end
               S01:00FF035A:  66 24
F00:0362       
F00:0363       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S01:00FF035C:  20 79 00 FE 04 04
F00:0364       	MOVE.W	CURSOR_POS,D0
               S01:00FF0362:  30 39 00 00 80 02
F00:0365       	SUBQ.B	#$1,SE_CRS_CNTDWN
               S01:00FF0368:  53 39 00 00 80 61
F00:0366       	BNE	.end
               S01:00FF036E:  66 10
F00:0367       	EORI.B	#%10000000,(A0,D0)
               S01:00FF0370:  0A 30 00 80 00 00
F00:0368       	MOVE.B	SE_CRS_INTERVAL,SE_CRS_CNTDWN
               S01:00FF0376:  13 F9 00 00 80 62 00 00 80 61
F00:0369       
F00:0370       .end	MOVEM.L	(SP)+,D0/A0
               S01:00FF0380:  4C DF 01 01
F00:0371       	BRA	timer1_check
               S01:00FF0384:  60 00 FF 6C
F00:0372       
F00:0373       
F00:0374       timer1_handler
F00:0375       
F00:0376       	;
F00:0377       	BRA	timer2_check
               S01:00FF0388:  60 82
F00:0378       
F00:0379       
F00:0380       timer2_handler
F00:0381       
F00:0382       	;
F00:0383       	BRA	timer3_check
               S01:00FF038A:  60 9A
F00:0384       
F00:0385       
F00:0386       timer3_handler
F00:0387       
F00:0388       	;
F00:0389       	BRA	timer_finish
               S01:00FF038C:  60 B2
F00:0390       
F00:0391       
F00:0392       blockfill_bytes
F00:0393       
F00:0394       	;
F00:0395       	;	Arguments
F00:0396       	;
F00:0397       	;	A0	start address
F00:0398       	;	D0	number of bytes
F00:0399       	;	D1	byte value
F00:0400       	;
F00:0401       
F00:0402       	MOVE.L	D2,-(SP)	; save D2
               S01:00FF038E:  2F 02
F00:0403       
F00:0404       	MOVEQ	#$0,D2
               S01:00FF0390:  74 00
F00:0405       
F00:0406       .1	MOVE.B	D1,(A0,D2.L)
               S01:00FF0392:  11 81 28 00
F00:0407       	ADDQ	#$1,D2
               S01:00FF0396:  52 42
F00:0408       	CMP.L	D2,D0
               S01:00FF0398:  B0 82
F00:0409       	BNE	.1
               S01:00FF039A:  66 F6
F00:0410       
F00:0411       	MOVE.L	(SP)+,D2
               S01:00FF039C:  24 1F
F00:0412       	RTS
               S01:00FF039E:  4E 75
F00:0413       
F00:0414       blockfill_words
F00:0415       
F00:0416       	;
F00:0417       	;	Arguments
F00:0418       	;
F00:0419       	;	A0	start address
F00:0420       	;	D0	number of words
F00:0421       	;	D1	word value
F00:0422       	;
F00:0423       
F00:0424       	MOVEM.L	D0/D2,-(SP)
               S01:00FF03A0:  48 E7 A0 00
F00:0425       
F00:0426       	MOVEQ	#$0,D2
               S01:00FF03A4:  74 00
F00:0427       	LSL.L	#$1,D0
               S01:00FF03A6:  E3 88
F00:0428       
F00:0429       .1	MOVE.W	D1,(A0,D2.L)
               S01:00FF03A8:  31 81 28 00
F00:0430       	ADDQ.L	#$2,D2
               S01:00FF03AC:  54 82
F00:0431       	CMP.L	D2,D0
               S01:00FF03AE:  B0 82
F00:0432       	BNE	.1
               S01:00FF03B0:  66 F6
F00:0433       
F00:0434       	MOVEM.L	(SP)+,D0/D2
               S01:00FF03B2:  4C DF 00 05
F00:0435       	RTS
               S01:00FF03B6:  4E 75
F00:0436       
F00:0437       memcopy
F00:0438       
F00:0439       	;
F00:0440       	;	bytewise memory copy - probably slow?
F00:0441       	;
F00:0442       	;	Arguments
F00:0443       	;
F00:0444       	;	A0	source_start_address
F00:0445       	;	D0	no_of_bytes
F00:0446       	;	A1	destination_start_address
F00:0447       	;
F00:0448       
F00:0449       	MOVE.L	D1,-(SP)
               S01:00FF03B8:  2F 01
F00:0450       	MOVEQ	#$0,D1
               S01:00FF03BA:  72 00
F00:0451       .1	MOVE.B	(A0,D1.L),(A1,D1.L)
               S01:00FF03BC:  13 B0 18 00 18 00
F00:0452       	ADDQ.L	#$1,D1
               S01:00FF03C2:  52 81
F00:0453       	CMP.L	D1,D0
               S01:00FF03C4:  B0 81
F00:0454       	BNE	.1
               S01:00FF03C6:  66 F4
F00:0455       
F00:0456       	MOVE.L	(SP)+,D1
               S01:00FF03C8:  22 1F
F00:0457       	RTS
               S01:00FF03CA:  4E 75
F00:0458       
F00:0459       
F00:0460       copy_charrom_to_charram
F00:0461       
F00:0462       	; Copy char rom to ram (go from 2k to 32k)
F00:0463       	; Note: this is a very special copy routine
F00:0464       	; that expands a charset from 1 bit into 16 bit
F00:0465       	; format.
F00:0466       	;
F00:0467       	;	Register Usage
F00:0468       	;
F00:0469       	;	D0	current_byte, holds a byte from the original rom charset
F00:0470       	;	D1	i, counter from 7 to 0 (8 bits per byte have to be processed)
F00:0471       	;	A0	*char_ram, pointer
F00:0472       	;	A1	*char_rom, pointer
F00:0473       	;
F00:0474       	MOVEM.L	D0-D1/A0-A1,-(SP)
               S01:00FF03CC:  48 E7 C0 C0
F00:0475       
F00:0476       	MOVEQ	#0,D0			;    current_byte = 0;
               S01:00FF03D0:  70 00
F00:0477       	LEA	CHAR_RAM,A0		;    char_ram = CHAR_RAM;
               S01:00FF03D2:  41 F9 00 F1 00 00
F00:0478       	LEA	CHAR_ROM,A1		;    char_rom = CHAR_ROM;
               S01:00FF03D8:  43 F9 00 FD 00 00
F00:0479       
F00:0480       .1	CMPA.L	#CHAR_ROM+$800,A1	;    while(char_ram != CHAR_ROM+$800)
               S01:00FF03DE:  B3 FC 00 FD 08 00
F00:0481       	BEQ	.5			;    {   //	branch to end of compound statement
               S01:00FF03E4:  67 1C
F00:0482       					;        // load a byte from charset and incr pntr
F00:0483       	MOVE.B	(A1)+,D0		;        current_byte = char_rom++;
               S01:00FF03E6:  10 19
F00:0484       	MOVEQ	#8,D1			;        i = 8;
               S01:00FF03E8:  72 08
F00:0485       .2	BTST	#$7,D0
               S01:00FF03EA:  08 00 00 07
F00:0486       	BEQ	.3			;    bit 7 not set
               S01:00FF03EE:  67 06
F00:0487       	MOVE.W	#C64_GREY,(A0)+		;    bit 7 is set, so set color
               S01:00FF03F0:  30 FC F7 77
F00:0488       	BRA	.4
               S01:00FF03F4:  60 04
F00:0489       .3	MOVE.W	#$0000,(A0)+		;    bit 7 not set, make empty
               S01:00FF03F6:  30 FC 00 00
F00:0490       .4	LSL.B	#$01,D0			;    move all the bits one place to the left
               S01:00FF03FA:  E3 08
F00:0491       	SUBQ	#$01,D1			;    i = i - 1;
               S01:00FF03FC:  53 41
F00:0492       	BEQ	.1			;    did i reach zero? goto .1
               S01:00FF03FE:  67 DE
F00:0493       	BRA	.2
               S01:00FF0400:  60 E8
F00:0494       					;    }
F00:0495       .5	MOVEM.L	(SP)+,D0-D1/A0-A1
               S01:00FF0402:  4C DF 03 03
F00:0496       	RTS
               S01:00FF0406:  4E 75
F00:0497       
F00:0498       
F00:0499       setup_vector_table
F00:0500       
F00:0501       	LEA	exception_handler,A0
               S01:00FF0408:  41 FA FE 94
F00:0502       	MOVE.L	A0,VEC_04_ILLEGAL_INSTRUCTION
               S01:00FF040C:  21 C8 00 10
F00:0503       	MOVE.L	A0,VEC_10_UNIMPL_INSTRUCTION
               S01:00FF0410:  21 C8 00 28
F00:0504       	MOVE.L	A0,VEC_11_UNIMPL_INSTRUCTION
               S01:00FF0414:  21 C8 00 2C
F00:0505       
F00:0506       	LEA	interrupt_2_autovector,A0
               S01:00FF0418:  41 FA FE 90
F00:0507       	MOVE.L	A0,VEC_26_LEVEL2_IRQ_AUTOVECT
               S01:00FF041C:  21 C8 00 68
F00:0508       
F00:0509       	LEA	interrupt_4_autovector,A0
               S01:00FF0420:  41 FA FE B4
F00:0510       	MOVE.L	A0,VEC_28_LEVEL4_IRQ_AUTOVECT
               S01:00FF0424:  21 C8 00 70
F00:0511       
F00:0512       	LEA	interrupt_5_autovector,A0
               S01:00FF0428:  41 FA FF 1A
F00:0513       	MOVE.L	A0,VEC_29_LEVEL5_IRQ_AUTOVECT
               S01:00FF042C:  21 C8 00 74
F00:0514       
F00:0515       	LEA	interrupt_6_autovector,A0
               S01:00FF0430:  41 FA FF 18
F00:0516       	MOVE.L	A0,VEC_30_LEVEL6_IRQ_AUTOVECT
               S01:00FF0434:  21 C8 00 78
F00:0517       
F00:0518       	LEA	interrupt_7_autovector,A0
               S01:00FF0438:  41 FA FF 12
F00:0519       	MOVE.L	A0,VEC_31_LEVEL7_IRQ_AUTOVECT
               S01:00FF043C:  21 C8 00 7C
F00:0520       
F00:0521       	LEA	timer0_handler,A0
               S01:00FF0440:  41 FA FF 0C
F00:0522       	MOVE.L	A0,TIMER0_VECTOR
               S01:00FF0444:  23 C8 00 00 80 04
F00:0523       
F00:0524       	LEA	timer1_handler,A0
               S01:00FF044A:  41 FA FF 3C
F00:0525       	MOVE.L	A0,TIMER1_VECTOR
               S01:00FF044E:  23 C8 00 00 80 08
F00:0526       
F00:0527       	LEA	timer2_handler,A0
               S01:00FF0454:  41 FA FF 34
F00:0528       	MOVE.L	A0,TIMER2_VECTOR
               S01:00FF0458:  23 C8 00 00 80 0C
F00:0529       
F00:0530       	LEA	timer3_handler,A0
               S01:00FF045E:  41 FA FF 2C
F00:0531       	MOVE.L	A0,TIMER3_VECTOR
               S01:00FF0462:  23 C8 00 00 80 10
F00:0532       
F00:0533       	RTS
               S01:00FF0468:  4E 75
F00:0534       
F00:0535       
F00:0536       reset_sids
F00:0537       
F00:0538       	MOVEM.L	D0-D1/A0,-(SP)
               S01:00FF046A:  48 E7 C0 80
F00:0539       
F00:0540       	LEA	SOUND_BASE,A0
               S01:00FF046E:  41 F9 00 FE 05 00
F00:0541       	MOVE.L	#$100,D0
               S01:00FF0474:  20 3C 00 00 01 00
F00:0542       	MOVE.B	#$00,D1
               S01:00FF047A:  12 3C 00 00
F00:0543       	JSR	blockfill_bytes
               S01:00FF047E:  61 00 FF 0E
F00:0544       
F00:0545       	; max volume for both sids
F00:0546       	MOVE.B	#$0F,SID0_VOLUME
               S01:00FF0482:  13 FC 00 0F 00 FE 05 18
F00:0547       	MOVE.B	#$0F,SID1_VOLUME
               S01:00FF048A:  13 FC 00 0F 00 FE 05 38
F00:0548       
F00:0549       	LEA	SOUND_BASE,A0
               S01:00FF0492:  41 F9 00 FE 05 00
F00:0550       	MOVE.B	#$FF,D0
               S01:00FF0498:  10 3C 00 FF
F00:0551       	MOVE.B	D0,SID0_LEFT		; left channel mix
               S01:00FF049C:  13 C0 00 FE 05 80
F00:0552       	MOVE.B	D0,SID0_RGHT		; right channel mix
               S01:00FF04A2:  13 C0 00 FE 05 81
F00:0553       	MOVE.B	D0,SID1_LEFT		; left channel mix
               S01:00FF04A8:  13 C0 00 FE 05 82
F00:0554       	MOVE.B	D0,SID1_RGHT		; right channel mix
               S01:00FF04AE:  13 C0 00 FE 05 83
F00:0555       
F00:0556       	MOVEM.L	(SP)+,D0-D1/A0
               S01:00FF04B4:  4C DF 01 03
F00:0557       
F00:0558       	RTS
               S01:00FF04B8:  4E 75
F00:0559       
F00:0560       
F00:0561       se_activate_cursor
F00:0562       	MOVEM.L	D0/A0-A1,-(SP)
               S01:00FF04BA:  48 E7 80 C0
F00:0563       
F00:0564       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S01:00FF04BE:  20 79 00 FE 04 04
F00:0565       	MOVEA.L	VICV_COL,A1
               S01:00FF04C4:  22 79 00 FE 04 08
F00:0566       	MOVE.W	CURSOR_POS,D0
               S01:00FF04CA:  30 39 00 00 80 02
F00:0567       	MOVE.B	(A0,D0),SE_ORIG_CHAR
               S01:00FF04D0:  13 F0 00 00 00 00 80 63
F00:0568       	EORI.B	#%10000000,(A0,D0)
               S01:00FF04D8:  0A 30 00 80 00 00
F00:0569       	MOVE.B	SE_CRS_INTERVAL,SE_CRS_CNTDWN
               S01:00FF04DE:  13 F9 00 00 80 62 00 00 80 61
F00:0570       	MOVE.B	#$1,SE_CRS_BLINK	; turn on cursor flash
               S01:00FF04E8:  13 FC 00 01 00 00 80 60
F00:0571       
F00:0572       	MOVEM.L	(SP)+,D0/A0-A1
               S01:00FF04F0:  4C DF 03 01
F00:0573       	RTS
               S01:00FF04F4:  4E 75
F00:0574       
F00:0575       se_deactivate_cursor
F00:0576       	MOVEM.L	D0/A0-A1,-(SP)
               S01:00FF04F6:  48 E7 80 C0
F00:0577       
F00:0578       	MOVE.B	#$0,SE_CRS_BLINK	; turn off cursor flash
               S01:00FF04FA:  13 FC 00 00 00 00 80 60
F00:0579       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S01:00FF0502:  20 79 00 FE 04 04
F00:0580       	MOVEA.L	VICV_COL,A1
               S01:00FF0508:  22 79 00 FE 04 08
F00:0581       	MOVE.W	CURSOR_POS,D0
               S01:00FF050E:  30 39 00 00 80 02
F00:0582       	MOVE.B	SE_ORIG_CHAR,(A0,D0)
               S01:00FF0514:  11 B9 00 00 80 63 00 00
F00:0583       
F00:0584       	MOVEM.L	(SP)+,D0/A0-A1
               S01:00FF051C:  4C DF 03 01
F00:0585       	RTS
               S01:00FF0520:  4E 75
F00:0586       
F00:0587       ; kernel text screen blit desciption (rom description, copied to kernel ram area, also 32 byte aligned)
F00:0588       
F00:0589       	ALIGN	5
F00:0590       screen_blit_structure
F00:0591       	DC.B	%00001000	; flags 0 - tile mode, simple color, color per tile
               S01:00FF0540:  08
F00:0592       	DC.B	%00000000	; flags 1 - no stretching, mirroring etc
               S01:00FF0541:  00
F00:0593       	DC.B	%01010110	; height 2^%101 = 32 chars = 256 pixels, width 2^%110 = 64 chars  = 512 pixels
               S01:00FF0542:  56
F00:0594       	DC.B	%00000000	; currently unused.... :-)
               S01:00FF0543:  00
F00:0595       	DC.W	$0		; x (0)
               S01:00FF0544:  00 00
F00:0596       	DC.W	$10		; y (16)
               S01:00FF0546:  00 10
F00:0597       	DC.W	$F0A0		; foreground color
               S01:00FF0548:  F0 A0
F00:0598       	DC.W	$F222		; background color
               S01:00FF054A:  F2 22
F00:0599       	DC.L	CHAR_RAM	; pixel_data
               S01:00FF054C:  00 F1 00 00
F00:0600       	DC.L	$F00000		; character_data
               S01:00FF0550:  00 F0 00 00
F00:0601       	DC.L	$F00800		; character_color_data
               S01:00FF0554:  00 F0 08 00
F00:0602       	DC.L	$FF0000		; background_color_data
               S01:00FF0558:  00 FF 00 00
F00:0603       	DC.L	$0		; user_data
               S01:00FF055C:  00 00 00 00
F00:0604       
F00:0605       
F00:0606       ; string data
F00:0607       
F00:0608       welcome
F00:0609       	DC.B	"E64-II (C)2019-2020 kernel 0.2.20200729",ASCII_LF,ASCII_NULL
               S01:00FF0560:  45 36 34 2D 49 49 20 28 43 29 32 30 31 39 2D 32
               S01:00FF0570:  30 32 30 20 6B 65 72 6E 65 6C 20 30 2E 32 2E 32
               S01:00FF0580:  0A
               S01:00FF0581:  00
F00:0610       
F00:0611       	ALIGN	1
F00:0612       
F00:0613       	INCLUDE	"kernel_tables.s"
F02:0001       ; rom tables
F02:0002       
F02:0003       ascii_to_screencode
F02:0004       	dc.b	$80		; 0x00 - NUL	non printable character
               S01:00FF058A:  80
F02:0005       	dc.b	$80		; 0x01 - SOH	non printable character
               S01:00FF058B:  80
F02:0006       	dc.b	$80		; 0x02 - STX	non printable character
               S01:00FF058C:  80
F02:0007       	dc.b	$80		; 0x03 - ETX	non printable character
               S01:00FF058D:  80
F02:0008       	dc.b	$80		; 0x04 - EOT	non printable character
               S01:00FF058E:  80
F02:0009       	dc.b	$80		; 0x05 - ENQ	non printable character
               S01:00FF058F:  80
F02:0010       	dc.b	$80		; 0x06 - ACK	non printable character
               S01:00FF0590:  80
F02:0011       	dc.b	$80		; 0x07 - BEL	non printable character
               S01:00FF0591:  80
F02:0012       	dc.b	$80		; 0x08 - BS	non printable character
               S01:00FF0592:  80
F02:0013       	dc.b	$80		; 0x09 - TAB	non printable character
               S01:00FF0593:  80
F02:0014       	dc.b	$80		; 0x0A - LF	non printable character
               S01:00FF0594:  80
F02:0015       	dc.b	$80		; 0x0B - VT	non printable character
               S01:00FF0595:  80
F02:0016       	dc.b	$80		; 0x0C - FF	non printable character
               S01:00FF0596:  80
F02:0017       	dc.b	$80		; 0x0D - CR	non printable character
               S01:00FF0597:  80
F02:0018       	dc.b	$80		; 0x0E - SO	non printable character
               S01:00FF0598:  80
F02:0019       	dc.b	$80		; 0x0F - SI	non printable character
               S01:00FF0599:  80
F02:0020       	dc.b	$80		; 0x10 - DLE	non printable character
               S01:00FF059A:  80
F02:0021       	dc.b	$80		; 0x11 - DC1	non printable character
               S01:00FF059B:  80
F02:0022       	dc.b	$80		; 0x12 - DC2	non printable character
               S01:00FF059C:  80
F02:0023       	dc.b	$80		; 0x13 - DC3	non printable character
               S01:00FF059D:  80
F02:0024       	dc.b	$80		; 0x14 - DC4	non printable character
               S01:00FF059E:  80
F02:0025       	dc.b	$80		; 0x15 - NAC	non printable character
               S01:00FF059F:  80
F02:0026       	dc.b	$80		; 0x16 - SYN	non printable character
               S01:00FF05A0:  80
F02:0027       	dc.b	$80		; 0x17 - ETB	non printable character
               S01:00FF05A1:  80
F02:0028       	dc.b	$80		; 0x18 - CAN	non printable character
               S01:00FF05A2:  80
F02:0029       	dc.b	$80		; 0x19 - EM	non printable character
               S01:00FF05A3:  80
F02:0030       	dc.b	$80		; 0x1A - SUB	non printable character
               S01:00FF05A4:  80
F02:0031       	dc.b	$80		; 0x1B - ESC	non printable character
               S01:00FF05A5:  80
F02:0032       	dc.b	$80		; 0x1C - FS	non printable character
               S01:00FF05A6:  80
F02:0033       	dc.b	$80		; 0x1D - GS	non printable character
               S01:00FF05A7:  80
F02:0034       	dc.b	$80		; 0x1E - RS	non printable character
               S01:00FF05A8:  80
F02:0035       	dc.b	$80		; 0x1F - US	non printable character
               S01:00FF05A9:  80
F02:0036       	dc.b	$20		; 0x20 - (space)
               S01:00FF05AA:  20
F02:0037       	dc.b	$21		; 0x21 - !
               S01:00FF05AB:  21
F02:0038       	dc.b	$22		; 0x22 - "
               S01:00FF05AC:  22
F02:0039       	dc.b	$23		; 0x23 - #
               S01:00FF05AD:  23
F02:0040       	dc.b	$24		; 0x24 - $
               S01:00FF05AE:  24
F02:0041       	dc.b	$25		; 0x25 - %
               S01:00FF05AF:  25
F02:0042       	dc.b	$26		; 0x26 - &
               S01:00FF05B0:  26
F02:0043       	dc.b	$27		; 0x27 - '
               S01:00FF05B1:  27
F02:0044       	dc.b	$28		; 0x28 - (
               S01:00FF05B2:  28
F02:0045       	dc.b	$29		; 0x29 - )
               S01:00FF05B3:  29
F02:0046       	dc.b	$2A		; 0x2A - *
               S01:00FF05B4:  2A
F02:0047       	dc.b	$2B		; 0x2B - +
               S01:00FF05B5:  2B
F02:0048       	dc.b	$2C		; 0x2C - ,
               S01:00FF05B6:  2C
F02:0049       	dc.b	$2D		; 0x2D - -
               S01:00FF05B7:  2D
F02:0050       	dc.b	$2E		; 0x2E - .
               S01:00FF05B8:  2E
F02:0051       	dc.b	$2F		; 0x2F - /
               S01:00FF05B9:  2F
F02:0052       	dc.b	$30		; 0x30 - 0
               S01:00FF05BA:  30
F02:0053       	dc.b	$31		; 0x31 - 1
               S01:00FF05BB:  31
F02:0054       	dc.b	$32		; 0x32 - 2
               S01:00FF05BC:  32
F02:0055       	dc.b	$33		; 0x33 - 3
               S01:00FF05BD:  33
F02:0056       	dc.b	$34		; 0x34 - 4
               S01:00FF05BE:  34
F02:0057       	dc.b	$35		; 0x35 - 5
               S01:00FF05BF:  35
F02:0058       	dc.b	$36		; 0x36 - 6
               S01:00FF05C0:  36
F02:0059       	dc.b	$37		; 0x37 - 7
               S01:00FF05C1:  37
F02:0060       	dc.b	$38		; 0x38 - 8
               S01:00FF05C2:  38
F02:0061       	dc.b	$39		; 0x39 - 9
               S01:00FF05C3:  39
F02:0062       	dc.b	$3A		; 0x3A - :
               S01:00FF05C4:  3A
F02:0063       	dc.b	$3B		; 0x3B - ;
               S01:00FF05C5:  3B
F02:0064       	dc.b	$3C		; 0x3C - <
               S01:00FF05C6:  3C
F02:0065       	dc.b	$3D		; 0x3D - =
               S01:00FF05C7:  3D
F02:0066       	dc.b	$3E		; 0x3E - >
               S01:00FF05C8:  3E
F02:0067       	dc.b	$3F		; 0x3F - ?
               S01:00FF05C9:  3F
F02:0068       	dc.b	$00		; 0x40 - @
               S01:00FF05CA:  00
F02:0069       	dc.b	$41		; 0x41 - A
               S01:00FF05CB:  41
F02:0070       	dc.b	$42		; 0x42 - B
               S01:00FF05CC:  42
F02:0071       	dc.b	$43		; 0x43 - C
               S01:00FF05CD:  43
F02:0072       	dc.b	$44		; 0x44 - D
               S01:00FF05CE:  44
F02:0073       	dc.b	$45		; 0x45 - E
               S01:00FF05CF:  45
F02:0074       	dc.b	$46		; 0x46 - F
               S01:00FF05D0:  46
F02:0075       	dc.b	$47		; 0x47 - G
               S01:00FF05D1:  47
F02:0076       	dc.b	$48		; 0x48 - H
               S01:00FF05D2:  48
F02:0077       	dc.b	$49		; 0x49 - I
               S01:00FF05D3:  49
F02:0078       	dc.b	$4A		; 0x4A - J
               S01:00FF05D4:  4A
F02:0079       	dc.b	$4B		; 0x4B - K
               S01:00FF05D5:  4B
F02:0080       	dc.b	$4C		; 0x4C - L
               S01:00FF05D6:  4C
F02:0081       	dc.b	$4D		; 0x4D - M
               S01:00FF05D7:  4D
F02:0082       	dc.b	$4E		; 0x4E - N
               S01:00FF05D8:  4E
F02:0083       	dc.b	$4F		; 0x4F - O
               S01:00FF05D9:  4F
F02:0084       	dc.b	$50		; 0x50 - P
               S01:00FF05DA:  50
F02:0085       	dc.b	$51		; 0x51 - Q
               S01:00FF05DB:  51
F02:0086       	dc.b	$52		; 0x52 - R
               S01:00FF05DC:  52
F02:0087       	dc.b	$53		; 0x53 - S
               S01:00FF05DD:  53
F02:0088       	dc.b	$54		; 0x54 - T
               S01:00FF05DE:  54
F02:0089       	dc.b	$55		; 0x55 - U
               S01:00FF05DF:  55
F02:0090       	dc.b	$56		; 0x56 - V
               S01:00FF05E0:  56
F02:0091       	dc.b	$57		; 0x57 - W
               S01:00FF05E1:  57
F02:0092       	dc.b	$58		; 0x58 - X
               S01:00FF05E2:  58
F02:0093       	dc.b	$59		; 0x59 - Y
               S01:00FF05E3:  59
F02:0094       	dc.b	$5A		; 0x5A - Z
               S01:00FF05E4:  5A
F02:0095       	dc.b	$1B		; 0x5B - [
               S01:00FF05E5:  1B
F02:0096       	dc.b	$5C		; 0x5C - \	patched
               S01:00FF05E6:  5C
F02:0097       	dc.b	$1D		; 0x5D - ]
               S01:00FF05E7:  1D
F02:0098       	dc.b	$5E		; 0x5E - ^	patched
               S01:00FF05E8:  5E
F02:0099       	dc.b	$5F		; 0x5F - _	patched
               S01:00FF05E9:  5F
F02:0100       	dc.b	$63		; 0x60 - `	patched
               S01:00FF05EA:  63
F02:0101       	dc.b	$01		; 0x61 - a
               S01:00FF05EB:  01
F02:0102       	dc.b	$02		; 0x62 - b
               S01:00FF05EC:  02
F02:0103       	dc.b	$03		; 0x63 - c
               S01:00FF05ED:  03
F02:0104       	dc.b	$04		; 0x64 - d
               S01:00FF05EE:  04
F02:0105       	dc.b	$05		; 0x65 - e
               S01:00FF05EF:  05
F02:0106       	dc.b	$06		; 0x66 - f
               S01:00FF05F0:  06
F02:0107       	dc.b	$07		; 0x67 - g
               S01:00FF05F1:  07
F02:0108       	dc.b	$08		; 0x68 - h
               S01:00FF05F2:  08
F02:0109       	dc.b	$09		; 0x69 - i
               S01:00FF05F3:  09
F02:0110       	dc.b	$0A		; 0x6A - j
               S01:00FF05F4:  0A
F02:0111       	dc.b	$0B		; 0x6B - k
               S01:00FF05F5:  0B
F02:0112       	dc.b	$0C		; 0x6C - l
               S01:00FF05F6:  0C
F02:0113       	dc.b	$0D		; 0x6D - m
               S01:00FF05F7:  0D
F02:0114       	dc.b	$0E		; 0x6E - n
               S01:00FF05F8:  0E
F02:0115       	dc.b	$0F		; 0x6F - o
               S01:00FF05F9:  0F
F02:0116       	dc.b	$10		; 0x70 - p
               S01:00FF05FA:  10
F02:0117       	dc.b	$11		; 0x71 - q
               S01:00FF05FB:  11
F02:0118       	dc.b	$12		; 0x72 - r
               S01:00FF05FC:  12
F02:0119       	dc.b	$13		; 0x73 - s
               S01:00FF05FD:  13
F02:0120       	dc.b	$14		; 0x74 - t
               S01:00FF05FE:  14
F02:0121       	dc.b	$15		; 0x75 - u
               S01:00FF05FF:  15
F02:0122       	dc.b	$16		; 0x76 - v
               S01:00FF0600:  16
F02:0123       	dc.b	$17		; 0x77 - w
               S01:00FF0601:  17
F02:0124       	dc.b	$18		; 0x78 - x
               S01:00FF0602:  18
F02:0125       	dc.b	$19		; 0x79 - y
               S01:00FF0603:  19
F02:0126       	dc.b	$1A		; 0x7A - z
               S01:00FF0604:  1A
F02:0127       	dc.b	$64		; 0x7B - {	patched
               S01:00FF0605:  64
F02:0128       	dc.b	$65		; 0x7C - |	patched
               S01:00FF0606:  65
F02:0129       	dc.b	$66		; 0x7D - }	patched
               S01:00FF0607:  66
F02:0130       	dc.b	$67		; 0x7E - ~	patched
               S01:00FF0608:  67
F02:0131       	dc.b	$80		; 0x7F - DEL	non printable character
               S01:00FF0609:  80
F02:0132       
F02:0133       hex_table
F02:0134       	dc.b	'0123456789abcdef'
               S01:00FF060A:  30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66
F02:0135       
F02:0136       ;	The following table is based on a SID clock frequency of 985248Hz (PAL)
F02:0137       ;	Calculations were made according to Codebase64 article
F02:0138       ;	https://codebase64.org/doku.php?id=base:how_to_calculate_your_own_sid_frequency_table
F02:0139       ;
F02:0140       notes
F02:0141       	dc.w	$0116,$0127,$0139,$014B,$015F,$0174,$018A,$01A1,$01BA,$01D4,$01F0,$020E	; N_C0_ to N_B0_
               S01:00FF061A:  01 16
               S01:00FF061C:  01 27
               S01:00FF061E:  01 39
               S01:00FF0620:  01 4B
               S01:00FF0622:  01 5F
               S01:00FF0624:  01 74
               S01:00FF0626:  01 8A
               S01:00FF0628:  01 A1
               S01:00FF062A:  01 BA
               S01:00FF062C:  01 D4
               S01:00FF062E:  01 F0
               S01:00FF0630:  02 0E
F02:0142       	dc.w	$022D,$024E,$0271,$0296,$02BE,$02E7,$0314,$0342,$0374,$03A9,$03E0,$041B	; N_C1_ to N_B1_
               S01:00FF0632:  02 2D
               S01:00FF0634:  02 4E
               S01:00FF0636:  02 71
               S01:00FF0638:  02 96
               S01:00FF063A:  02 BE
               S01:00FF063C:  02 E7
               S01:00FF063E:  03 14
               S01:00FF0640:  03 42
               S01:00FF0642:  03 74
               S01:00FF0644:  03 A9
               S01:00FF0646:  03 E0
               S01:00FF0648:  04 1B
F02:0143       	dc.w	$045A,$049C,$04E2,$052D,$057B,$05CF,$0627,$0685,$06E8,$0751,$07C1,$0837	; N_C2_ to N_B2_
               S01:00FF064A:  04 5A
               S01:00FF064C:  04 9C
               S01:00FF064E:  04 E2
               S01:00FF0650:  05 2D
               S01:00FF0652:  05 7B
               S01:00FF0654:  05 CF
               S01:00FF0656:  06 27
               S01:00FF0658:  06 85
               S01:00FF065A:  06 E8
               S01:00FF065C:  07 51
               S01:00FF065E:  07 C1
               S01:00FF0660:  08 37
F02:0144       	dc.w	$08B4,$0938,$09C4,$0A59,$0AF7,$0B9D,$0C4E,$0D0A,$0DD0,$0EA2,$0F81,$106D	; N_C3_ to N_B3_
               S01:00FF0662:  08 B4
               S01:00FF0664:  09 38
               S01:00FF0666:  09 C4
               S01:00FF0668:  0A 59
               S01:00FF066A:  0A F7
               S01:00FF066C:  0B 9D
               S01:00FF066E:  0C 4E
               S01:00FF0670:  0D 0A
               S01:00FF0672:  0D D0
               S01:00FF0674:  0E A2
               S01:00FF0676:  0F 81
               S01:00FF0678:  10 6D
F02:0145       	dc.w	$1167,$1270,$1389,$14B2,$15ED,$173B,$189C,$1A13,$1BA0,$1D45,$1F02,$20DA	; N_C4_ to N_B4_
               S01:00FF067A:  11 67
               S01:00FF067C:  12 70
               S01:00FF067E:  13 89
               S01:00FF0680:  14 B2
               S01:00FF0682:  15 ED
               S01:00FF0684:  17 3B
               S01:00FF0686:  18 9C
               S01:00FF0688:  1A 13
               S01:00FF068A:  1B A0
               S01:00FF068C:  1D 45
               S01:00FF068E:  1F 02
               S01:00FF0690:  20 DA
F02:0146       	dc.w	$22CE,$24E0,$2711,$2964,$2BDA,$2E76,$3139,$3426,$3740,$3A89,$3E04,$41B4	; N_C5_ to N_B5_
               S01:00FF0692:  22 CE
               S01:00FF0694:  24 E0
               S01:00FF0696:  27 11
               S01:00FF0698:  29 64
               S01:00FF069A:  2B DA
               S01:00FF069C:  2E 76
               S01:00FF069E:  31 39
               S01:00FF06A0:  34 26
               S01:00FF06A2:  37 40
               S01:00FF06A4:  3A 89
               S01:00FF06A6:  3E 04
               S01:00FF06A8:  41 B4
F02:0147       	dc.w	$459C,$49C0,$4E23,$52C8,$57B4,$5CEB,$6272,$684C,$6E80,$7512,$7C08,$8368	; N_C6_ to N_B6_
               S01:00FF06AA:  45 9C
               S01:00FF06AC:  49 C0
               S01:00FF06AE:  4E 23
               S01:00FF06B0:  52 C8
               S01:00FF06B2:  57 B4
               S01:00FF06B4:  5C EB
               S01:00FF06B6:  62 72
               S01:00FF06B8:  68 4C
               S01:00FF06BA:  6E 80
               S01:00FF06BC:  75 12
               S01:00FF06BE:  7C 08
               S01:00FF06C0:  83 68
F02:0148       	dc.w	$8B39,$9380,$9C45,$A590,$AF68,$B9D6,$C4E3,$D099,$DD00,$EA24,$F810	; N_C7_	to N_A7S
               S01:00FF06C2:  8B 39
               S01:00FF06C4:  93 80
               S01:00FF06C6:  9C 45
               S01:00FF06C8:  A5 90
               S01:00FF06CA:  AF 68
               S01:00FF06CC:  B9 D6
               S01:00FF06CE:  C4 E3
               S01:00FF06D0:  D0 99
               S01:00FF06D2:  DD 00
               S01:00FF06D4:  EA 24
               S01:00FF06D6:  F8 10
F02:0149       
F02:0150       ;notes_old
F02:0151       ;	dc.w	$0112,$0123,$0134,$0146,$015a,$016e,$0184,$018b,$01b3,$01cd,$01e9,$0206	; N_C0_ to N_B0_
F02:0152       ;	dc.w	$0225,$0245,$0268,$028c,$02b3,$02dc,$0308,$0336,$0367,$039b,$03d2,$040c	; N_C1_ to N_B1_
F02:0153       ;	dc.w	$0449,$048b,$04d0,$0519,$0567,$05b9,$0610,$066c,$06ce,$0735,$07a3,$0817	; N_C2_ to N_B2_
F02:0154       ;	dc.w	$0893,$0915,$099f,$0a32,$0acd,$0b72,$0c20,$0cd8,$0d9c,$0e6b,$0f46,$102f	; N_C3_ to N_B3_
F02:0155       ;	dc.w	$1125,$122a,$133f,$1464,$159a,$16e3,$183f,$1981,$1b38,$1cd6,$1e80,$205e	; N_C4_ to N_B4_
F02:0156       ;	dc.w	$224b,$2455,$267e,$28c8,$2b34,$2dc6,$307f,$3361,$366f,$39ac,$3d1a,$40bc	; N_C5_ to N_B5_
F02:0157       ;	dc.w	$4495,$48a9,$4cfc,$518f,$5669,$5b8c,$60fe,$6602,$6cdf,$7358,$7a34,$8178	; N_C6_ to N_B6_
F02:0158       ;	dc.w	$892b,$9153,$99f7,$a31f,$acd2,$b719,$c1fc,$cd85,$d9bd,$e6b0,$f467	; N_C7_	to N_A7S
F02:0159       
F02:0160       	align	1
F02:0161       test_table
F02:0162       	DC.B	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
               S01:00FF06D8:  00
               S01:00FF06D9:  01
               S01:00FF06DA:  02
               S01:00FF06DB:  03
               S01:00FF06DC:  04
               S01:00FF06DD:  05
               S01:00FF06DE:  06
               S01:00FF06DF:  07
               S01:00FF06E0:  08
               S01:00FF06E1:  09
               S01:00FF06E2:  0A
               S01:00FF06E3:  0B
               S01:00FF06E4:  0C
               S01:00FF06E5:  0D
               S01:00FF06E6:  0E
               S01:00FF06E7:  0F
F02:0163       	DC.B	$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
               S01:00FF06E8:  10
               S01:00FF06E9:  11
               S01:00FF06EA:  12
               S01:00FF06EB:  13
               S01:00FF06EC:  14
               S01:00FF06ED:  15
               S01:00FF06EE:  16
               S01:00FF06EF:  17
               S01:00FF06F0:  18
               S01:00FF06F1:  19
               S01:00FF06F2:  1A
               S01:00FF06F3:  1B
               S01:00FF06F4:  1C
               S01:00FF06F5:  1D
               S01:00FF06F6:  1E
               S01:00FF06F7:  1F
F02:0164       	DC.B	$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
               S01:00FF06F8:  20
               S01:00FF06F9:  21
               S01:00FF06FA:  22
               S01:00FF06FB:  23
               S01:00FF06FC:  24
               S01:00FF06FD:  25
               S01:00FF06FE:  26
               S01:00FF06FF:  27
               S01:00FF0700:  28
               S01:00FF0701:  29
               S01:00FF0702:  2A
               S01:00FF0703:  2B
               S01:00FF0704:  2C
               S01:00FF0705:  2D
               S01:00FF0706:  2E
               S01:00FF0707:  2F
F02:0165       	DC.B	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
               S01:00FF0708:  30
               S01:00FF0709:  31
               S01:00FF070A:  32
               S01:00FF070B:  33
               S01:00FF070C:  34
               S01:00FF070D:  35
               S01:00FF070E:  36
               S01:00FF070F:  37
               S01:00FF0710:  38
               S01:00FF0711:  39
               S01:00FF0712:  3A
               S01:00FF0713:  3B
               S01:00FF0714:  3C
               S01:00FF0715:  3D
               S01:00FF0716:  3E
               S01:00FF0717:  3F
F02:0166       	DC.B	$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
               S01:00FF0718:  40
               S01:00FF0719:  41
               S01:00FF071A:  42
               S01:00FF071B:  43
               S01:00FF071C:  44
               S01:00FF071D:  45
               S01:00FF071E:  46
               S01:00FF071F:  47
               S01:00FF0720:  48
               S01:00FF0721:  49
               S01:00FF0722:  4A
               S01:00FF0723:  4B
               S01:00FF0724:  4C
               S01:00FF0725:  4D
               S01:00FF0726:  4E
               S01:00FF0727:  4F
F02:0167       	DC.B	$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
               S01:00FF0728:  50
               S01:00FF0729:  51
               S01:00FF072A:  52
               S01:00FF072B:  53
               S01:00FF072C:  54
               S01:00FF072D:  55
               S01:00FF072E:  56
               S01:00FF072F:  57
               S01:00FF0730:  58
               S01:00FF0731:  59
               S01:00FF0732:  5A
               S01:00FF0733:  5B
               S01:00FF0734:  5C
               S01:00FF0735:  5D
               S01:00FF0736:  5E
               S01:00FF0737:  5F
F02:0168       	DC.B	$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
               S01:00FF0738:  60
               S01:00FF0739:  61
               S01:00FF073A:  62
               S01:00FF073B:  63
               S01:00FF073C:  64
               S01:00FF073D:  65
               S01:00FF073E:  66
               S01:00FF073F:  67
               S01:00FF0740:  68
               S01:00FF0741:  69
               S01:00FF0742:  6A
               S01:00FF0743:  6B
               S01:00FF0744:  6C
               S01:00FF0745:  6D
               S01:00FF0746:  6E
               S01:00FF0747:  6F
F02:0169       	DC.B	$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
               S01:00FF0748:  70
               S01:00FF0749:  71
               S01:00FF074A:  72
               S01:00FF074B:  73
               S01:00FF074C:  74
               S01:00FF074D:  75
               S01:00FF074E:  76
               S01:00FF074F:  77
               S01:00FF0750:  78
               S01:00FF0751:  79
               S01:00FF0752:  7A
               S01:00FF0753:  7B
               S01:00FF0754:  7C
               S01:00FF0755:  7D
               S01:00FF0756:  7E
               S01:00FF0757:  7F
F02:0170       	DC.B	$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A,$8B,$8C,$8D,$8E,$8F
               S01:00FF0758:  80
               S01:00FF0759:  81
               S01:00FF075A:  82
               S01:00FF075B:  83
               S01:00FF075C:  84
               S01:00FF075D:  85
               S01:00FF075E:  86
               S01:00FF075F:  87
               S01:00FF0760:  88
               S01:00FF0761:  89
               S01:00FF0762:  8A
               S01:00FF0763:  8B
               S01:00FF0764:  8C
               S01:00FF0765:  8D
               S01:00FF0766:  8E
               S01:00FF0767:  8F
F02:0171       	DC.B	$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$9F
               S01:00FF0768:  90
               S01:00FF0769:  91
               S01:00FF076A:  92
               S01:00FF076B:  93
               S01:00FF076C:  94
               S01:00FF076D:  95
               S01:00FF076E:  96
               S01:00FF076F:  97
               S01:00FF0770:  98
               S01:00FF0771:  99
               S01:00FF0772:  9A
               S01:00FF0773:  9B
               S01:00FF0774:  9C
               S01:00FF0775:  9D
               S01:00FF0776:  9E
               S01:00FF0777:  9F
F02:0172       	DC.B	$A0,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF
               S01:00FF0778:  A0
               S01:00FF0779:  A1
               S01:00FF077A:  A2
               S01:00FF077B:  A3
               S01:00FF077C:  A4
               S01:00FF077D:  A5
               S01:00FF077E:  A6
               S01:00FF077F:  A7
               S01:00FF0780:  A8
               S01:00FF0781:  A9
               S01:00FF0782:  AA
               S01:00FF0783:  AB
               S01:00FF0784:  AC
               S01:00FF0785:  AD
               S01:00FF0786:  AE
               S01:00FF0787:  AF
F02:0173       	DC.B	$B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE,$BF
               S01:00FF0788:  B0
               S01:00FF0789:  B1
               S01:00FF078A:  B2
               S01:00FF078B:  B3
               S01:00FF078C:  B4
               S01:00FF078D:  B5
               S01:00FF078E:  B6
               S01:00FF078F:  B7
               S01:00FF0790:  B8
               S01:00FF0791:  B9
               S01:00FF0792:  BA
               S01:00FF0793:  BB
               S01:00FF0794:  BC
               S01:00FF0795:  BD
               S01:00FF0796:  BE
               S01:00FF0797:  BF
F02:0174       	DC.B	$C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
               S01:00FF0798:  C0
               S01:00FF0799:  C1
               S01:00FF079A:  C2
               S01:00FF079B:  C3
               S01:00FF079C:  C4
               S01:00FF079D:  C5
               S01:00FF079E:  C6
               S01:00FF079F:  C7
               S01:00FF07A0:  C8
               S01:00FF07A1:  C9
               S01:00FF07A2:  CA
               S01:00FF07A3:  CB
               S01:00FF07A4:  CC
               S01:00FF07A5:  CD
               S01:00FF07A6:  CE
               S01:00FF07A7:  CF
F02:0175       	DC.B	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DE,$DF
               S01:00FF07A8:  D0
               S01:00FF07A9:  D1
               S01:00FF07AA:  D2
               S01:00FF07AB:  D3
               S01:00FF07AC:  D4
               S01:00FF07AD:  D5
               S01:00FF07AE:  D6
               S01:00FF07AF:  D7
               S01:00FF07B0:  D8
               S01:00FF07B1:  D9
               S01:00FF07B2:  DA
               S01:00FF07B3:  DB
               S01:00FF07B4:  DC
               S01:00FF07B5:  DD
               S01:00FF07B6:  DE
               S01:00FF07B7:  DF
F02:0176       	DC.B	$E0,$E1,$E2,$E3,$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED,$EE,$EF
               S01:00FF07B8:  E0
               S01:00FF07B9:  E1
               S01:00FF07BA:  E2
               S01:00FF07BB:  E3
               S01:00FF07BC:  E4
               S01:00FF07BD:  E5
               S01:00FF07BE:  E6
               S01:00FF07BF:  E7
               S01:00FF07C0:  E8
               S01:00FF07C1:  E9
               S01:00FF07C2:  EA
               S01:00FF07C3:  EB
               S01:00FF07C4:  EC
               S01:00FF07C5:  ED
               S01:00FF07C6:  EE
               S01:00FF07C7:  EF
F02:0177       	DC.B	$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
               S01:00FF07C8:  F0
               S01:00FF07C9:  F1
               S01:00FF07CA:  F2
               S01:00FF07CB:  F3
               S01:00FF07CC:  F4
               S01:00FF07CD:  F5
               S01:00FF07CE:  F6
               S01:00FF07CF:  F7
               S01:00FF07D0:  F8
               S01:00FF07D1:  F9
               S01:00FF07D2:  FA
               S01:00FF07D3:  FB
               S01:00FF07D4:  FC
               S01:00FF07D5:  FD
               S01:00FF07D6:  FE
               S01:00FF07D7:  FF
F00:0614       
F00:0615       	ORG	KERNEL_LOC+$FFFC
F00:0616       	DC.L	$DEADBEEF
               S02:00FFFFFC:  DE AD BE EF


Sections:
S01  segff0000
S02  segfffffc


Sources:
F00  kernel.s
F01  kernel_definitions.s
F02  kernel_tables.s


Symbols:
test_table EXPR(16713432=0xff06d8) UNUSED ABS 
hex_table EXPR(16713226=0xff060a) UNUSED ABS 
 copy_charrom_to_charram .4 EXPR(16712698=0xff03fa) ABS 
 copy_charrom_to_charram .3 EXPR(16712694=0xff03f6) ABS 
 copy_charrom_to_charram .2 EXPR(16712682=0xff03ea) ABS 
 copy_charrom_to_charram .5 EXPR(16712706=0xff0402) ABS 
 copy_charrom_to_charram .1 EXPR(16712670=0xff03de) ABS 
 memcopy .1 EXPR(16712636=0xff03bc) ABS 
 blockfill_words .1 EXPR(16712616=0xff03a8) ABS 
 blockfill_bytes .1 EXPR(16712594=0xff0392) ABS 
timer3_handler EXPR(16712588=0xff038c) ABS 
timer2_handler EXPR(16712586=0xff038a) ABS 
timer1_handler EXPR(16712584=0xff0388) ABS 
 timer0_handler .end EXPR(16712576=0xff0380) ABS 
timer0_handler EXPR(16712526=0xff034e) ABS 
interrupt_7_autovector EXPR(16712524=0xff034c) ABS 
interrupt_6_autovector EXPR(16712522=0xff034a) ABS 
interrupt_5_autovector EXPR(16712516=0xff0344) ABS 
timer_finish EXPR(16712512=0xff0340) ABS 
timer3_check EXPR(16712486=0xff0326) ABS 
timer2_check EXPR(16712460=0xff030c) ABS 
timer1_check EXPR(16712434=0xff02f2) ABS 
timer0_check EXPR(16712408=0xff02d8) UNUSED ABS 
interrupt_4_autovector EXPR(16712406=0xff02d6) ABS 
interrupt_2_autovector EXPR(16712362=0xff02aa) ABS 
exception_handler EXPR(16712350=0xff029e) ABS 
 put_string .end EXPR(16712344=0xff0298) ABS 
 put_string .start EXPR(16712334=0xff028e) ABS 
 put_char .bs2 EXPR(16712314=0xff027a) ABS 
 put_char .bs1 EXPR(16712296=0xff0268) ABS 
 put_char .down2 EXPR(16712226=0xff0222) ABS 
 put_char .end EXPR(16712324=0xff0284) ABS 
 put_char .bs EXPR(16712282=0xff025a) ABS 
 put_char .left EXPR(16712266=0xff024a) ABS 
 put_char .up EXPR(16712248=0xff0238) ABS 
 put_char .right EXPR(16712234=0xff022a) ABS 
 put_char .down EXPR(16712208=0xff0210) ABS 
 put_char .lf EXPR(16712192=0xff0200) ABS 
ascii_to_screencode EXPR(16713098=0xff058a) ABS 
 se_scroll_up .2 EXPR(16712060=0xff017c) ABS 
 se_scroll_up .1 EXPR(16712044=0xff016c) ABS 
se_scroll_up EXPR(16712022=0xff0156) ABS 
blockfill_words EXPR(16712608=0xff03a0) ABS 
blockfill_bytes EXPR(16712590=0xff038e) ABS 
put_char EXPR(16712088=0xff0198) ABS 
se_deactivate_cursor EXPR(16712950=0xff04f6) ABS 
 mainloop .start EXPR(16711950=0xff010e) ABS 
se_activate_cursor EXPR(16712890=0xff04ba) ABS 
mainloop EXPR(16711946=0xff010a) UNUSED ABS 
notes EXPR(16713242=0xff061a) ABS 
put_string EXPR(16712330=0xff028a) ABS 
welcome EXPR(16713056=0xff0560) ABS 
se_clear_screen EXPR(16711972=0xff0124) ABS 
memcopy EXPR(16712632=0xff03b8) ABS 
screen_blit_structure EXPR(16713024=0xff0540) ABS 
copy_charrom_to_charram EXPR(16712652=0xff03cc) ABS 
reset_sids EXPR(16712810=0xff046a) ABS 
setup_vector_table EXPR(16712712=0xff0408) ABS 
kernel_main EXPR(16711688=0xff0008) ABS 
SE_ORIG_COLOR EXPR(32900=0x8084) UNUSED EQU 
SE_ORIG_CHAR EXPR(32867=0x8063) EQU 
SE_CRS_INTERVAL EXPR(32866=0x8062) EQU 
SE_CRS_CNTDWN EXPR(32865=0x8061) EQU 
SE_CRS_BLINK EXPR(32864=0x8060) EQU 
LOGO_BLIT EXPR(32832=0x8040) UNUSED EQU 
KERNEL_TEXT_SCR EXPR(32800=0x8020) EQU 
CURRENT_TXT_SCR EXPR(32788=0x8014) EQU 
TIMER3_VECTOR EXPR(32784=0x8010) EQU 
TIMER2_VECTOR EXPR(32780=0x800c) EQU 
TIMER1_VECTOR EXPR(32776=0x8008) EQU 
TIMER0_VECTOR EXPR(32772=0x8004) EQU 
CURSOR_POS EXPR(32770=0x8002) EQU 
CURR_TEXT_COLOR EXPR(32768=0x8000) EQU 
N_A7S EXPR(188=0xbc) UNUSED EQU 
N_A7_ EXPR(186=0xba) UNUSED EQU 
N_G7S EXPR(184=0xb8) UNUSED EQU 
N_G7_ EXPR(182=0xb6) UNUSED EQU 
N_F7S EXPR(180=0xb4) UNUSED EQU 
N_F7_ EXPR(178=0xb2) UNUSED EQU 
N_E7_ EXPR(176=0xb0) UNUSED EQU 
N_D7S EXPR(174=0xae) UNUSED EQU 
N_D7_ EXPR(172=0xac) UNUSED EQU 
N_C7S EXPR(170=0xaa) UNUSED EQU 
N_C7_ EXPR(168=0xa8) UNUSED EQU 
N_B6_ EXPR(166=0xa6) UNUSED EQU 
N_A6S EXPR(164=0xa4) UNUSED EQU 
N_A6_ EXPR(162=0xa2) UNUSED EQU 
N_G6S EXPR(160=0xa0) UNUSED EQU 
N_G6_ EXPR(158=0x9e) UNUSED EQU 
N_F6S EXPR(156=0x9c) UNUSED EQU 
N_F6_ EXPR(154=0x9a) UNUSED EQU 
N_E6_ EXPR(152=0x98) UNUSED EQU 
N_D6S EXPR(150=0x96) UNUSED EQU 
N_D6_ EXPR(148=0x94) UNUSED EQU 
N_C6S EXPR(146=0x92) UNUSED EQU 
N_C6_ EXPR(144=0x90) UNUSED EQU 
N_B5_ EXPR(142=0x8e) UNUSED EQU 
N_A5S EXPR(140=0x8c) UNUSED EQU 
N_A5_ EXPR(138=0x8a) UNUSED EQU 
N_G5S EXPR(136=0x88) UNUSED EQU 
N_G5_ EXPR(134=0x86) UNUSED EQU 
N_F5S EXPR(132=0x84) UNUSED EQU 
N_F5_ EXPR(130=0x82) UNUSED EQU 
N_E5_ EXPR(128=0x80) UNUSED EQU 
N_D5S EXPR(126=0x7e) UNUSED EQU 
N_D5_ EXPR(124=0x7c) UNUSED EQU 
N_C5S EXPR(122=0x7a) UNUSED EQU 
N_C5_ EXPR(120=0x78) UNUSED EQU 
N_B4_ EXPR(118=0x76) UNUSED EQU 
N_A4S EXPR(116=0x74) UNUSED EQU 
N_A4_ EXPR(114=0x72) UNUSED EQU 
N_G4S EXPR(112=0x70) UNUSED EQU 
N_G4_ EXPR(110=0x6e) UNUSED EQU 
N_F4S EXPR(108=0x6c) UNUSED EQU 
N_F4_ EXPR(106=0x6a) UNUSED EQU 
N_E4_ EXPR(104=0x68) UNUSED EQU 
N_D4S EXPR(102=0x66) UNUSED EQU 
N_D4_ EXPR(100=0x64) UNUSED EQU 
N_C4S EXPR(98=0x62) UNUSED EQU 
N_C4_ EXPR(96=0x60) UNUSED EQU 
N_B3_ EXPR(94=0x5e) UNUSED EQU 
N_A3S EXPR(92=0x5c) UNUSED EQU 
N_A3_ EXPR(90=0x5a) EQU 
N_G3S EXPR(88=0x58) UNUSED EQU 
N_G3_ EXPR(86=0x56) UNUSED EQU 
N_F3S EXPR(84=0x54) UNUSED EQU 
N_F3_ EXPR(82=0x52) UNUSED EQU 
N_E3_ EXPR(80=0x50) UNUSED EQU 
N_D3S EXPR(78=0x4e) UNUSED EQU 
N_D3_ EXPR(76=0x4c) EQU 
N_C3S EXPR(74=0x4a) UNUSED EQU 
N_C3_ EXPR(72=0x48) UNUSED EQU 
N_B2_ EXPR(70=0x46) UNUSED EQU 
N_A2S EXPR(68=0x44) UNUSED EQU 
N_A2_ EXPR(66=0x42) UNUSED EQU 
N_G2S EXPR(64=0x40) UNUSED EQU 
N_G2_ EXPR(62=0x3e) UNUSED EQU 
N_F2S EXPR(60=0x3c) UNUSED EQU 
N_F2_ EXPR(58=0x3a) UNUSED EQU 
N_E2_ EXPR(56=0x38) UNUSED EQU 
N_D2S EXPR(54=0x36) UNUSED EQU 
N_D2_ EXPR(52=0x34) UNUSED EQU 
N_C2S EXPR(50=0x32) UNUSED EQU 
N_C2_ EXPR(48=0x30) UNUSED EQU 
N_B1_ EXPR(46=0x2e) UNUSED EQU 
N_A1S EXPR(44=0x2c) UNUSED EQU 
N_A1_ EXPR(42=0x2a) UNUSED EQU 
N_G1S EXPR(40=0x28) UNUSED EQU 
N_G1_ EXPR(38=0x26) UNUSED EQU 
N_F1S EXPR(36=0x24) UNUSED EQU 
N_F1_ EXPR(34=0x22) UNUSED EQU 
N_E1_ EXPR(32=0x20) UNUSED EQU 
N_D1S EXPR(30=0x1e) UNUSED EQU 
N_D1_ EXPR(28=0x1c) UNUSED EQU 
N_C1S EXPR(26=0x1a) UNUSED EQU 
N_C1_ EXPR(24=0x18) UNUSED EQU 
N_B0_ EXPR(22=0x16) UNUSED EQU 
N_A0S EXPR(20=0x14) UNUSED EQU 
N_A0_ EXPR(18=0x12) UNUSED EQU 
N_G0S EXPR(16=0x10) UNUSED EQU 
N_G0_ EXPR(14=0xe) UNUSED EQU 
N_F0S EXPR(12=0xc) UNUSED EQU 
N_F0_ EXPR(10=0xa) UNUSED EQU 
N_E0_ EXPR(8=0x8) UNUSED EQU 
N_D0S EXPR(6=0x6) UNUSED EQU 
N_D0_ EXPR(4=0x4) UNUSED EQU 
N_C0S EXPR(2=0x2) UNUSED EQU 
N_C0_ EXPR(0=0x0) UNUSED EQU 
SID1_RGHT EXPR(16647555=0xfe0583) EQU 
SID1_LEFT EXPR(16647554=0xfe0582) EQU 
SID0_RGHT EXPR(16647553=0xfe0581) EQU 
SID0_LEFT EXPR(16647552=0xfe0580) EQU 
SID1_VOLUME EXPR(16647480=0xfe0538) EQU 
SID1_BASE EXPR(16647456=0xfe0520) EQU 
SID0_VOLUME EXPR(16647448=0xfe0518) EQU 
SID0_BASE EXPR(16647424=0xfe0500) EQU 
SOUND_BASE EXPR(16647424=0xfe0500) EQU 
C64_LIGHTGREY EXPR(64170=0xfaaa) UNUSED EQU 
C64_LIGHTBLUE EXPR(63101=0xf67d) EQU 
C64_LIGHTGREEN EXPR(64506=0xfbfa) UNUSED EQU 
C64_GREY EXPR(63351=0xf777) EQU 
C64_DARKGREY EXPR(62532=0xf444) UNUSED EQU 
C64_LIGHTRED EXPR(64375=0xfb77) UNUSED EQU 
C64_BROWN EXPR(62769=0xf531) UNUSED EQU 
C64_ORANGE EXPR(63571=0xf853) UNUSED EQU 
C64_YELLOW EXPR(65256=0xfee8) UNUSED EQU 
C64_BLUE EXPR(62265=0xf339) EQU 
C64_GREEN EXPR(63141=0xf6a5) UNUSED EQU 
C64_PURPLE EXPR(63561=0xf849) UNUSED EQU 
C64_CYAN EXPR(63692=0xf8cc) UNUSED EQU 
C64_RED EXPR(63283=0xf733) UNUSED EQU 
C64_WHITE EXPR(65535=0xffff) UNUSED EQU 
C64_BLACK EXPR(61440=0xf000) EQU 
BLITTER_CLEAR_COLOR EXPR(16647942=0xfe0706) EQU 
BLITTER_DATA_32_BIT EXPR(16647938=0xfe0702) EQU 
BLITTER_CONTROL EXPR(16647936=0xfe0700) EQU 
BLITTER_BASE EXPR(16647936=0xfe0700) EQU 
TIMER_BASE EXPR(16647680=0xfe0600) EQU 
VICV_BUFFERSWAP EXPR(16647184=0xfe0410) EQU 
VICV_ISR EXPR(16647182=0xfe040e) EQU 
VICV_BORDER_SIZE EXPR(16647180=0xfe040c) EQU 
VICV_COL EXPR(16647176=0xfe0408) EQU 
VICV_TXT EXPR(16647172=0xfe0404) EQU 
VICV_BORDER_COLOR EXPR(16647168=0xfe0400) EQU 
VICV_BASE EXPR(16647168=0xfe0400) EQU 
CIA_KEYBOARD EXPR(16647040=0xfe0380) UNUSED EQU 
CIA_ASCII EXPR(16646916=0xfe0304) EQU 
CIA_REPEAT EXPR(16646915=0xfe0303) UNUSED EQU 
CIA_DELAY EXPR(16646914=0xfe0302) UNUSED EQU 
CIA_CONTROL EXPR(16646913=0xfe0301) EQU 
CIA_STATUS EXPR(16646912=0xfe0300) UNUSED EQU 
CIA_BASE EXPR(16646912=0xfe0300) EQU 
CHAR_RAM EXPR(15794176=0xf10000) EQU 
CHAR_ROM EXPR(16580608=0xfd0000) EQU 
SCRN_SPACE EXPR(32=0x20) EQU 
ASCII_CURSOR_LEFT EXPR(157=0x9d) EQU 
ASCII_CURSOR_UP EXPR(145=0x91) EQU 
ASCII_SPACE EXPR(32=0x20) EQU 
ASCII_CURSOR_RIGHT EXPR(29=0x1d) EQU 
ASCII_CURSOR_DOWN EXPR(17=0x11) EQU 
ASCII_LF EXPR(10=0xa) EQU 
ASCII_BACKSPACE EXPR(8=0x8) EQU 
ASCII_NULL EXPR(0=0x0) EQU 
VEC_31_LEVEL7_IRQ_AUTOVECT EXPR(124=0x7c) EQU 
VEC_30_LEVEL6_IRQ_AUTOVECT EXPR(120=0x78) EQU 
VEC_29_LEVEL5_IRQ_AUTOVECT EXPR(116=0x74) EQU 
VEC_28_LEVEL4_IRQ_AUTOVECT EXPR(112=0x70) EQU 
VEC_27_LEVEL3_IRQ_AUTOVECT EXPR(108=0x6c) UNUSED EQU 
VEC_26_LEVEL2_IRQ_AUTOVECT EXPR(104=0x68) EQU 
VEC_11_UNIMPL_INSTRUCTION EXPR(44=0x2c) EQU 
VEC_10_UNIMPL_INSTRUCTION EXPR(40=0x28) EQU 
VEC_04_ILLEGAL_INSTRUCTION EXPR(16=0x10) EQU 
KERNEL_LOC EXPR(16711680=0xff0000) EQU 
_MOVEMBYTES EXPR(12=0xc) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(769=0x301) INTERNAL 
__LINE__ EXPR(616=0x268) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 

There have been no errors.
