F00:0001       ; elmerucr - 16/06/2020
F00:0002       ; compiles with vasmm68k_mot
F00:0003       
F00:0004       	INCLUDE "kernel_definitions.s"
F01:0001       ; E64 definitions - 2019-11-21 elmerucr
F01:0002       
F01:0003       KERNEL_LOC	equ	$FF0000
F01:0004       
F01:0005       VEC_04_ILLEGAL_INSTRUCTION		equ	$00000010
F01:0006       VEC_10_UNIMPL_INSTRUCTION		equ	$00000028
F01:0007       VEC_11_UNIMPL_INSTRUCTION		equ	$0000002C
F01:0008       VEC_26_LEVEL2_IRQ_AUTOVECT		equ	$00000068
F01:0009       VEC_27_LEVEL3_IRQ_AUTOVECT		equ	$0000006c
F01:0010       VEC_28_LEVEL4_IRQ_AUTOVECT		equ	$00000070
F01:0011       VEC_29_LEVEL5_IRQ_AUTOVECT		equ	$00000074
F01:0012       VEC_30_LEVEL6_IRQ_AUTOVECT		equ	$00000078
F01:0013       VEC_31_LEVEL7_IRQ_AUTOVECT		equ	$0000007C
F01:0014       
F01:0015       ; ascii definitions
F01:0016       ASCII_NULL		equ	$00
F01:0017       ASCII_LF		equ	$0A
F01:0018       ASCII_CURSOR_DOWN	equ	$11
F01:0019       ASCII_CURSOR_RIGHT	equ	$1D
F01:0020       ASCII_CURSOR_UP		equ	$91
F01:0021       ASCII_CURSOR_LEFT	equ	$9D
F01:0022       
F01:0023       ; scrn_codes
F01:0024       SCRN_SPACE		equ	$20
F01:0025       
F01:0026       ; char rom
F01:0027       CHAR_ROM		equ	$FD0000
F01:0028       CHAR_RAM		equ	$F10000
F01:0029       
F01:0030       ; cia
F01:0031       CIA_BASE		equ	$FE0300
F01:0032       CIA_STATUS		equ	CIA_BASE
F01:0033       CIA_CONTROL		equ	CIA_BASE+$01
F01:0034       CIA_DELAY		equ	CIA_BASE+$02
F01:0035       CIA_REPEAT		equ	CIA_BASE+$03
F01:0036       CIA_ASCII		equ	CIA_BASE+$04
F01:0037       CIA_KEYBOARD		equ	CIA_BASE+$80
F01:0038       
F01:0039       ; vicv
F01:0040       VICV_BASE		equ	$FE0400 	; vicv base register
F01:0041       VICV_BORDER_COLOR	equ	VICV_BASE	; 16 bit value
F01:0042       
F01:0043       VICV_TXT		equ	VICV_BASE+$04
F01:0044       VICV_COL		equ	VICV_BASE+$08
F01:0045       VICV_BORDER_SIZE	equ	VICV_BASE+$0C
F01:0046       VICV_ISR		equ	VICV_BASE+$0E
F01:0047       VICV_BUFFERSWAP		equ	VICV_BASE+$10
F01:0048       
F01:0049       ; timer
F01:0050       TIMER_BASE		equ	$FE0600
F01:0051       
F01:0052       ; blitter
F01:0053       BLITTER_BASE		equ	$FE0700
F01:0054       BLITTER_CONTROL		equ	BLITTER_BASE
F01:0055       BLITTER_DATA_32_BIT	equ	BLITTER_BASE+$02
F01:0056       BLITTER_CLEAR_COLOR	equ	BLITTER_BASE+$06	; 16 bit word
F01:0057       
F01:0058       ; color palette
F01:0059       C64_BLACK	equ	$F000
F01:0060       C64_WHITE	equ	$FFFF
F01:0061       C64_RED		equ	$F733
F01:0062       C64_CYAN	equ	$F8CC
F01:0063       C64_PURPLE	equ	$F849
F01:0064       C64_GREEN	equ	$F6A5
F01:0065       C64_BLUE	equ	$F339
F01:0066       C64_YELLOW	equ	$FEE8
F01:0067       C64_ORANGE	equ	$F853
F01:0068       C64_BROWN	equ	$F531
F01:0069       C64_LIGHTRED	equ	$FB77
F01:0070       C64_DARKGREY	equ	$F444
F01:0071       C64_GREY	equ	$F777
F01:0072       C64_LIGHTGREEN	equ	$FBFA
F01:0073       C64_LIGHTBLUE	equ	$F67D
F01:0074       C64_LIGHTGREY	equ	$FAAA
F01:0075       
F01:0076       ; SIDS
F01:0077       SOUND_BASE	equ	$FE0500			; base register
F01:0078       SID0_BASE	equ	SOUND_BASE
F01:0079       SID1_BASE	equ	SOUND_BASE+$20
F01:0080       ; sound index
F01:0081       SID0_LEFT	equ	$80
F01:0082       SID0_RGHT	equ	$81
F01:0083       SID1_LEFT	equ	$82
F01:0084       SID1_RGHT	equ	$83
F01:0085       
F01:0086       N_C0_	equ	00*2
F01:0087       N_C0S	equ	01*2
F01:0088       N_D0_	equ	02*2
F01:0089       N_D0S	equ	03*2
F01:0090       N_E0_	equ	04*2
F01:0091       N_F0_	equ	05*2
F01:0092       N_F0S	equ	06*2
F01:0093       N_G0_	equ	07*2
F01:0094       N_G0S	equ	08*2
F01:0095       N_A0_	equ	09*2
F01:0096       N_A0S	equ	10*2
F01:0097       N_B0_	equ	11*2
F01:0098       
F01:0099       N_C1_	equ	12*2
F01:0100       N_C1S	equ	13*2
F01:0101       N_D1_	equ	14*2
F01:0102       N_D1S	equ	15*2
F01:0103       N_E1_	equ	16*2
F01:0104       N_F1_	equ	17*2
F01:0105       N_F1S	equ	18*2
F01:0106       N_G1_	equ	19*2
F01:0107       N_G1S	equ	20*2
F01:0108       N_A1_	equ	21*2
F01:0109       N_A1S	equ	22*2
F01:0110       N_B1_	equ	23*2
F01:0111       
F01:0112       N_C2_	equ	24*2
F01:0113       N_C2S	equ	25*2
F01:0114       N_D2_	equ	26*2
F01:0115       N_D2S	equ	27*2
F01:0116       N_E2_	equ	28*2
F01:0117       N_F2_	equ	29*2
F01:0118       N_F2S	equ	30*2
F01:0119       N_G2_	equ	31*2
F01:0120       N_G2S	equ	32*2
F01:0121       N_A2_	equ	33*2
F01:0122       N_A2S	equ	34*2
F01:0123       N_B2_	equ	35*2
F01:0124       
F01:0125       N_C3_	equ	36*2
F01:0126       N_C3S	equ	37*2
F01:0127       N_D3_	equ	38*2
F01:0128       N_D3S	equ	39*2
F01:0129       N_E3_	equ	40*2
F01:0130       N_F3_	equ	41*2
F01:0131       N_F3S	equ	42*2
F01:0132       N_G3_	equ	43*2
F01:0133       N_G3S	equ	44*2
F01:0134       N_A3_	equ	45*2
F01:0135       N_A3S	equ	46*2
F01:0136       N_B3_	equ	47*2
F01:0137       
F01:0138       N_C4_	equ	48*2
F01:0139       N_C4S	equ	49*2
F01:0140       N_D4_	equ	50*2
F01:0141       N_D4S	equ	51*2
F01:0142       N_E4_	equ	52*2
F01:0143       N_F4_	equ	53*2
F01:0144       N_F4S	equ	54*2
F01:0145       N_G4_	equ	55*2
F01:0146       N_G4S	equ	56*2
F01:0147       N_A4_	equ	57*2
F01:0148       N_A4S	equ	58*2
F01:0149       N_B4_	equ	59*2
F01:0150       
F01:0151       N_C5_	equ	60*2
F01:0152       N_C5S	equ	61*2
F01:0153       N_D5_	equ	62*2
F01:0154       N_D5S	equ	63*2
F01:0155       N_E5_	equ	64*2
F01:0156       N_F5_	equ	65*2
F01:0157       N_F5S	equ	66*2
F01:0158       N_G5_	equ	67*2
F01:0159       N_G5S	equ	68*2
F01:0160       N_A5_	equ	69*2
F01:0161       N_A5S	equ	70*2
F01:0162       N_B5_	equ	71*2
F01:0163       
F01:0164       N_C6_	equ	72*2
F01:0165       N_C6S	equ	73*2
F01:0166       N_D6_	equ	74*2
F01:0167       N_D6S	equ	75*2
F01:0168       N_E6_	equ	76*2
F01:0169       N_F6_	equ	77*2
F01:0170       N_F6S	equ	78*2
F01:0171       N_G6_	equ	79*2
F01:0172       N_G6S	equ	80*2
F01:0173       N_A6_	equ	81*2
F01:0174       N_A6S	equ	82*2
F01:0175       N_B6_	equ	83*2
F01:0176       
F01:0177       N_C7_	equ	84*2
F01:0178       N_C7S	equ	85*2
F01:0179       N_D7_	equ	86*2
F01:0180       N_D7S	equ	87*2
F01:0181       N_E7_	equ	88*2
F01:0182       N_F7_	equ	89*2
F01:0183       N_F7S	equ	90*2
F01:0184       N_G7_	equ	91*2
F01:0185       N_G7S	equ	92*2
F01:0186       N_A7_	equ	93*2
F01:0187       N_A7S	equ	94*2
F01:0188       
F01:0189       
F01:0190       ; ram locations
F01:0191       
F01:0192       CURR_TEXT_COLOR	equ	$008000	; word
F01:0193       CURSOR_POS	equ	$008002	; word
F01:0194       
F01:0195       TIMER0_VECTOR	equ	$008004	; long
F01:0196       TIMER1_VECTOR	equ	$008008	; long
F01:0197       TIMER2_VECTOR	equ	$00800C	; long
F01:0198       TIMER3_VECTOR	equ	$008010	; long
F01:0199       
F01:0200       CURRENT_TXT_SCR	equ	$008014	; long
F01:0201       
F01:0202       KERNEL_TEXT_SCR	equ	$008020 ; 32 bytes (up to and incl $00805F), and 32 byte aligned
F01:0203       LOGO_BLIT	equ	$008040 ; 32 bytes (up to and incl $00807F), and 32 byte aligned
F01:0204       
F01:0205       ; screen editor variables
F01:0206       SE_CRS_BLINK	equ	$008060	; byte (actually least significant bit), 0=off, 1=currently blinking
F01:0207       SE_CRS_CNTDWN	equ	$008061	; byte, counter for blinking interval
F01:0208       SE_CRS_INTERVAL	equ	$008062	; byte, duration of blinking. e.g. @60Hz value 20 means 0.33s on, 0.33s off
F00:0005       
F00:0006       	ORG	KERNEL_LOC
F00:0007       
F00:0008       	DC.L	$00E00000		; vector 0 - supervisor stackpointer
               S01:00FF0000:  00 E0 00 00
F00:0009       	DC.L	kernel_main		; vector 1 - reset vector
               S01:00FF0004:  00 FF 00 08
F00:0010       
F00:0011       
F00:0012       ; start of main kernel code
F00:0013       
F00:0014       kernel_main
F00:0015       
F00:0016       	BSR	setup_vector_table
               S01:00FF0008:  61 00 03 72
F00:0017       	BSR	reset_sids
               S01:00FF000C:  61 00 03 D0
F00:0018       	BSR	copy_charrom_to_charram
               S01:00FF0010:  61 00 03 2E
F00:0019       
F00:0020       
F00:0021       	; set up timer0 interrupts (cursor flashing)
F00:0022       
F00:0023       	MOVE.W	#$E10,TIMER_BASE+2	; load value 3600 ($E10 = 3600bpm = 60Hz)
               S01:00FF0014:  33 FC 0E 10 00 FE 06 02
F00:0024       	ORI.B	#%00000001,TIMER_BASE+1	; turn on interrupt generation by clock0
               S01:00FF001C:  00 39 00 01 00 FE 06 01
F00:0025       
F00:0026       
F00:0027       	; set up timer1 interrupts (ting sound)
F00:0028       
F00:0029       	MOVE.W	#$3C,TIMER_BASE+2	; load value 60 ($3c = 60bpm = 1Hz)
               S01:00FF0024:  33 FC 00 3C 00 FE 06 02
F00:0030       	ORI.B	#%00000010,TIMER_BASE+1	; turn on interrupt generation by clock0
               S01:00FF002C:  00 39 00 02 00 FE 06 01
F00:0031       
F00:0032       
F00:0033       	; set up timer3 interrupts at 50.125Hz for music / sid tunes
F00:0034       
F00:0035       	;MOVE.W	#$BC0,TIMER_BASE+2		; 3008bpm (=50.125Hz)
F00:0036       	;ORI.B	#%00001000,TIMER_BASE+1	; turn on interrupt generation by clock3
F00:0037       
F00:0038       
F00:0039       	; set ipl to level 1 (all interrupts levels of >= 2 will be acknowledged)
F00:0040       
F00:0041       	MOVE.W	SR,D0
               S01:00FF0034:  40 C0
F00:0042       	ANDI.W	#%1111100011111111,D0
               S01:00FF0036:  02 40 F8 FF
F00:0043       	ORI.W	#%0000000100000000,D0
               S01:00FF003A:  00 40 01 00
F00:0044       	MOVE.W	D0,SR
               S01:00FF003E:  46 C0
F00:0045       
F00:0046       	; CIA start generating keyboard events
F00:0047       	MOVE.B	#%00000001,CIA_CONTROL
               S01:00FF0040:  13 FC 00 01 00 FE 03 01
F00:0048       
F00:0049       
F00:0050       	; set color and size of border
F00:0051       	MOVE.W	#C64_BLACK,VICV_BORDER_COLOR
               S01:00FF0048:  33 FC F0 00 00 FE 04 00
F00:0052       	MOVE.B	#$10,VICV_BORDER_SIZE
               S01:00FF0050:  13 FC 00 10 00 FE 04 0C
F00:0053       
F00:0054       	; set clear color ('background')
F00:0055       	MOVE.W	#C64_BLUE,BLITTER_CLEAR_COLOR
               S01:00FF0058:  33 FC F3 39 00 FE 07 06
F00:0056       
F00:0057       	; copy the screen blit struct from rom to appropriate ram area
F00:0058       	LEA	screen_blit_structure,a0
               S01:00FF0060:  41 FA 03 DE
F00:0059       	LEA	KERNEL_TEXT_SCR,a1
               S01:00FF0064:  43 F9 00 00 80 20
F00:0060       	MOVE.L	#$20,D0			; 32 bytes
               S01:00FF006A:  70 20
F00:0061       	JSR	memcopy
               S01:00FF006C:  61 00 02 BE
F00:0062       
F00:0063       	MOVE.L	#KERNEL_TEXT_SCR,CURRENT_TXT_SCR	; set current text screen
               S01:00FF0070:  23 FC 00 00 80 20 00 00 80 14
F00:0064       
F00:0065       
F00:0066       	; set txt pointer  -  deprecated!
F00:0067       	MOVE.L	#$00F00000,VICV_TXT
               S01:00FF007A:  23 FC 00 F0 00 00 00 FE 04 04
F00:0068       	MOVE.L	#$00F00800,VICV_COL
               S01:00FF0084:  23 FC 00 F0 08 00 00 FE 04 08
F00:0069       
F00:0070       	MOVE.W	#C64_LIGHTBLUE,CURR_TEXT_COLOR
               S01:00FF008E:  33 FC F6 7D 00 00 80 00
F00:0071       
F00:0072       
F00:0073       	; reset cursor position  -  deprecated
F00:0074       	MOVE.W	#$0,CURSOR_POS
               S01:00FF0096:  33 FC 00 00 00 00 80 02
F00:0075       
F00:0076       
F00:0077       	; clear screen and print welcome
F00:0078       
F00:0079       	BSR	clear_screen
               S01:00FF009E:  61 00 00 A2
F00:0080       	LEA	welcome,A0
               S01:00FF00A2:  41 FA 03 BC
F00:0081       	BSR	put_string
               S01:00FF00A6:  61 00 01 74
F00:0082       
F00:0083       
F00:0084       	; play a welcome sound on SID0
F00:0085       
F00:0086       	LEA	SID0_BASE,A0
               S01:00FF00AA:  41 F9 00 FE 05 00
F00:0087       	LEA	notes,A1
               S01:00FF00B0:  43 FA 04 68
F00:0088       	MOVE.W	(N_D3_,A1),(A0)		; set frequency of voice 1
               S01:00FF00B4:  30 A9 00 4C
F00:0089       	MOVE.B	#%00001001,($5,A0)	; attack and decay of voice 1
               S01:00FF00B8:  11 7C 00 09 00 05
F00:0090       	MOVE.W	#$F0F,($02,A0)		; pulse width of voice 1
               S01:00FF00BE:  31 7C 0F 0F 00 02
F00:0091       	MOVE.B	#$FF,(SID0_LEFT,A0)	; left channel mix
               S01:00FF00C4:  11 7C 00 FF 00 80
F00:0092       	MOVE.B	#$10,(SID0_RGHT,A0)	; right channel mix
               S01:00FF00CA:  11 7C 00 10 00 81
F00:0093       	MOVE.B	#%01000001,($4,A0)	; pulse (bit 6) and open gate (bit 0)
               S01:00FF00D0:  11 7C 00 41 00 04
F00:0094       
F00:0095       
F00:0096       	; play a welcome sound on SID1
F00:0097       
F00:0098       	LEA	SID1_BASE,A0
               S01:00FF00D6:  41 F9 00 FE 05 20
F00:0099       	LEA	notes,A1
               S01:00FF00DC:  43 FA 04 3C
F00:0100       	MOVE.W	(N_A3_,A1),(A0)		; set frequency of voice 1
               S01:00FF00E0:  30 A9 00 5A
F00:0101       	MOVE.B	#%00001001,($5,A0)	; attack and decay of voice 1
               S01:00FF00E4:  11 7C 00 09 00 05
F00:0102       	MOVE.W	#$F0F,($2,A0)		; pulse width of voice 1
               S01:00FF00EA:  31 7C 0F 0F 00 02
F00:0103       	MOVE.B	#$10,(SID1_LEFT,A0)	; left channel mix
               S01:00FF00F0:  11 7C 00 10 00 82
F00:0104       	MOVE.B	#$FF,(SID1_RGHT,A0)	; right channel mix
               S01:00FF00F6:  11 7C 00 FF 00 83
F00:0105       	MOVE.B	#%01000001,($4,A0)	; pulse (bit 6) and open gate (bit 0)
               S01:00FF00FC:  11 7C 00 41 00 04
F00:0106       
F00:0107       
F00:0108       mainloop
F00:0109       
F00:0110       	; put something in the usp
F00:0111       	LEA	$C00000,A0
               S01:00FF0102:  41 F9 00 C0 00 00
F00:0112       	MOVE	A0,USP
               S01:00FF0108:  4E 60
F00:0113       
F00:0114       	JSR	se_activate_cursor
               S01:00FF010A:  61 00 02 EC
F00:0115       
F00:0116       	; copy keyboard state onto screen
F00:0117       .1	MOVEQ	#$0,D0
               S01:00FF010E:  70 00
F00:0118       	MOVEA.L	VICV_TXT,A0
               S01:00FF0110:  20 79 00 FE 04 04
F00:0119       	LEA	$400(A0),A0
               S01:00FF0116:  41 E8 04 00
F00:0120       	LEA	CIA_KEYBOARD,A1
               S01:00FF011A:  43 F9 00 FE 03 80
F00:0121       .2	MOVE.B	(A1,D0),(A0,D0)
               S01:00FF0120:  11 B1 00 00 00 00
F00:0122       	ADDQ	#$1,D0
               S01:00FF0126:  52 40
F00:0123       	CMP.B	#$47,D0
               S01:00FF0128:  B0 3C 00 47
F00:0124       	BNE	.2
               S01:00FF012C:  66 F2
F00:0125       
F00:0126       	MOVE.B	CIA_ASCII,D0		; scan for a keyboard event/ascii
               S01:00FF012E:  10 39 00 FE 03 04
F00:0127       	BEQ.S	.1			; if 0 (nothing), jump to .1
               S01:00FF0134:  67 D8
F00:0128       	JSR	se_deactivate_cursor
               S01:00FF0136:  61 00 02 DC
F00:0129       	JSR	put_char		; process input
               S01:00FF013A:  61 30
F00:0130       	JSR	se_activate_cursor
               S01:00FF013C:  61 00 02 BA
F00:0131       
F00:0132       	BRA.S	.1
               S01:00FF0140:  60 CC
F00:0133       
F00:0134       
F00:0135       clear_screen
F00:0136       
F00:0137       	MOVEA.L	(VICV_TXT),A0
               S01:00FF0142:  20 79 00 FE 04 04
F00:0138       	MOVE.L	#$800,D0
               S01:00FF0148:  20 3C 00 00 08 00
F00:0139       	MOVE.B	#SCRN_SPACE,D1			; space screencode
               S01:00FF014E:  12 3C 00 20
F00:0140       	JSR	blockfill_bytes
               S01:00FF0152:  61 00 01 AE
F00:0141       
F00:0142       	MOVEA.L	(VICV_COL),A0
               S01:00FF0156:  20 79 00 FE 04 08
F00:0143       	MOVE.L	#$800,D0
               S01:00FF015C:  20 3C 00 00 08 00
F00:0144       	MOVE.W	#C64_LIGHTBLUE,D1
               S01:00FF0162:  32 3C F6 7D
F00:0145       	JSR	blockfill_words
               S01:00FF0166:  61 00 01 AC
F00:0146       
F00:0147       	RTS
               S01:00FF016A:  4E 75
F00:0148       
F00:0149       
F00:0150       ; put_char expects an ascii value in register D0
F00:0151       
F00:0152       put_char
F00:0153       
F00:0154       	MOVEM.L	D1-D2/A0-A2,-(SP)	; save registers
               S01:00FF016C:  48 E7 60 E0
F00:0155       	ANDI.W	#$00FF,D0		; clear bits 8-15 from D0
               S01:00FF0170:  02 40 00 FF
F00:0156       	MOVE.W	CURSOR_POS,D1		; load current cursor position into D1
               S01:00FF0174:  32 39 00 00 80 02
F00:0157       	MOVE.W	CURR_TEXT_COLOR,D2	; load current text colour into D2
               S01:00FF017A:  34 39 00 00 80 00
F00:0158       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S01:00FF0180:  20 79 00 FE 04 04
F00:0159       	MOVEA.L	VICV_COL,A1		; load pointer to current color screen into A1
               S01:00FF0186:  22 79 00 FE 04 08
F00:0160       	LEA	ascii_to_screencode,A2	; A2 now points to ascii-screencode table
               S01:00FF018C:  45 FA 02 FC
F00:0161       	CMP.B	#ASCII_LF,D0		; do we have a line feed as the next ascii?
               S01:00FF0190:  B0 3C 00 0A
F00:0162       	BEQ	.1
               S01:00FF0194:  67 36
F00:0163       	CMP.B	#ASCII_CURSOR_DOWN,D0
               S01:00FF0196:  B0 3C 00 11
F00:0164       	BEQ	.2
               S01:00FF019A:  67 40
F00:0165       	CMP.B	#ASCII_CURSOR_RIGHT,D0
               S01:00FF019C:  B0 3C 00 1D
F00:0166       	BEQ	.3
               S01:00FF01A0:  67 4A
F00:0167       	CMP.B	#ASCII_CURSOR_UP,D0
               S01:00FF01A2:  B0 3C 00 91
F00:0168       	BEQ	.4
               S01:00FF01A6:  67 52
F00:0169       	CMP.B	#ASCII_CURSOR_LEFT,D0
               S01:00FF01A8:  B0 3C 00 9D
F00:0170       	BEQ	.5
               S01:00FF01AC:  67 5C
F00:0171       	MOVE.B	(A2,D0),D0		; change the ascii value to a screencode value
               S01:00FF01AE:  10 32 00 00
F00:0172       	MOVE.B	D0,(A0,D1)
               S01:00FF01B2:  11 80 10 00
F00:0173       	LSL.W	#$1,D1			; multiply index by two (color values are words contrary to tiles)
               S01:00FF01B6:  E3 49
F00:0174       	MOVE.W	D2,(A1,D1)
               S01:00FF01B8:  33 82 10 00
F00:0175       	ADDQ	#$1,CURSOR_POS
               S01:00FF01BC:  52 79 00 00 80 02
F00:0176       	ANDI.W	#$7FF,CURSOR_POS
               S01:00FF01C2:  02 79 07 FF 00 00 80 02
F00:0177       	BRA	.end
               S01:00FF01CA:  60 4A
F00:0178       .1	ADDI.W	#$40,D1			; line feed, add 64 positions to current cursor pos
               S01:00FF01CC:  06 41 00 40
F00:0179       	ANDI.W	#%0000011111000000,D1	; move cursor pos to beginning of line (and confine to screen)
               S01:00FF01D0:  02 41 07 C0
F00:0180       	MOVE.W	D1,CURSOR_POS		; store new value
               S01:00FF01D4:  33 C1 00 00 80 02
F00:0181       	BRA	.end
               S01:00FF01DA:  60 3A
F00:0182       .2	ADDI.W	#$40,D1			; cursor down, add 64 positions to current cursor pos
               S01:00FF01DC:  06 41 00 40
F00:0183       	ANDI.W	#$7FF,D1		; confine cursor to screen
               S01:00FF01E0:  02 41 07 FF
F00:0184       	MOVE.W	D1,CURSOR_POS		; store new value
               S01:00FF01E4:  33 C1 00 00 80 02
F00:0185       	BRA	.end
               S01:00FF01EA:  60 2A
F00:0186       .3	ADDI.W	#$1,D1			; cursor right
               S01:00FF01EC:  52 41
F00:0187       	ANDI.W	#$7FF,D1
               S01:00FF01EE:  02 41 07 FF
F00:0188       	MOVE.W	D1,CURSOR_POS
               S01:00FF01F2:  33 C1 00 00 80 02
F00:0189       	BRA	.end
               S01:00FF01F8:  60 1C
F00:0190       .4	SUBI.W	#$40,D1			; cursor up
               S01:00FF01FA:  04 41 00 40
F00:0191       	ANDI.W	#$7FF,D1
               S01:00FF01FE:  02 41 07 FF
F00:0192       	MOVE.W	D1,CURSOR_POS
               S01:00FF0202:  33 C1 00 00 80 02
F00:0193       	BRA	.end
               S01:00FF0208:  60 0C
F00:0194       .5	SUBI.W	#$1,D1			; cursor left
               S01:00FF020A:  53 41
F00:0195       	ANDI.W	#$7FF,D1
               S01:00FF020C:  02 41 07 FF
F00:0196       	MOVE.W	D1,CURSOR_POS
               S01:00FF0210:  33 C1 00 00 80 02
F00:0197       .end	MOVEM.L	(SP)+,D1-D2/A0-A2	; restore registers
               S01:00FF0216:  4C DF 07 06
F00:0198       	RTS
               S01:00FF021A:  4E 75
F00:0199       
F00:0200       
F00:0201       put_string
F00:0202       
F00:0203       	;
F00:0204       	; put_string expects a pointer to a string in A0
F00:0205       	;
F00:0206       
F00:0207       	MOVE.L	A0,-(SP)
               S01:00FF021C:  2F 08
F00:0208       .1	MOVE.B	(A0)+,D0	; move the first ascii value of string into D0
               S01:00FF021E:  10 18
F00:0209       	CMP.B	#ASCII_NULL,D0	; did we reach the end of the string?
               S01:00FF0220:  4A 00
F00:0210       	BEQ	.2		; yes, go to end of function
               S01:00FF0222:  67 06
F00:0211       	BSR	put_char	; no, put char
               S01:00FF0224:  61 00 FF 46
F00:0212       	BRA	.1
               S01:00FF0228:  60 F4
F00:0213       .2	MOVE.L	(SP)+,A0
               S01:00FF022A:  20 5F
F00:0214       	RTS
               S01:00FF022C:  4E 75
F00:0215       
F00:0216       
F00:0217       ; fake exception handler
F00:0218       
F00:0219       exception_handler
F00:0220       
F00:0221       	MOVE.L	D0,-(SP)
               S01:00FF022E:  2F 00
F00:0222       	MOVE.L	#$DEADBEEF,D0
               S01:00FF0230:  20 3C DE AD BE EF
F00:0223       	MOVE.L	(SP)+,D0
               S01:00FF0236:  20 1F
F00:0224       	RTE
               S01:00FF0238:  4E 73
F00:0225       
F00:0226       
F00:0227       ; level 2 interrupt autovector (vicv start of vblank)
F00:0228       
F00:0229       interrupt_2_autovector
F00:0230       
F00:0231       	MOVE.B	#%00000001,VICV_ISR				; acknowledge VBLANK interrupt
               S01:00FF023A:  13 FC 00 01 00 FE 04 0E
F00:0232       
F00:0233       	MOVE.B	#%00000001,VICV_BUFFERSWAP			; switch front- and backbuffer
               S01:00FF0242:  13 FC 00 01 00 FE 04 10
F00:0234       
F00:0235       	MOVE.B	#%00000001,BLITTER_CONTROL			; clear the backbuffer
               S01:00FF024A:  13 FC 00 01 00 FE 07 00
F00:0236       
F00:0237       	; add the blits (to be replaced by a kernel linked list)
F00:0238       	MOVE.L	#KERNEL_TEXT_SCR,BLITTER_DATA_32_BIT
               S01:00FF0252:  23 FC 00 00 80 20 00 FE 07 02
F00:0239       	MOVE.B	#%00000010,BLITTER_CONTROL
               S01:00FF025C:  13 FC 00 02 00 FE 07 00
F00:0240       
F00:0241       	RTE
               S01:00FF0264:  4E 73
F00:0242       
F00:0243       
F00:0244       ; level 4 interrupt autovector (timer)
F00:0245       
F00:0246       interrupt_4_autovector
F00:0247       
F00:0248       	MOVE.L	A0,-(SP)		; save a0
               S01:00FF0266:  2F 08
F00:0249       timer0_check
F00:0250       	BTST	#0,TIMER_BASE		; did timer 0 cause the interrupt?
               S01:00FF0268:  08 39 00 00 00 FE 06 00
F00:0251       	BEQ	timer1_check		; no, go to next timer
               S01:00FF0270:  67 10
F00:0252       	MOVE.B	#%00000001,TIMER_BASE	; yes, acknowledge interrupt
               S01:00FF0272:  13 FC 00 01 00 FE 06 00
F00:0253       	MOVEA.L	TIMER0_VECTOR,A0
               S01:00FF027A:  20 79 00 00 80 04
F00:0254       	JMP	(A0)
               S01:00FF0280:  4E D0
F00:0255       timer1_check
F00:0256       	BTST	#1,TIMER_BASE
               S01:00FF0282:  08 39 00 01 00 FE 06 00
F00:0257       	BEQ	timer2_check
               S01:00FF028A:  67 10
F00:0258       	MOVE.B	#%00000010,TIMER_BASE
               S01:00FF028C:  13 FC 00 02 00 FE 06 00
F00:0259       	MOVEA.L	TIMER1_VECTOR,A0
               S01:00FF0294:  20 79 00 00 80 08
F00:0260       	JMP	(A0)
               S01:00FF029A:  4E D0
F00:0261       timer2_check
F00:0262       	BTST	#2,TIMER_BASE		; did timer 2 cause the interrupt?
               S01:00FF029C:  08 39 00 02 00 FE 06 00
F00:0263       	BEQ	timer3_check		; no, go to next timer
               S01:00FF02A4:  67 10
F00:0264       	MOVE.B	#%00000100,TIMER_BASE	; yes, acknowledge interrupt
               S01:00FF02A6:  13 FC 00 04 00 FE 06 00
F00:0265       	MOVEA.L	TIMER2_VECTOR,A0
               S01:00FF02AE:  20 79 00 00 80 0C
F00:0266       	JMP	(A0)
               S01:00FF02B4:  4E D0
F00:0267       timer3_check
F00:0268       	BTST	#3,TIMER_BASE
               S01:00FF02B6:  08 39 00 03 00 FE 06 00
F00:0269       	BEQ	timer_finish		; no, go to timer finish
               S01:00FF02BE:  67 10
F00:0270       	MOVE.B	#%00001000,TIMER_BASE	; yes, acknowledge
               S01:00FF02C0:  13 FC 00 08 00 FE 06 00
F00:0271       	MOVEA.L	TIMER3_VECTOR,A0
               S01:00FF02C8:  20 79 00 00 80 10
F00:0272       	JMP	(A0)
               S01:00FF02CE:  4E D0
F00:0273       timer_finish
F00:0274       	MOVE.L	(SP)+,A0		; restore a0
               S01:00FF02D0:  20 5F
F00:0275       	RTE
               S01:00FF02D2:  4E 73
F00:0276       
F00:0277       
F00:0278       ; level 5 interrupt autovector
F00:0279       
F00:0280       interrupt_5_autovector
F00:0281       
F00:0282       	MOVE.L	A0,-(SP)
               S01:00FF02D4:  2F 08
F00:0283       	MOVE.L	(SP)+,A0
               S01:00FF02D6:  20 5F
F00:0284       	RTE
               S01:00FF02D8:  4E 73
F00:0285       
F00:0286       
F00:0287       ; level 6 interrupt autovector
F00:0288       
F00:0289       interrupt_6_autovector
F00:0290       
F00:0291       	RTE
               S01:00FF02DA:  4E 73
F00:0292       
F00:0293       
F00:0294       ; level 7 interrupt autovector
F00:0295       
F00:0296       interrupt_7_autovector
F00:0297       
F00:0298       	RTE
               S01:00FF02DC:  4E 73
F00:0299       
F00:0300       
F00:0301       timer0_handler
F00:0302       
F00:0303       	;
F00:0304       	MOVEA.L	VICV_TXT,A0
               S01:00FF02DE:  20 79 00 FE 04 04
F00:0305       	ADDQ.B	#1,$7FF(A0)
               S01:00FF02E4:  52 28 07 FF
F00:0306       
F00:0307       	BRA	timer1_check
               S01:00FF02E8:  60 98
F00:0308       
F00:0309       
F00:0310       timer1_handler
F00:0311       
F00:0312       	LEA	SID0_BASE,A0
               S01:00FF02EA:  41 F9 00 FE 05 00
F00:0313       	MOVE.B	#%00100000,$4(A0)
               S01:00FF02F0:  11 7C 00 20 00 04
F00:0314       	ORI.B	#%00100001,$4(A0)	; pulse (bit 6) and open gate (bit 0)
               S01:00FF02F6:  00 28 00 21 00 04
F00:0315       
F00:0316       	BRA	timer2_check
               S01:00FF02FC:  60 9E
F00:0317       
F00:0318       
F00:0319       timer2_handler
F00:0320       
F00:0321       	;
F00:0322       	BRA	timer3_check
               S01:00FF02FE:  60 B6
F00:0323       
F00:0324       
F00:0325       timer3_handler
F00:0326       
F00:0327       	;
F00:0328       	BRA	timer_finish
               S01:00FF0300:  60 CE
F00:0329       
F00:0330       
F00:0331       blockfill_bytes
F00:0332       
F00:0333       	;
F00:0334       	;	Arguments
F00:0335       	;
F00:0336       	;	A0	start addres
F00:0337       	;	D0	number of bytes
F00:0338       	;	D1	byte value
F00:0339       	;
F00:0340       
F00:0341       	MOVE.L	D2,-(SP)	; save D0
               S01:00FF0302:  2F 02
F00:0342       
F00:0343       	MOVEQ	#$0,D2
               S01:00FF0304:  74 00
F00:0344       
F00:0345       .1	MOVE.B	D1,(A0,D2.L)
               S01:00FF0306:  11 81 28 00
F00:0346       	ADDQ	#$1,D2
               S01:00FF030A:  52 42
F00:0347       	CMP.L	D2,D0
               S01:00FF030C:  B0 82
F00:0348       	BNE	.1
               S01:00FF030E:  66 F6
F00:0349       
F00:0350       	MOVE.L	(SP)+,D2
               S01:00FF0310:  24 1F
F00:0351       	RTS
               S01:00FF0312:  4E 75
F00:0352       
F00:0353       blockfill_words
F00:0354       
F00:0355       	;
F00:0356       	;	Arguments
F00:0357       	;
F00:0358       	;	A0	start addres
F00:0359       	;	D0	number of words
F00:0360       	;	D1	word value
F00:0361       	;
F00:0362       
F00:0363       	MOVEM.L	D0/D2,-(SP)
               S01:00FF0314:  48 E7 A0 00
F00:0364       
F00:0365       	MOVEQ	#$0,D2
               S01:00FF0318:  74 00
F00:0366       	LSL.L	#$1,D0
               S01:00FF031A:  E3 88
F00:0367       
F00:0368       .1	MOVE.W	D1,(A0,D2.L)
               S01:00FF031C:  31 81 28 00
F00:0369       	ADDQ.L	#$2,D2
               S01:00FF0320:  54 82
F00:0370       	CMP.L	D2,D0
               S01:00FF0322:  B0 82
F00:0371       	BNE	.1
               S01:00FF0324:  66 F6
F00:0372       
F00:0373       	MOVEM.L	(SP)+,D0/D2
               S01:00FF0326:  4C DF 00 05
F00:0374       	RTS
               S01:00FF032A:  4E 75
F00:0375       
F00:0376       memcopy
F00:0377       
F00:0378       	;
F00:0379       	;	bytewise memory copy - probably slow?
F00:0380       	;
F00:0381       	;	Arguments
F00:0382       	;
F00:0383       	;	A0	source_start_address
F00:0384       	;	D0	no_of_bytes
F00:0385       	;	A1	destination_start_address
F00:0386       	;
F00:0387       
F00:0388       	MOVE.L	D1,-(SP)
               S01:00FF032C:  2F 01
F00:0389       	MOVEQ	#$0,D1
               S01:00FF032E:  72 00
F00:0390       .1	MOVE.B	(A0,D1.L),(A1,D1.L)
               S01:00FF0330:  13 B0 18 00 18 00
F00:0391       	ADDQ.L	#$1,D1
               S01:00FF0336:  52 81
F00:0392       	CMP.L	D1,D0
               S01:00FF0338:  B0 81
F00:0393       	BNE	.1
               S01:00FF033A:  66 F4
F00:0394       
F00:0395       	MOVE.L	(SP)+,D1
               S01:00FF033C:  22 1F
F00:0396       	RTS
               S01:00FF033E:  4E 75
F00:0397       
F00:0398       
F00:0399       copy_charrom_to_charram
F00:0400       
F00:0401       	; Copy char rom to ram (go from 2k to 32k)
F00:0402       	; Note: this is a very special copy routine
F00:0403       	; that expands a charset from 1 bit into 16 bit
F00:0404       	; format.
F00:0405       	;
F00:0406       	;	Register Usage
F00:0407       	;
F00:0408       	;	D0	current_byte, holds a byte from the original rom charset
F00:0409       	;	D1	i, counter from 7 to 0 (8 bits per byte have to be processed)
F00:0410       	;	A0	*char_ram, pointer
F00:0411       	;	A1	*char_rom, pointer
F00:0412       	;
F00:0413       	MOVEM.L	D0-D1/A0-A1,-(SP)
               S01:00FF0340:  48 E7 C0 C0
F00:0414       
F00:0415       	MOVEQ	#0,D0			;    current_byte = 0;
               S01:00FF0344:  70 00
F00:0416       	LEA	CHAR_RAM,A0		;    char_ram = CHAR_RAM;
               S01:00FF0346:  41 F9 00 F1 00 00
F00:0417       	LEA	CHAR_ROM,A1		;    char_rom = CHAR_ROM;
               S01:00FF034C:  43 F9 00 FD 00 00
F00:0418       
F00:0419       .1	CMPA.L	#CHAR_ROM+$800,A1	;    while(char_ram != CHAR_ROM+$800)
               S01:00FF0352:  B3 FC 00 FD 08 00
F00:0420       	BEQ	.5			;    {   //	branch to end of compound statement
               S01:00FF0358:  67 1C
F00:0421       					;        // load a byte from charset and incr pntr
F00:0422       	MOVE.B	(A1)+,D0		;        current_byte = char_rom++;
               S01:00FF035A:  10 19
F00:0423       	MOVEQ	#8,D1			;        i = 8;
               S01:00FF035C:  72 08
F00:0424       .2	BTST	#$7,D0
               S01:00FF035E:  08 00 00 07
F00:0425       	BEQ	.3			;    bit 7 not set
               S01:00FF0362:  67 06
F00:0426       	MOVE.W	#C64_GREY,(A0)+		;    bit 7 is set, so set color
               S01:00FF0364:  30 FC F7 77
F00:0427       	BRA	.4
               S01:00FF0368:  60 04
F00:0428       .3	MOVE.W	#$0000,(A0)+		;    bit 7 not set, make empty
               S01:00FF036A:  30 FC 00 00
F00:0429       .4	LSL.B	#$01,D0			;    move all the bits one place to the left
               S01:00FF036E:  E3 08
F00:0430       	SUBQ	#$01,D1			;    i = i - 1;
               S01:00FF0370:  53 41
F00:0431       	BEQ	.1			;    did i reach zero? goto .1
               S01:00FF0372:  67 DE
F00:0432       	BRA	.2
               S01:00FF0374:  60 E8
F00:0433       					;    }
F00:0434       .5	MOVEM.L	(SP)+,D0-D1/A0-A1
               S01:00FF0376:  4C DF 03 03
F00:0435       	RTS
               S01:00FF037A:  4E 75
F00:0436       
F00:0437       
F00:0438       setup_vector_table
F00:0439       
F00:0440       	LEA	exception_handler,A0
               S01:00FF037C:  41 FA FE B0
F00:0441       	MOVE.L	A0,VEC_04_ILLEGAL_INSTRUCTION
               S01:00FF0380:  21 C8 00 10
F00:0442       	MOVE.L	A0,VEC_10_UNIMPL_INSTRUCTION
               S01:00FF0384:  21 C8 00 28
F00:0443       	MOVE.L	A0,VEC_11_UNIMPL_INSTRUCTION
               S01:00FF0388:  21 C8 00 2C
F00:0444       
F00:0445       	LEA	interrupt_2_autovector,A0
               S01:00FF038C:  41 FA FE AC
F00:0446       	MOVE.L	A0,VEC_26_LEVEL2_IRQ_AUTOVECT
               S01:00FF0390:  21 C8 00 68
F00:0447       
F00:0448       	LEA	interrupt_4_autovector,A0
               S01:00FF0394:  41 FA FE D0
F00:0449       	MOVE.L	A0,VEC_28_LEVEL4_IRQ_AUTOVECT
               S01:00FF0398:  21 C8 00 70
F00:0450       
F00:0451       	LEA	interrupt_5_autovector,A0
               S01:00FF039C:  41 FA FF 36
F00:0452       	MOVE.L	A0,VEC_29_LEVEL5_IRQ_AUTOVECT
               S01:00FF03A0:  21 C8 00 74
F00:0453       
F00:0454       	LEA	interrupt_6_autovector,A0
               S01:00FF03A4:  41 FA FF 34
F00:0455       	MOVE.L	A0,VEC_30_LEVEL6_IRQ_AUTOVECT
               S01:00FF03A8:  21 C8 00 78
F00:0456       
F00:0457       	LEA	interrupt_7_autovector,A0
               S01:00FF03AC:  41 FA FF 2E
F00:0458       	MOVE.L	A0,VEC_31_LEVEL7_IRQ_AUTOVECT
               S01:00FF03B0:  21 C8 00 7C
F00:0459       
F00:0460       	LEA	timer0_handler,A0
               S01:00FF03B4:  41 FA FF 28
F00:0461       	MOVE.L	A0,TIMER0_VECTOR
               S01:00FF03B8:  23 C8 00 00 80 04
F00:0462       
F00:0463       	LEA	timer1_handler,A0
               S01:00FF03BE:  41 FA FF 2A
F00:0464       	MOVE.L	A0,TIMER1_VECTOR
               S01:00FF03C2:  23 C8 00 00 80 08
F00:0465       
F00:0466       	LEA	timer2_handler,A0
               S01:00FF03C8:  41 FA FF 34
F00:0467       	MOVE.L	A0,TIMER2_VECTOR
               S01:00FF03CC:  23 C8 00 00 80 0C
F00:0468       
F00:0469       	LEA	timer3_handler,A0
               S01:00FF03D2:  41 FA FF 2C
F00:0470       	MOVE.L	A0,TIMER3_VECTOR
               S01:00FF03D6:  23 C8 00 00 80 10
F00:0471       
F00:0472       	RTS
               S01:00FF03DC:  4E 75
F00:0473       
F00:0474       reset_sids
F00:0475       	; very basic, needs work
F00:0476       	; max volume for both sids
F00:0477       	LEA	SID0_BASE,A0
               S01:00FF03DE:  41 F9 00 FE 05 00
F00:0478       	MOVE.B	#$0F,$18(A0)
               S01:00FF03E4:  11 7C 00 0F 00 18
F00:0479       	LEA	SID1_BASE,A0
               S01:00FF03EA:  41 F9 00 FE 05 20
F00:0480       	MOVE.B	#$0F,$18(A0)
               S01:00FF03F0:  11 7C 00 0F 00 18
F00:0481       	RTS
               S01:00FF03F6:  4E 75
F00:0482       
F00:0483       
F00:0484       se_activate_cursor
F00:0485       	MOVEM.L	D0/A0,-(SP)
               S01:00FF03F8:  48 E7 80 80
F00:0486       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S01:00FF03FC:  20 79 00 FE 04 04
F00:0487       	MOVE.W	CURSOR_POS,D0
               S01:00FF0402:  30 39 00 00 80 02
F00:0488       	EORI.B	#%10000000,(A0,D0)
               S01:00FF0408:  0A 30 00 80 00 00
F00:0489       	MOVEM.L	(SP)+,D0/A0
               S01:00FF040E:  4C DF 01 01
F00:0490       	RTS
               S01:00FF0412:  4E 75
F00:0491       
F00:0492       se_deactivate_cursor
F00:0493       	MOVEM.L	D0/A0,-(SP)
               S01:00FF0414:  48 E7 80 80
F00:0494       	MOVEA.L	VICV_TXT,A0		; load pointer to current text screen into A0
               S01:00FF0418:  20 79 00 FE 04 04
F00:0495       	MOVE.W	CURSOR_POS,D0
               S01:00FF041E:  30 39 00 00 80 02
F00:0496       	EORI.B	#%10000000,(A0,D0)
               S01:00FF0424:  0A 30 00 80 00 00
F00:0497       	MOVEM.L	(SP)+,D0/A0
               S01:00FF042A:  4C DF 01 01
F00:0498       	RTS
               S01:00FF042E:  4E 75
F00:0499       
F00:0500       ; kernel text screen blit desciption (rom description, copied to kernel ram area, also 32 byte aligned)
F00:0501       
F00:0502       	ALIGN	5
F00:0503       screen_blit_structure
F00:0504       	DC.B	%00001000	; flags 0 - tile mode, simple color, color per tile
               S01:00FF0440:  08
F00:0505       	DC.B	%00000000	; flags 1 - no stretching, mirroring etc
               S01:00FF0441:  00
F00:0506       	DC.B	%01010110	; height 2^%101 = 32 chars = 256 pixels, width 2^%110 = 64 chars  = 512 pixels
               S01:00FF0442:  56
F00:0507       	DC.B	%00000000	; currently unused.... :-)
               S01:00FF0443:  00
F00:0508       	DC.W	$0		; x (0)
               S01:00FF0444:  00 00
F00:0509       	DC.W	$10		; y (16)
               S01:00FF0446:  00 10
F00:0510       	DC.W	$F0A0		; foreground color
               S01:00FF0448:  F0 A0
F00:0511       	DC.W	$F222		; background color
               S01:00FF044A:  F2 22
F00:0512       	DC.L	CHAR_RAM	; pixel_data
               S01:00FF044C:  00 F1 00 00
F00:0513       	DC.L	$F00000		; character_data
               S01:00FF0450:  00 F0 00 00
F00:0514       	DC.L	$F00800		; character_color_data
               S01:00FF0454:  00 F0 08 00
F00:0515       	DC.L	$FF0000		; background_color_data
               S01:00FF0458:  00 FF 00 00
F00:0516       	DC.L	$0		; user_data
               S01:00FF045C:  00 00 00 00
F00:0517       
F00:0518       
F00:0519       ; string data
F00:0520       
F00:0521       welcome
F00:0522       	DC.B	"E64-II (C)2019-2020 kernel 0.1.20200719",ASCII_LF,ASCII_NULL
               S01:00FF0460:  45 36 34 2D 49 49 20 28 43 29 32 30 31 39 2D 32
               S01:00FF0470:  30 32 30 20 6B 65 72 6E 65 6C 20 30 2E 31 2E 32
               S01:00FF0480:  0A
               S01:00FF0481:  00
F00:0523       
F00:0524       	ALIGN	1
F00:0525       
F00:0526       	INCLUDE	"kernel_tables.s"
F02:0001       ; rom tables
F02:0002       
F02:0003       ascii_to_screencode
F02:0004       	dc.b	$80		; 0x00 - NUL	non printable character
               S01:00FF048A:  80
F02:0005       	dc.b	$80		; 0x01 - SOH	non printable character
               S01:00FF048B:  80
F02:0006       	dc.b	$80		; 0x02 - STX	non printable character
               S01:00FF048C:  80
F02:0007       	dc.b	$80		; 0x03 - ETX	non printable character
               S01:00FF048D:  80
F02:0008       	dc.b	$80		; 0x04 - EOT	non printable character
               S01:00FF048E:  80
F02:0009       	dc.b	$80		; 0x05 - ENQ	non printable character
               S01:00FF048F:  80
F02:0010       	dc.b	$80		; 0x06 - ACK	non printable character
               S01:00FF0490:  80
F02:0011       	dc.b	$80		; 0x07 - BEL	non printable character
               S01:00FF0491:  80
F02:0012       	dc.b	$80		; 0x08 - BS	non printable character
               S01:00FF0492:  80
F02:0013       	dc.b	$80		; 0x09 - TAB	non printable character
               S01:00FF0493:  80
F02:0014       	dc.b	$80		; 0x0A - LF	non printable character
               S01:00FF0494:  80
F02:0015       	dc.b	$80		; 0x0B - VT	non printable character
               S01:00FF0495:  80
F02:0016       	dc.b	$80		; 0x0C - FF	non printable character
               S01:00FF0496:  80
F02:0017       	dc.b	$80		; 0x0D - CR	non printable character
               S01:00FF0497:  80
F02:0018       	dc.b	$80		; 0x0E - SO	non printable character
               S01:00FF0498:  80
F02:0019       	dc.b	$80		; 0x0F - SI	non printable character
               S01:00FF0499:  80
F02:0020       	dc.b	$80		; 0x10 - DLE	non printable character
               S01:00FF049A:  80
F02:0021       	dc.b	$80		; 0x11 - DC1	non printable character
               S01:00FF049B:  80
F02:0022       	dc.b	$80		; 0x12 - DC2	non printable character
               S01:00FF049C:  80
F02:0023       	dc.b	$80		; 0x13 - DC3	non printable character
               S01:00FF049D:  80
F02:0024       	dc.b	$80		; 0x14 - DC4	non printable character
               S01:00FF049E:  80
F02:0025       	dc.b	$80		; 0x15 - NAC	non printable character
               S01:00FF049F:  80
F02:0026       	dc.b	$80		; 0x16 - SYN	non printable character
               S01:00FF04A0:  80
F02:0027       	dc.b	$80		; 0x17 - ETB	non printable character
               S01:00FF04A1:  80
F02:0028       	dc.b	$80		; 0x18 - CAN	non printable character
               S01:00FF04A2:  80
F02:0029       	dc.b	$80		; 0x19 - EM	non printable character
               S01:00FF04A3:  80
F02:0030       	dc.b	$80		; 0x1A - SUB	non printable character
               S01:00FF04A4:  80
F02:0031       	dc.b	$80		; 0x1B - ESC	non printable character
               S01:00FF04A5:  80
F02:0032       	dc.b	$80		; 0x1C - FS	non printable character
               S01:00FF04A6:  80
F02:0033       	dc.b	$80		; 0x1D - GS	non printable character
               S01:00FF04A7:  80
F02:0034       	dc.b	$80		; 0x1E - RS	non printable character
               S01:00FF04A8:  80
F02:0035       	dc.b	$80		; 0x1F - US	non printable character
               S01:00FF04A9:  80
F02:0036       	dc.b	$20		; 0x20 - (space)
               S01:00FF04AA:  20
F02:0037       	dc.b	$21		; 0x21 - !
               S01:00FF04AB:  21
F02:0038       	dc.b	$22		; 0x22 - "
               S01:00FF04AC:  22
F02:0039       	dc.b	$23		; 0x23 - #
               S01:00FF04AD:  23
F02:0040       	dc.b	$24		; 0x24 - $
               S01:00FF04AE:  24
F02:0041       	dc.b	$25		; 0x25 - %
               S01:00FF04AF:  25
F02:0042       	dc.b	$26		; 0x26 - &
               S01:00FF04B0:  26
F02:0043       	dc.b	$27		; 0x27 - '
               S01:00FF04B1:  27
F02:0044       	dc.b	$28		; 0x28 - (
               S01:00FF04B2:  28
F02:0045       	dc.b	$29		; 0x29 - )
               S01:00FF04B3:  29
F02:0046       	dc.b	$2A		; 0x2A - *
               S01:00FF04B4:  2A
F02:0047       	dc.b	$2B		; 0x2B - +
               S01:00FF04B5:  2B
F02:0048       	dc.b	$2C		; 0x2C - ,
               S01:00FF04B6:  2C
F02:0049       	dc.b	$2D		; 0x2D - -
               S01:00FF04B7:  2D
F02:0050       	dc.b	$2E		; 0x2E - .
               S01:00FF04B8:  2E
F02:0051       	dc.b	$2F		; 0x2F - /
               S01:00FF04B9:  2F
F02:0052       	dc.b	$30		; 0x30 - 0
               S01:00FF04BA:  30
F02:0053       	dc.b	$31		; 0x31 - 1
               S01:00FF04BB:  31
F02:0054       	dc.b	$32		; 0x32 - 2
               S01:00FF04BC:  32
F02:0055       	dc.b	$33		; 0x33 - 3
               S01:00FF04BD:  33
F02:0056       	dc.b	$34		; 0x34 - 4
               S01:00FF04BE:  34
F02:0057       	dc.b	$35		; 0x35 - 5
               S01:00FF04BF:  35
F02:0058       	dc.b	$36		; 0x36 - 6
               S01:00FF04C0:  36
F02:0059       	dc.b	$37		; 0x37 - 7
               S01:00FF04C1:  37
F02:0060       	dc.b	$38		; 0x38 - 8
               S01:00FF04C2:  38
F02:0061       	dc.b	$39		; 0x39 - 9
               S01:00FF04C3:  39
F02:0062       	dc.b	$3A		; 0x3A - :
               S01:00FF04C4:  3A
F02:0063       	dc.b	$3B		; 0x3B - ;
               S01:00FF04C5:  3B
F02:0064       	dc.b	$3C		; 0x3C - <
               S01:00FF04C6:  3C
F02:0065       	dc.b	$3D		; 0x3D - =
               S01:00FF04C7:  3D
F02:0066       	dc.b	$3E		; 0x3E - >
               S01:00FF04C8:  3E
F02:0067       	dc.b	$3F		; 0x3F - ?
               S01:00FF04C9:  3F
F02:0068       	dc.b	$00		; 0x40 - @
               S01:00FF04CA:  00
F02:0069       	dc.b	$41		; 0x41 - A
               S01:00FF04CB:  41
F02:0070       	dc.b	$42		; 0x42 - B
               S01:00FF04CC:  42
F02:0071       	dc.b	$43		; 0x43 - C
               S01:00FF04CD:  43
F02:0072       	dc.b	$44		; 0x44 - D
               S01:00FF04CE:  44
F02:0073       	dc.b	$45		; 0x45 - E
               S01:00FF04CF:  45
F02:0074       	dc.b	$46		; 0x46 - F
               S01:00FF04D0:  46
F02:0075       	dc.b	$47		; 0x47 - G
               S01:00FF04D1:  47
F02:0076       	dc.b	$48		; 0x48 - H
               S01:00FF04D2:  48
F02:0077       	dc.b	$49		; 0x49 - I
               S01:00FF04D3:  49
F02:0078       	dc.b	$4A		; 0x4A - J
               S01:00FF04D4:  4A
F02:0079       	dc.b	$4B		; 0x4B - K
               S01:00FF04D5:  4B
F02:0080       	dc.b	$4C		; 0x4C - L
               S01:00FF04D6:  4C
F02:0081       	dc.b	$4D		; 0x4D - M
               S01:00FF04D7:  4D
F02:0082       	dc.b	$4E		; 0x4E - N
               S01:00FF04D8:  4E
F02:0083       	dc.b	$4F		; 0x4F - O
               S01:00FF04D9:  4F
F02:0084       	dc.b	$50		; 0x50 - P
               S01:00FF04DA:  50
F02:0085       	dc.b	$51		; 0x51 - Q
               S01:00FF04DB:  51
F02:0086       	dc.b	$52		; 0x52 - R
               S01:00FF04DC:  52
F02:0087       	dc.b	$53		; 0x53 - S
               S01:00FF04DD:  53
F02:0088       	dc.b	$54		; 0x54 - T
               S01:00FF04DE:  54
F02:0089       	dc.b	$55		; 0x55 - U
               S01:00FF04DF:  55
F02:0090       	dc.b	$56		; 0x56 - V
               S01:00FF04E0:  56
F02:0091       	dc.b	$57		; 0x57 - W
               S01:00FF04E1:  57
F02:0092       	dc.b	$58		; 0x58 - X
               S01:00FF04E2:  58
F02:0093       	dc.b	$59		; 0x59 - Y
               S01:00FF04E3:  59
F02:0094       	dc.b	$5A		; 0x5A - Z
               S01:00FF04E4:  5A
F02:0095       	dc.b	$1B		; 0x5B - [
               S01:00FF04E5:  1B
F02:0096       	dc.b	$5C		; 0x5C - \	patched
               S01:00FF04E6:  5C
F02:0097       	dc.b	$1D		; 0x5D - ]
               S01:00FF04E7:  1D
F02:0098       	dc.b	$5E		; 0x5E - ^	patched
               S01:00FF04E8:  5E
F02:0099       	dc.b	$5F		; 0x5F - _	patched
               S01:00FF04E9:  5F
F02:0100       	dc.b	$63		; 0x60 - `	patched
               S01:00FF04EA:  63
F02:0101       	dc.b	$01		; 0x61 - a
               S01:00FF04EB:  01
F02:0102       	dc.b	$02		; 0x62 - b
               S01:00FF04EC:  02
F02:0103       	dc.b	$03		; 0x63 - c
               S01:00FF04ED:  03
F02:0104       	dc.b	$04		; 0x64 - d
               S01:00FF04EE:  04
F02:0105       	dc.b	$05		; 0x65 - e
               S01:00FF04EF:  05
F02:0106       	dc.b	$06		; 0x66 - f
               S01:00FF04F0:  06
F02:0107       	dc.b	$07		; 0x67 - g
               S01:00FF04F1:  07
F02:0108       	dc.b	$08		; 0x68 - h
               S01:00FF04F2:  08
F02:0109       	dc.b	$09		; 0x69 - i
               S01:00FF04F3:  09
F02:0110       	dc.b	$0A		; 0x6A - j
               S01:00FF04F4:  0A
F02:0111       	dc.b	$0B		; 0x6B - k
               S01:00FF04F5:  0B
F02:0112       	dc.b	$0C		; 0x6C - l
               S01:00FF04F6:  0C
F02:0113       	dc.b	$0D		; 0x6D - m
               S01:00FF04F7:  0D
F02:0114       	dc.b	$0E		; 0x6E - n
               S01:00FF04F8:  0E
F02:0115       	dc.b	$0F		; 0x6F - o
               S01:00FF04F9:  0F
F02:0116       	dc.b	$10		; 0x70 - p
               S01:00FF04FA:  10
F02:0117       	dc.b	$11		; 0x71 - q
               S01:00FF04FB:  11
F02:0118       	dc.b	$12		; 0x72 - r
               S01:00FF04FC:  12
F02:0119       	dc.b	$13		; 0x73 - s
               S01:00FF04FD:  13
F02:0120       	dc.b	$14		; 0x74 - t
               S01:00FF04FE:  14
F02:0121       	dc.b	$15		; 0x75 - u
               S01:00FF04FF:  15
F02:0122       	dc.b	$16		; 0x76 - v
               S01:00FF0500:  16
F02:0123       	dc.b	$17		; 0x77 - w
               S01:00FF0501:  17
F02:0124       	dc.b	$18		; 0x78 - x
               S01:00FF0502:  18
F02:0125       	dc.b	$19		; 0x79 - y
               S01:00FF0503:  19
F02:0126       	dc.b	$1A		; 0x7A - z
               S01:00FF0504:  1A
F02:0127       	dc.b	$64		; 0x7B - {	patched
               S01:00FF0505:  64
F02:0128       	dc.b	$65		; 0x7C - |	patched
               S01:00FF0506:  65
F02:0129       	dc.b	$66		; 0x7D - }	patched
               S01:00FF0507:  66
F02:0130       	dc.b	$67		; 0x7E - ~	patched
               S01:00FF0508:  67
F02:0131       	dc.b	$80		; 0x7F - DEL	non printable character
               S01:00FF0509:  80
F02:0132       
F02:0133       hex_table
F02:0134       	dc.b	'0123456789abcdef'
               S01:00FF050A:  30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66
F02:0135       
F02:0136       ;	The following table is based on a SID clock frequency of 985248Hz (PAL)
F02:0137       ;	Calculations were made according to Codebase64 article
F02:0138       ;	https://codebase64.org/doku.php?id=base:how_to_calculate_your_own_sid_frequency_table
F02:0139       ;
F02:0140       notes
F02:0141       	dc.w	$0116,$0127,$0139,$014B,$015F,$0174,$018A,$01A1,$01BA,$01D4,$01F0,$020E	; N_C0_ to N_B0_
               S01:00FF051A:  01 16
               S01:00FF051C:  01 27
               S01:00FF051E:  01 39
               S01:00FF0520:  01 4B
               S01:00FF0522:  01 5F
               S01:00FF0524:  01 74
               S01:00FF0526:  01 8A
               S01:00FF0528:  01 A1
               S01:00FF052A:  01 BA
               S01:00FF052C:  01 D4
               S01:00FF052E:  01 F0
               S01:00FF0530:  02 0E
F02:0142       	dc.w	$022D,$024E,$0271,$0296,$02BE,$02E7,$0314,$0342,$0374,$03A9,$03E0,$041B	; N_C1_ to N_B1_
               S01:00FF0532:  02 2D
               S01:00FF0534:  02 4E
               S01:00FF0536:  02 71
               S01:00FF0538:  02 96
               S01:00FF053A:  02 BE
               S01:00FF053C:  02 E7
               S01:00FF053E:  03 14
               S01:00FF0540:  03 42
               S01:00FF0542:  03 74
               S01:00FF0544:  03 A9
               S01:00FF0546:  03 E0
               S01:00FF0548:  04 1B
F02:0143       	dc.w	$045A,$049C,$04E2,$052D,$057B,$05CF,$0627,$0685,$06E8,$0751,$07C1,$0837	; N_C2_ to N_B2_
               S01:00FF054A:  04 5A
               S01:00FF054C:  04 9C
               S01:00FF054E:  04 E2
               S01:00FF0550:  05 2D
               S01:00FF0552:  05 7B
               S01:00FF0554:  05 CF
               S01:00FF0556:  06 27
               S01:00FF0558:  06 85
               S01:00FF055A:  06 E8
               S01:00FF055C:  07 51
               S01:00FF055E:  07 C1
               S01:00FF0560:  08 37
F02:0144       	dc.w	$08B4,$0938,$09C4,$0A59,$0AF7,$0B9D,$0C4E,$0D0A,$0DD0,$0EA2,$0F81,$106D	; N_C3_ to N_B3_
               S01:00FF0562:  08 B4
               S01:00FF0564:  09 38
               S01:00FF0566:  09 C4
               S01:00FF0568:  0A 59
               S01:00FF056A:  0A F7
               S01:00FF056C:  0B 9D
               S01:00FF056E:  0C 4E
               S01:00FF0570:  0D 0A
               S01:00FF0572:  0D D0
               S01:00FF0574:  0E A2
               S01:00FF0576:  0F 81
               S01:00FF0578:  10 6D
F02:0145       	dc.w	$1167,$1270,$1389,$14B2,$15ED,$173B,$189C,$1A13,$1BA0,$1D45,$1F02,$20DA	; N_C4_ to N_B4_
               S01:00FF057A:  11 67
               S01:00FF057C:  12 70
               S01:00FF057E:  13 89
               S01:00FF0580:  14 B2
               S01:00FF0582:  15 ED
               S01:00FF0584:  17 3B
               S01:00FF0586:  18 9C
               S01:00FF0588:  1A 13
               S01:00FF058A:  1B A0
               S01:00FF058C:  1D 45
               S01:00FF058E:  1F 02
               S01:00FF0590:  20 DA
F02:0146       	dc.w	$22CE,$24E0,$2711,$2964,$2BDA,$2E76,$3139,$3426,$3740,$3A89,$3E04,$41B4	; N_C5_ to N_B5_
               S01:00FF0592:  22 CE
               S01:00FF0594:  24 E0
               S01:00FF0596:  27 11
               S01:00FF0598:  29 64
               S01:00FF059A:  2B DA
               S01:00FF059C:  2E 76
               S01:00FF059E:  31 39
               S01:00FF05A0:  34 26
               S01:00FF05A2:  37 40
               S01:00FF05A4:  3A 89
               S01:00FF05A6:  3E 04
               S01:00FF05A8:  41 B4
F02:0147       	dc.w	$459C,$49C0,$4E23,$52C8,$57B4,$5CEB,$6272,$684C,$6E80,$7512,$7C08,$8368	; N_C6_ to N_B6_
               S01:00FF05AA:  45 9C
               S01:00FF05AC:  49 C0
               S01:00FF05AE:  4E 23
               S01:00FF05B0:  52 C8
               S01:00FF05B2:  57 B4
               S01:00FF05B4:  5C EB
               S01:00FF05B6:  62 72
               S01:00FF05B8:  68 4C
               S01:00FF05BA:  6E 80
               S01:00FF05BC:  75 12
               S01:00FF05BE:  7C 08
               S01:00FF05C0:  83 68
F02:0148       	dc.w	$8B39,$9380,$9C45,$A590,$AF68,$B9D6,$C4E3,$D099,$DD00,$EA24,$F810	; N_C7_	to N_A7S
               S01:00FF05C2:  8B 39
               S01:00FF05C4:  93 80
               S01:00FF05C6:  9C 45
               S01:00FF05C8:  A5 90
               S01:00FF05CA:  AF 68
               S01:00FF05CC:  B9 D6
               S01:00FF05CE:  C4 E3
               S01:00FF05D0:  D0 99
               S01:00FF05D2:  DD 00
               S01:00FF05D4:  EA 24
               S01:00FF05D6:  F8 10
F02:0149       
F02:0150       ;notes_old
F02:0151       ;	dc.w	$0112,$0123,$0134,$0146,$015a,$016e,$0184,$018b,$01b3,$01cd,$01e9,$0206	; N_C0_ to N_B0_
F02:0152       ;	dc.w	$0225,$0245,$0268,$028c,$02b3,$02dc,$0308,$0336,$0367,$039b,$03d2,$040c	; N_C1_ to N_B1_
F02:0153       ;	dc.w	$0449,$048b,$04d0,$0519,$0567,$05b9,$0610,$066c,$06ce,$0735,$07a3,$0817	; N_C2_ to N_B2_
F02:0154       ;	dc.w	$0893,$0915,$099f,$0a32,$0acd,$0b72,$0c20,$0cd8,$0d9c,$0e6b,$0f46,$102f	; N_C3_ to N_B3_
F02:0155       ;	dc.w	$1125,$122a,$133f,$1464,$159a,$16e3,$183f,$1981,$1b38,$1cd6,$1e80,$205e	; N_C4_ to N_B4_
F02:0156       ;	dc.w	$224b,$2455,$267e,$28c8,$2b34,$2dc6,$307f,$3361,$366f,$39ac,$3d1a,$40bc	; N_C5_ to N_B5_
F02:0157       ;	dc.w	$4495,$48a9,$4cfc,$518f,$5669,$5b8c,$60fe,$6602,$6cdf,$7358,$7a34,$8178	; N_C6_ to N_B6_
F02:0158       ;	dc.w	$892b,$9153,$99f7,$a31f,$acd2,$b719,$c1fc,$cd85,$d9bd,$e6b0,$f467	; N_C7_	to N_A7S
F02:0159       
F02:0160       	align	1
F02:0161       test_table
F02:0162       	DC.B	$00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
               S01:00FF05D8:  00
               S01:00FF05D9:  01
               S01:00FF05DA:  02
               S01:00FF05DB:  03
               S01:00FF05DC:  04
               S01:00FF05DD:  05
               S01:00FF05DE:  06
               S01:00FF05DF:  07
               S01:00FF05E0:  08
               S01:00FF05E1:  09
               S01:00FF05E2:  0A
               S01:00FF05E3:  0B
               S01:00FF05E4:  0C
               S01:00FF05E5:  0D
               S01:00FF05E6:  0E
               S01:00FF05E7:  0F
F02:0163       	DC.B	$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
               S01:00FF05E8:  10
               S01:00FF05E9:  11
               S01:00FF05EA:  12
               S01:00FF05EB:  13
               S01:00FF05EC:  14
               S01:00FF05ED:  15
               S01:00FF05EE:  16
               S01:00FF05EF:  17
               S01:00FF05F0:  18
               S01:00FF05F1:  19
               S01:00FF05F2:  1A
               S01:00FF05F3:  1B
               S01:00FF05F4:  1C
               S01:00FF05F5:  1D
               S01:00FF05F6:  1E
               S01:00FF05F7:  1F
F02:0164       	DC.B	$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
               S01:00FF05F8:  20
               S01:00FF05F9:  21
               S01:00FF05FA:  22
               S01:00FF05FB:  23
               S01:00FF05FC:  24
               S01:00FF05FD:  25
               S01:00FF05FE:  26
               S01:00FF05FF:  27
               S01:00FF0600:  28
               S01:00FF0601:  29
               S01:00FF0602:  2A
               S01:00FF0603:  2B
               S01:00FF0604:  2C
               S01:00FF0605:  2D
               S01:00FF0606:  2E
               S01:00FF0607:  2F
F02:0165       	DC.B	$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
               S01:00FF0608:  30
               S01:00FF0609:  31
               S01:00FF060A:  32
               S01:00FF060B:  33
               S01:00FF060C:  34
               S01:00FF060D:  35
               S01:00FF060E:  36
               S01:00FF060F:  37
               S01:00FF0610:  38
               S01:00FF0611:  39
               S01:00FF0612:  3A
               S01:00FF0613:  3B
               S01:00FF0614:  3C
               S01:00FF0615:  3D
               S01:00FF0616:  3E
               S01:00FF0617:  3F
F02:0166       	DC.B	$40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
               S01:00FF0618:  40
               S01:00FF0619:  41
               S01:00FF061A:  42
               S01:00FF061B:  43
               S01:00FF061C:  44
               S01:00FF061D:  45
               S01:00FF061E:  46
               S01:00FF061F:  47
               S01:00FF0620:  48
               S01:00FF0621:  49
               S01:00FF0622:  4A
               S01:00FF0623:  4B
               S01:00FF0624:  4C
               S01:00FF0625:  4D
               S01:00FF0626:  4E
               S01:00FF0627:  4F
F02:0167       	DC.B	$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
               S01:00FF0628:  50
               S01:00FF0629:  51
               S01:00FF062A:  52
               S01:00FF062B:  53
               S01:00FF062C:  54
               S01:00FF062D:  55
               S01:00FF062E:  56
               S01:00FF062F:  57
               S01:00FF0630:  58
               S01:00FF0631:  59
               S01:00FF0632:  5A
               S01:00FF0633:  5B
               S01:00FF0634:  5C
               S01:00FF0635:  5D
               S01:00FF0636:  5E
               S01:00FF0637:  5F
F02:0168       	DC.B	$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
               S01:00FF0638:  60
               S01:00FF0639:  61
               S01:00FF063A:  62
               S01:00FF063B:  63
               S01:00FF063C:  64
               S01:00FF063D:  65
               S01:00FF063E:  66
               S01:00FF063F:  67
               S01:00FF0640:  68
               S01:00FF0641:  69
               S01:00FF0642:  6A
               S01:00FF0643:  6B
               S01:00FF0644:  6C
               S01:00FF0645:  6D
               S01:00FF0646:  6E
               S01:00FF0647:  6F
F02:0169       	DC.B	$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
               S01:00FF0648:  70
               S01:00FF0649:  71
               S01:00FF064A:  72
               S01:00FF064B:  73
               S01:00FF064C:  74
               S01:00FF064D:  75
               S01:00FF064E:  76
               S01:00FF064F:  77
               S01:00FF0650:  78
               S01:00FF0651:  79
               S01:00FF0652:  7A
               S01:00FF0653:  7B
               S01:00FF0654:  7C
               S01:00FF0655:  7D
               S01:00FF0656:  7E
               S01:00FF0657:  7F
F02:0170       	DC.B	$80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A,$8B,$8C,$8D,$8E,$8F
               S01:00FF0658:  80
               S01:00FF0659:  81
               S01:00FF065A:  82
               S01:00FF065B:  83
               S01:00FF065C:  84
               S01:00FF065D:  85
               S01:00FF065E:  86
               S01:00FF065F:  87
               S01:00FF0660:  88
               S01:00FF0661:  89
               S01:00FF0662:  8A
               S01:00FF0663:  8B
               S01:00FF0664:  8C
               S01:00FF0665:  8D
               S01:00FF0666:  8E
               S01:00FF0667:  8F
F02:0171       	DC.B	$90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$9F
               S01:00FF0668:  90
               S01:00FF0669:  91
               S01:00FF066A:  92
               S01:00FF066B:  93
               S01:00FF066C:  94
               S01:00FF066D:  95
               S01:00FF066E:  96
               S01:00FF066F:  97
               S01:00FF0670:  98
               S01:00FF0671:  99
               S01:00FF0672:  9A
               S01:00FF0673:  9B
               S01:00FF0674:  9C
               S01:00FF0675:  9D
               S01:00FF0676:  9E
               S01:00FF0677:  9F
F02:0172       	DC.B	$A0,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF
               S01:00FF0678:  A0
               S01:00FF0679:  A1
               S01:00FF067A:  A2
               S01:00FF067B:  A3
               S01:00FF067C:  A4
               S01:00FF067D:  A5
               S01:00FF067E:  A6
               S01:00FF067F:  A7
               S01:00FF0680:  A8
               S01:00FF0681:  A9
               S01:00FF0682:  AA
               S01:00FF0683:  AB
               S01:00FF0684:  AC
               S01:00FF0685:  AD
               S01:00FF0686:  AE
               S01:00FF0687:  AF
F02:0173       	DC.B	$B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE,$BF
               S01:00FF0688:  B0
               S01:00FF0689:  B1
               S01:00FF068A:  B2
               S01:00FF068B:  B3
               S01:00FF068C:  B4
               S01:00FF068D:  B5
               S01:00FF068E:  B6
               S01:00FF068F:  B7
               S01:00FF0690:  B8
               S01:00FF0691:  B9
               S01:00FF0692:  BA
               S01:00FF0693:  BB
               S01:00FF0694:  BC
               S01:00FF0695:  BD
               S01:00FF0696:  BE
               S01:00FF0697:  BF
F02:0174       	DC.B	$C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
               S01:00FF0698:  C0
               S01:00FF0699:  C1
               S01:00FF069A:  C2
               S01:00FF069B:  C3
               S01:00FF069C:  C4
               S01:00FF069D:  C5
               S01:00FF069E:  C6
               S01:00FF069F:  C7
               S01:00FF06A0:  C8
               S01:00FF06A1:  C9
               S01:00FF06A2:  CA
               S01:00FF06A3:  CB
               S01:00FF06A4:  CC
               S01:00FF06A5:  CD
               S01:00FF06A6:  CE
               S01:00FF06A7:  CF
F02:0175       	DC.B	$D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DE,$DF
               S01:00FF06A8:  D0
               S01:00FF06A9:  D1
               S01:00FF06AA:  D2
               S01:00FF06AB:  D3
               S01:00FF06AC:  D4
               S01:00FF06AD:  D5
               S01:00FF06AE:  D6
               S01:00FF06AF:  D7
               S01:00FF06B0:  D8
               S01:00FF06B1:  D9
               S01:00FF06B2:  DA
               S01:00FF06B3:  DB
               S01:00FF06B4:  DC
               S01:00FF06B5:  DD
               S01:00FF06B6:  DE
               S01:00FF06B7:  DF
F02:0176       	DC.B	$E0,$E1,$E2,$E3,$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED,$EE,$EF
               S01:00FF06B8:  E0
               S01:00FF06B9:  E1
               S01:00FF06BA:  E2
               S01:00FF06BB:  E3
               S01:00FF06BC:  E4
               S01:00FF06BD:  E5
               S01:00FF06BE:  E6
               S01:00FF06BF:  E7
               S01:00FF06C0:  E8
               S01:00FF06C1:  E9
               S01:00FF06C2:  EA
               S01:00FF06C3:  EB
               S01:00FF06C4:  EC
               S01:00FF06C5:  ED
               S01:00FF06C6:  EE
               S01:00FF06C7:  EF
F02:0177       	DC.B	$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF
               S01:00FF06C8:  F0
               S01:00FF06C9:  F1
               S01:00FF06CA:  F2
               S01:00FF06CB:  F3
               S01:00FF06CC:  F4
               S01:00FF06CD:  F5
               S01:00FF06CE:  F6
               S01:00FF06CF:  F7
               S01:00FF06D0:  F8
               S01:00FF06D1:  F9
               S01:00FF06D2:  FA
               S01:00FF06D3:  FB
               S01:00FF06D4:  FC
               S01:00FF06D5:  FD
               S01:00FF06D6:  FE
               S01:00FF06D7:  FF
F00:0527       
F00:0528       	ORG	KERNEL_LOC+$FFFC
F00:0529       	DC.L	$DEADBEEF
               S02:00FFFFFC:  DE AD BE EF


Sections:
S01  segff0000
S02  segfffffc


Sources:
F00  kernel.s
F01  kernel_definitions.s
F02  kernel_tables.s


Symbols:
test_table EXPR(16713176=0xff05d8) UNUSED ABS 
hex_table EXPR(16712970=0xff050a) UNUSED ABS 
 copy_charrom_to_charram .4 EXPR(16712558=0xff036e) ABS 
 copy_charrom_to_charram .3 EXPR(16712554=0xff036a) ABS 
 copy_charrom_to_charram .2 EXPR(16712542=0xff035e) ABS 
 copy_charrom_to_charram .5 EXPR(16712566=0xff0376) ABS 
 copy_charrom_to_charram .1 EXPR(16712530=0xff0352) ABS 
 memcopy .1 EXPR(16712496=0xff0330) ABS 
 blockfill_words .1 EXPR(16712476=0xff031c) ABS 
 blockfill_bytes .1 EXPR(16712454=0xff0306) ABS 
timer3_handler EXPR(16712448=0xff0300) ABS 
timer2_handler EXPR(16712446=0xff02fe) ABS 
timer1_handler EXPR(16712426=0xff02ea) ABS 
timer0_handler EXPR(16712414=0xff02de) ABS 
interrupt_7_autovector EXPR(16712412=0xff02dc) ABS 
interrupt_6_autovector EXPR(16712410=0xff02da) ABS 
interrupt_5_autovector EXPR(16712404=0xff02d4) ABS 
timer_finish EXPR(16712400=0xff02d0) ABS 
timer3_check EXPR(16712374=0xff02b6) ABS 
timer2_check EXPR(16712348=0xff029c) ABS 
timer1_check EXPR(16712322=0xff0282) ABS 
timer0_check EXPR(16712296=0xff0268) UNUSED ABS 
interrupt_4_autovector EXPR(16712294=0xff0266) ABS 
interrupt_2_autovector EXPR(16712250=0xff023a) ABS 
exception_handler EXPR(16712238=0xff022e) ABS 
 put_string .2 EXPR(16712234=0xff022a) ABS 
 put_string .1 EXPR(16712222=0xff021e) ABS 
 put_char .end EXPR(16712214=0xff0216) ABS 
 put_char .5 EXPR(16712202=0xff020a) ABS 
 put_char .4 EXPR(16712186=0xff01fa) ABS 
 put_char .3 EXPR(16712172=0xff01ec) ABS 
 put_char .2 EXPR(16712156=0xff01dc) ABS 
 put_char .1 EXPR(16712140=0xff01cc) ABS 
ascii_to_screencode EXPR(16712842=0xff048a) ABS 
blockfill_words EXPR(16712468=0xff0314) ABS 
blockfill_bytes EXPR(16712450=0xff0302) ABS 
put_char EXPR(16712044=0xff016c) ABS 
se_deactivate_cursor EXPR(16712724=0xff0414) ABS 
 mainloop .2 EXPR(16711968=0xff0120) ABS 
 mainloop .1 EXPR(16711950=0xff010e) ABS 
se_activate_cursor EXPR(16712696=0xff03f8) ABS 
mainloop EXPR(16711938=0xff0102) UNUSED ABS 
notes EXPR(16712986=0xff051a) ABS 
put_string EXPR(16712220=0xff021c) ABS 
welcome EXPR(16712800=0xff0460) ABS 
clear_screen EXPR(16712002=0xff0142) ABS 
memcopy EXPR(16712492=0xff032c) ABS 
screen_blit_structure EXPR(16712768=0xff0440) ABS 
copy_charrom_to_charram EXPR(16712512=0xff0340) ABS 
reset_sids EXPR(16712670=0xff03de) ABS 
setup_vector_table EXPR(16712572=0xff037c) ABS 
kernel_main EXPR(16711688=0xff0008) ABS 
SE_CRS_INTERVAL EXPR(32866=0x8062) UNUSED EQU 
SE_CRS_CNTDWN EXPR(32865=0x8061) UNUSED EQU 
SE_CRS_BLINK EXPR(32864=0x8060) UNUSED EQU 
LOGO_BLIT EXPR(32832=0x8040) UNUSED EQU 
KERNEL_TEXT_SCR EXPR(32800=0x8020) EQU 
CURRENT_TXT_SCR EXPR(32788=0x8014) EQU 
TIMER3_VECTOR EXPR(32784=0x8010) EQU 
TIMER2_VECTOR EXPR(32780=0x800c) EQU 
TIMER1_VECTOR EXPR(32776=0x8008) EQU 
TIMER0_VECTOR EXPR(32772=0x8004) EQU 
CURSOR_POS EXPR(32770=0x8002) EQU 
CURR_TEXT_COLOR EXPR(32768=0x8000) EQU 
N_A7S EXPR(188=0xbc) UNUSED EQU 
N_A7_ EXPR(186=0xba) UNUSED EQU 
N_G7S EXPR(184=0xb8) UNUSED EQU 
N_G7_ EXPR(182=0xb6) UNUSED EQU 
N_F7S EXPR(180=0xb4) UNUSED EQU 
N_F7_ EXPR(178=0xb2) UNUSED EQU 
N_E7_ EXPR(176=0xb0) UNUSED EQU 
N_D7S EXPR(174=0xae) UNUSED EQU 
N_D7_ EXPR(172=0xac) UNUSED EQU 
N_C7S EXPR(170=0xaa) UNUSED EQU 
N_C7_ EXPR(168=0xa8) UNUSED EQU 
N_B6_ EXPR(166=0xa6) UNUSED EQU 
N_A6S EXPR(164=0xa4) UNUSED EQU 
N_A6_ EXPR(162=0xa2) UNUSED EQU 
N_G6S EXPR(160=0xa0) UNUSED EQU 
N_G6_ EXPR(158=0x9e) UNUSED EQU 
N_F6S EXPR(156=0x9c) UNUSED EQU 
N_F6_ EXPR(154=0x9a) UNUSED EQU 
N_E6_ EXPR(152=0x98) UNUSED EQU 
N_D6S EXPR(150=0x96) UNUSED EQU 
N_D6_ EXPR(148=0x94) UNUSED EQU 
N_C6S EXPR(146=0x92) UNUSED EQU 
N_C6_ EXPR(144=0x90) UNUSED EQU 
N_B5_ EXPR(142=0x8e) UNUSED EQU 
N_A5S EXPR(140=0x8c) UNUSED EQU 
N_A5_ EXPR(138=0x8a) UNUSED EQU 
N_G5S EXPR(136=0x88) UNUSED EQU 
N_G5_ EXPR(134=0x86) UNUSED EQU 
N_F5S EXPR(132=0x84) UNUSED EQU 
N_F5_ EXPR(130=0x82) UNUSED EQU 
N_E5_ EXPR(128=0x80) UNUSED EQU 
N_D5S EXPR(126=0x7e) UNUSED EQU 
N_D5_ EXPR(124=0x7c) UNUSED EQU 
N_C5S EXPR(122=0x7a) UNUSED EQU 
N_C5_ EXPR(120=0x78) UNUSED EQU 
N_B4_ EXPR(118=0x76) UNUSED EQU 
N_A4S EXPR(116=0x74) UNUSED EQU 
N_A4_ EXPR(114=0x72) UNUSED EQU 
N_G4S EXPR(112=0x70) UNUSED EQU 
N_G4_ EXPR(110=0x6e) UNUSED EQU 
N_F4S EXPR(108=0x6c) UNUSED EQU 
N_F4_ EXPR(106=0x6a) UNUSED EQU 
N_E4_ EXPR(104=0x68) UNUSED EQU 
N_D4S EXPR(102=0x66) UNUSED EQU 
N_D4_ EXPR(100=0x64) UNUSED EQU 
N_C4S EXPR(98=0x62) UNUSED EQU 
N_C4_ EXPR(96=0x60) UNUSED EQU 
N_B3_ EXPR(94=0x5e) UNUSED EQU 
N_A3S EXPR(92=0x5c) UNUSED EQU 
N_A3_ EXPR(90=0x5a) EQU 
N_G3S EXPR(88=0x58) UNUSED EQU 
N_G3_ EXPR(86=0x56) UNUSED EQU 
N_F3S EXPR(84=0x54) UNUSED EQU 
N_F3_ EXPR(82=0x52) UNUSED EQU 
N_E3_ EXPR(80=0x50) UNUSED EQU 
N_D3S EXPR(78=0x4e) UNUSED EQU 
N_D3_ EXPR(76=0x4c) EQU 
N_C3S EXPR(74=0x4a) UNUSED EQU 
N_C3_ EXPR(72=0x48) UNUSED EQU 
N_B2_ EXPR(70=0x46) UNUSED EQU 
N_A2S EXPR(68=0x44) UNUSED EQU 
N_A2_ EXPR(66=0x42) UNUSED EQU 
N_G2S EXPR(64=0x40) UNUSED EQU 
N_G2_ EXPR(62=0x3e) UNUSED EQU 
N_F2S EXPR(60=0x3c) UNUSED EQU 
N_F2_ EXPR(58=0x3a) UNUSED EQU 
N_E2_ EXPR(56=0x38) UNUSED EQU 
N_D2S EXPR(54=0x36) UNUSED EQU 
N_D2_ EXPR(52=0x34) UNUSED EQU 
N_C2S EXPR(50=0x32) UNUSED EQU 
N_C2_ EXPR(48=0x30) UNUSED EQU 
N_B1_ EXPR(46=0x2e) UNUSED EQU 
N_A1S EXPR(44=0x2c) UNUSED EQU 
N_A1_ EXPR(42=0x2a) UNUSED EQU 
N_G1S EXPR(40=0x28) UNUSED EQU 
N_G1_ EXPR(38=0x26) UNUSED EQU 
N_F1S EXPR(36=0x24) UNUSED EQU 
N_F1_ EXPR(34=0x22) UNUSED EQU 
N_E1_ EXPR(32=0x20) UNUSED EQU 
N_D1S EXPR(30=0x1e) UNUSED EQU 
N_D1_ EXPR(28=0x1c) UNUSED EQU 
N_C1S EXPR(26=0x1a) UNUSED EQU 
N_C1_ EXPR(24=0x18) UNUSED EQU 
N_B0_ EXPR(22=0x16) UNUSED EQU 
N_A0S EXPR(20=0x14) UNUSED EQU 
N_A0_ EXPR(18=0x12) UNUSED EQU 
N_G0S EXPR(16=0x10) UNUSED EQU 
N_G0_ EXPR(14=0xe) UNUSED EQU 
N_F0S EXPR(12=0xc) UNUSED EQU 
N_F0_ EXPR(10=0xa) UNUSED EQU 
N_E0_ EXPR(8=0x8) UNUSED EQU 
N_D0S EXPR(6=0x6) UNUSED EQU 
N_D0_ EXPR(4=0x4) UNUSED EQU 
N_C0S EXPR(2=0x2) UNUSED EQU 
N_C0_ EXPR(0=0x0) UNUSED EQU 
SID1_RGHT EXPR(131=0x83) EQU 
SID1_LEFT EXPR(130=0x82) EQU 
SID0_RGHT EXPR(129=0x81) EQU 
SID0_LEFT EXPR(128=0x80) EQU 
SID1_BASE EXPR(16647456=0xfe0520) EQU 
SID0_BASE EXPR(16647424=0xfe0500) EQU 
SOUND_BASE EXPR(16647424=0xfe0500) EQU 
C64_LIGHTGREY EXPR(64170=0xfaaa) UNUSED EQU 
C64_LIGHTBLUE EXPR(63101=0xf67d) EQU 
C64_LIGHTGREEN EXPR(64506=0xfbfa) UNUSED EQU 
C64_GREY EXPR(63351=0xf777) EQU 
C64_DARKGREY EXPR(62532=0xf444) UNUSED EQU 
C64_LIGHTRED EXPR(64375=0xfb77) UNUSED EQU 
C64_BROWN EXPR(62769=0xf531) UNUSED EQU 
C64_ORANGE EXPR(63571=0xf853) UNUSED EQU 
C64_YELLOW EXPR(65256=0xfee8) UNUSED EQU 
C64_BLUE EXPR(62265=0xf339) EQU 
C64_GREEN EXPR(63141=0xf6a5) UNUSED EQU 
C64_PURPLE EXPR(63561=0xf849) UNUSED EQU 
C64_CYAN EXPR(63692=0xf8cc) UNUSED EQU 
C64_RED EXPR(63283=0xf733) UNUSED EQU 
C64_WHITE EXPR(65535=0xffff) UNUSED EQU 
C64_BLACK EXPR(61440=0xf000) EQU 
BLITTER_CLEAR_COLOR EXPR(16647942=0xfe0706) EQU 
BLITTER_DATA_32_BIT EXPR(16647938=0xfe0702) EQU 
BLITTER_CONTROL EXPR(16647936=0xfe0700) EQU 
BLITTER_BASE EXPR(16647936=0xfe0700) EQU 
TIMER_BASE EXPR(16647680=0xfe0600) EQU 
VICV_BUFFERSWAP EXPR(16647184=0xfe0410) EQU 
VICV_ISR EXPR(16647182=0xfe040e) EQU 
VICV_BORDER_SIZE EXPR(16647180=0xfe040c) EQU 
VICV_COL EXPR(16647176=0xfe0408) EQU 
VICV_TXT EXPR(16647172=0xfe0404) EQU 
VICV_BORDER_COLOR EXPR(16647168=0xfe0400) EQU 
VICV_BASE EXPR(16647168=0xfe0400) EQU 
CIA_KEYBOARD EXPR(16647040=0xfe0380) EQU 
CIA_ASCII EXPR(16646916=0xfe0304) EQU 
CIA_REPEAT EXPR(16646915=0xfe0303) UNUSED EQU 
CIA_DELAY EXPR(16646914=0xfe0302) UNUSED EQU 
CIA_CONTROL EXPR(16646913=0xfe0301) EQU 
CIA_STATUS EXPR(16646912=0xfe0300) UNUSED EQU 
CIA_BASE EXPR(16646912=0xfe0300) EQU 
CHAR_RAM EXPR(15794176=0xf10000) EQU 
CHAR_ROM EXPR(16580608=0xfd0000) EQU 
SCRN_SPACE EXPR(32=0x20) EQU 
ASCII_CURSOR_LEFT EXPR(157=0x9d) EQU 
ASCII_CURSOR_UP EXPR(145=0x91) EQU 
ASCII_CURSOR_RIGHT EXPR(29=0x1d) EQU 
ASCII_CURSOR_DOWN EXPR(17=0x11) EQU 
ASCII_LF EXPR(10=0xa) EQU 
ASCII_NULL EXPR(0=0x0) EQU 
VEC_31_LEVEL7_IRQ_AUTOVECT EXPR(124=0x7c) EQU 
VEC_30_LEVEL6_IRQ_AUTOVECT EXPR(120=0x78) EQU 
VEC_29_LEVEL5_IRQ_AUTOVECT EXPR(116=0x74) EQU 
VEC_28_LEVEL4_IRQ_AUTOVECT EXPR(112=0x70) EQU 
VEC_27_LEVEL3_IRQ_AUTOVECT EXPR(108=0x6c) UNUSED EQU 
VEC_26_LEVEL2_IRQ_AUTOVECT EXPR(104=0x68) EQU 
VEC_11_UNIMPL_INSTRUCTION EXPR(44=0x2c) EQU 
VEC_10_UNIMPL_INSTRUCTION EXPR(40=0x28) EQU 
VEC_04_ILLEGAL_INSTRUCTION EXPR(16=0x10) EQU 
KERNEL_LOC EXPR(16711680=0xff0000) EQU 
_MOVEMBYTES EXPR(8=0x8) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(257=0x101) INTERNAL 
__LINE__ EXPR(529=0x211) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 

There have been no errors.
